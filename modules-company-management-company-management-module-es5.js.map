{"version":3,"sources":["webpack:///src/app/modules/company-management/companies/companies.component.ts","webpack:///src/app/modules/company-management/companies/companies.component.html","webpack:///src/app/modules/company-management/company-management-routing.module.ts","webpack:///src/app/modules/company-management/company-management.module.ts","webpack:///src/app/modules/company-management/company-management.service.ts","webpack:///src/app/modules/company-management/edit-company/edit-company.component.ts","webpack:///src/app/modules/company-management/edit-company/edit-company.component.html","webpack:///src/app/modules/company-management/new-company/new-company.component.ts","webpack:///src/app/modules/company-management/new-company/new-company.component.html"],"names":["CompaniesComponent","companyService","cdr","router","loadingIndicator","getAllCompanies","subscribe","x","rows","console","log","detectChanges","companyID","navigateByUrl","selector","templateUrl","styleUrls","routes","path","component","children","pathMatch","redirectTo","CompanyManagementRoutingModule","forChild","imports","exports","CompanyManagementModule","declarations","providers","entryComponents","CompanyManagementService","company","add","getOneCompany","updateOneCompany","deleteOneCompany","providedIn","EditCompanyComponent","fb","route","companyManagementService","snackService","companyFG","name","required","adServerUrls","array","reportingProviders","snapshot","params","id","map","reporting","intialReportProvider","reportingProvider","email","password","apiUrl","apiKey","push","group","item","setValue","$event","markAllAsTouched","valid","value","info","err","statusText","navigate","adServerUrl","event","newAdServerUrls","i","removeAt","controls","addAdServerUrl","back","NewCompanyComponent","intialServerUrl","addCompany","reset","formGroupDirective","resetForm","error","save"],"mappings":"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","file":"modules-company-management-company-management-module-es5.js","sourcesContent":["import { ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { CompanyManagementService } from '../company-management.service';\r\nimport { CompanyInterface } from 'src/app/shared/models/company.interface';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-companies',\r\n  templateUrl: './companies.component.html',\r\n  styleUrls: ['./companies.component.scss'],\r\n})\r\nexport class CompaniesComponent implements OnInit {\r\n  loadingIndicator = true;\r\n  rows: Array<CompanyInterface>;\r\n  // columns = [{ name: 'Name' }, {prop: '_id'}];\\\r\n\r\n  constructor(\r\n    private companyService: CompanyManagementService,\r\n    private cdr: ChangeDetectorRef,\r\n    private router: Router\r\n  ) {\r\n    this.getAllCompanies();\r\n  }\r\n\r\n  getAllCompanies() {\r\n    this.companyService.getAllCompanies().subscribe((x) => {\r\n      this.rows = x;\r\n      console.log(this.rows);\r\n      this.loadingIndicator = false;\r\n      this.cdr.detectChanges();\r\n    });\r\n  }\r\n\r\n  editCompany(companyID) {\r\n    this.router.navigateByUrl('/company-management/edit/' + companyID);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // console.log(companies)\r\n  }\r\n}\r\n","<div class=\"row\">\r\n  <div class=\"col-xl-12\">\r\n    <div class=\"card card-custom example example-compact gutter-b\">\r\n      <div class=\"card-header\">\r\n        <div class=\"card-title\">\r\n          <h3 class=\"card-label\">View Companies</h3>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <ngx-datatable\r\n          class=\"material fullscreen\"\r\n          [rows]=\"rows\"\r\n          [columnMode]=\"'force'\"\r\n          [loadingIndicator]=\"loadingIndicator\"\r\n          [footerHeight]=\"50\"\r\n          [rowHeight]=\"50\"\r\n          [scrollbarH]=\"true\"\r\n          [headerHeight]=\"50\"\r\n          [limit]=\"10\"\r\n        >\r\n          <ngx-datatable-column name=\"Name\">\r\n            <ng-template let-column=\"column\" ngx-datatable-header-template>\r\n              Name\r\n            </ng-template>\r\n            <ng-template let-value=\"value\" ngx-datatable-cell-template>\r\n              {{ value }}\r\n            </ng-template>\r\n          </ngx-datatable-column>\r\n          <ngx-datatable-column name=\"id\">\r\n            <ng-template ngx-datatable-header-template>Edit</ng-template>\r\n            <ng-template let-row=\"row\" ngx-datatable-cell-template>\r\n              <button\r\n                mat-raised-button\r\n                color=\"primary\"\r\n                (click)=\"editCompany(row._key)\"\r\n              >\r\n                Edit <mat-icon>edit</mat-icon>\r\n              </button>\r\n            </ng-template>\r\n          </ngx-datatable-column>\r\n        </ngx-datatable>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { TagManagementComponent } from '../tag-management/tag-management.component';\r\nimport { CompaniesComponent } from './companies/companies.component';\r\nimport { CompanyManagementComponent } from './company-management.component';\r\nimport { EditCompanyComponent } from './edit-company/edit-company.component';\r\nimport { NewCompanyComponent } from './new-company/new-company.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: CompanyManagementComponent,\r\n    children: [\r\n      {\r\n        path: 'companies',\r\n        component: CompaniesComponent\r\n      },\r\n      {\r\n        path: 'new',\r\n        component: NewCompanyComponent\r\n      },\r\n      {\r\n        path: 'edit/:id',\r\n        component: EditCompanyComponent,\r\n        pathMatch: 'full'\r\n      },\r\n      { path: '', redirectTo: '', pathMatch: 'full' },\r\n      { path: '**', redirectTo: '', pathMatch: 'full' },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class CompanyManagementRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { CompanyManagementRoutingModule } from './company-management-routing.module';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { NewCompanyComponent } from './new-company/new-company.component';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { SnackbarService } from 'src/app/shared/service/snackbar.service';\r\nimport { CompaniesComponent } from './companies/companies.component';\r\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { EditCompanyComponent } from './edit-company/edit-company.component';\r\nimport { MatSelectModule } from '@angular/material/select';\r\n\r\n@NgModule({\r\n  declarations: [NewCompanyComponent, CompaniesComponent, EditCompanyComponent],\r\n  imports: [\r\n    CommonModule,\r\n    CompanyManagementRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatSnackBarModule,\r\n    MatIconModule,\r\n    MatSelectModule,\r\n    NgxDatatableModule,\r\n  ],\r\n  providers: [SnackbarService],\r\n  entryComponents: [NewCompanyComponent],\r\n})\r\nexport class CompanyManagementModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { CompanyInterface } from 'src/app/shared/models/company.interface';\r\nimport { CompanyService } from 'src/app/shared/service/companies.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CompanyManagementService {\r\n  constructor(private companyService: CompanyService) {}\r\n\r\n  addCompany(company: CompanyInterface): Observable<CompanyInterface> {\r\n    return this.companyService.add(company);\r\n  }\r\n\r\n  getAllCompanies(): Observable<CompanyInterface[]> {\r\n    return this.companyService.getAllCompanies();\r\n  }\r\n\r\n  getOneCompany(company: CompanyInterface): Observable<CompanyInterface> {\r\n    return this.companyService.getOneCompany(company);\r\n  }\r\n\r\n  updateOneCompany(company: CompanyInterface): Observable<CompanyInterface> {\r\n    return this.companyService.updateOneCompany(company);\r\n  }\r\n\r\n  deleteOneCompany(company: CompanyInterface) {\r\n    return this.companyService.deleteOneCompany(company);\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators, FormBuilder, FormArray } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CompanyInterface } from 'src/app/shared/models/company.interface';\r\nimport { CompanyService } from 'src/app/shared/service/companies.service';\r\nimport { SnackbarService } from 'src/app/shared/service/snackbar.service';\r\nimport { CompanyManagementService } from '../company-management.service';\r\n\r\n@Component({\r\n  selector: 'app-edit-company',\r\n  templateUrl: './edit-company.component.html',\r\n  styleUrls: ['./edit-company.component.scss']\r\n})\r\nexport class EditCompanyComponent implements OnInit {\r\n\r\n  companyFG: FormGroup;\r\n  company: CompanyInterface;\r\n\r\n  constructor(\r\n    private fb: FormBuilder, \r\n    private route: ActivatedRoute, private companyManagementService: CompanyManagementService, private snackService: SnackbarService, private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n\r\n    //Create update formgroup\r\n    this.companyFG = new FormGroup({\r\n      name: new FormControl('', Validators.required),\r\n      adServerUrls: this.fb.array([]),\r\n      reportingProviders: this.fb.array([]),\r\n    })\r\n    //Get the current company to edit\r\n    if (this.route.snapshot.params.id) {\r\n      this.companyManagementService.getOneCompany(this.route.snapshot.params.id).subscribe(x => {\r\n        this.company = x;\r\n        x['reportingProviders'].map((reporting: any) => {\r\n          var intialReportProvider = { \r\n            reportingProvider: [reporting.reportingProvider, Validators.required],\r\n            email: [reporting.email, Validators.required],\r\n            password: [reporting.password, Validators.required],\r\n            apiUrl: [reporting.apiUrl, Validators.required],\r\n            apiKey: [reporting.apiKey, Validators.required],\r\n          } \r\n          this.reportingProviders.push(this.fb.group(intialReportProvider));\r\n        });\r\n        x['adServerUrls'].map((item) => {\r\n          this.adServerUrls.push(this.fb.group(item));\r\n        });\r\n        this.companyFG.setValue({\r\n          name: x['name'],\r\n          adServerUrls: x['adServerUrls'],\r\n          reportingProviders: x['reportingProviders']\r\n        });\r\n      });\r\n    } else {\r\n      // this.user = this.authService.currentUserSubject.value as any;\r\n    }\r\n  }\r\n\r\n  //Update one company\r\n  //Checks to see if edits were made\r\n  //If edits were made updates current company with new updated fields\r\n  updateOneCompany($event: any) {\r\n    this.companyFG.markAllAsTouched();\r\n    if (this.companyFG.valid) {\r\n      this.company = {...this.company, ...this.companyFG.value};\r\n      this.companyManagementService.updateOneCompany(this.company).subscribe(x => {\r\n        this.snackService.info('Successfully updated company.');\r\n      }, (err) => {\r\n        this.snackService.info(`Error updating company: ${err.statusText}`);\r\n      });\r\n    }\r\n  }\r\n\r\n  deleteOneCompany() {\r\n      this.companyManagementService.deleteOneCompany(this.company).subscribe(x => {\r\n        this.snackService.info('Successfully deleted company.');\r\n        this.router.navigate(['/company-management/companies']);\r\n      }, (err) => {\r\n        this.snackService.info(`Error deleting company: ${err.statusText}`);\r\n      });\r\n  }\r\n\r\n  back() {\r\n    this.router.navigate(['/company-management/companies']);\r\n  }\r\n\r\n  get adServerUrls() {\r\n    return this.companyFG.controls['adServerUrls'] as FormArray;\r\n  }\r\n  get reportingProviders() {\r\n    return this.companyFG.controls['reportingProviders'] as FormArray;\r\n  }\r\n  newAdServerUrls(): FormGroup {\r\n    return this.fb.group({\r\n      adServerUrl: ['', Validators.required],\r\n    })\r\n  }\r\n  addAdServerUrl(event) {\r\n    this.adServerUrls.push(this.newAdServerUrls());\r\n  }\r\n  removeAdServerUrl(i:number) {\r\n    this.adServerUrls.removeAt(i);\r\n  }\r\n\r\n}\r\n","<div class=\"row\">\r\n  <div class=\"col-xl-6\">\r\n    <div class=\"card card-custom example example-compact gutter-b\">\r\n      <div class=\"card-header\">\r\n        <div class=\"card-title\">\r\n          <h3 class=\"card-label\">Edit Company</h3>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <form\r\n          class=\"example-container\"\r\n          [formGroup]=\"companyFG\"\r\n          (submit)=\"updateOneCompany($event)\"\r\n        >\r\n          {{ companyFG.value | json }}\r\n          <div class=\"row pb-2\"> \r\n            <div class=\"col-md-12\">\r\n              <mat-form-field>\r\n                <input\r\n                  matInput\r\n                  formControlName=\"name\"\r\n                  placeholder=\"Company Name\"\r\n                />\r\n                <mat-error *ngIf=\"companyFG.get('name').errors?.required\"\r\n                  >Company Name is required.\r\n                </mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div class=\"row pb-2\">\r\n            <div class=\"col-md-3\">\r\n              <button type=\"button\" class=\"btn btn-sm btn-primary\" (click)=\"addAdServerUrl($event)\">\r\n                Add\r\n              </button>\r\n            </div>           \r\n          </div>\r\n          <div class=\"row\">\r\n              <div class=\"col-md-12\">\r\n                  <div formArrayName=\"adServerUrls\">\r\n                      <div class=\"row\" *ngFor=\"let adUrlItem of adServerUrls.controls; let i=index\" [formGroupName]=\"i\">\r\n                          <div class=\"col-md-10\">\r\n                              <mat-form-field>\r\n                                  <input matInput placeholder=\"Ad Server Url\" formControlName=\"adServerUrl\" />\r\n                                  <mat-error *ngIf=\"adUrlItem.get('adServerUrl').errors?.required\">\r\n                                      AdServerURL is required.\r\n                                  </mat-error>\r\n                              </mat-form-field>\r\n                          </div>\r\n                          <div class=\"col-md-2\">\r\n                              <button class=\"btn btn-sm btn-danger\" (click)=\"removeAdServerUrl(i)\">\r\n                                <i class=\"flaticon2-line\"></i>\r\n                              </button>\r\n                          </div>\r\n                      </div>\r\n                  </div>\r\n              </div>\r\n          </div>\r\n          <div formArrayName=\"reportingProviders\">\r\n            <div *ngFor=\"let reportItem of reportingProviders.controls; let i=index\" [formGroupName]=\"i\">\r\n                <div class=\"row pb-2\">\r\n                    <div class=\"col-md-12\">\r\n                        <mat-form-field>\r\n                            <mat-label>Reporting Providers</mat-label>\r\n                            <mat-select matNativeControl formControlName=\"reportingProvider\" multiple>\r\n                                <mat-option value=\"Perion\">Perion</mat-option>\r\n                                <mat-option value=\"Apptitude\">Apptitude</mat-option>              \r\n                                <mat-option value=\"Verizon Direct\">Verizon Direct</mat-option>\r\n                                <mat-option value=\"System 1\">System 1</mat-option>\r\n                                <mat-option value=\"Bing Direct\">Bing Direct</mat-option>\r\n                                <mat-option value=\"Media.net\">Media.net</mat-option>\r\n                                <mat-option value=\"Hopkins\">Hopkins</mat-option>\r\n                                <mat-option value=\"Lyons\">Lyons</mat-option>\r\n                                <mat-option value=\"Rubi\">Rubi</mat-option>\r\n                            </mat-select>\r\n                            <mat-error *ngIf=\"reportItem.get('reportingProvider').errors?.required\">\r\n                                Reporting Provider is required.\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div class=\"row pb-2\">\r\n                    <div class=\"col-md-12\">\r\n                        <mat-form-field>\r\n                          <input matInput formControlName=\"email\" placeholder=\"Email\" />\r\n                          <mat-error *ngIf=\"reportItem.get('email').errors?.email\"\r\n                            >Email is not valid</mat-error\r\n                          >\r\n                        </mat-form-field>\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"col-md-12\">\r\n                      <mat-form-field>\r\n                        <input\r\n                          matInput\r\n                          formControlName=\"password\"\r\n                          placeholder=\"Password\"\r\n                          type=\"password\"\r\n                          autocomplete=\"off\"\r\n                        />\r\n                        <mat-error\r\n                          *ngIf=\"reportItem.get('password').errors?.required\"\r\n                          >Password is required</mat-error\r\n                        >\r\n                      </mat-form-field>\r\n                    </div>\r\n                </div>\r\n                <div class=\"row pb-2\">\r\n                    <div class=\"col-md-12\">\r\n                        <mat-form-field>\r\n                            <input matInput formControlName=\"apiUrl\" placeholder=\"ApiUrl\" />\r\n                            <mat-error *ngIf=\"reportItem.get('apiUrl').errors?.required\">ApiUrl Name is required.\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n                    </div>\r\n                </div>\r\n                <div class=\"row pb-2\">\r\n                    <div class=\"col-md-12\">\r\n                        <mat-form-field>\r\n                            <input matInput formControlName=\"apiKey\" placeholder=\"ApiKey\" />\r\n                            <mat-error *ngIf=\"reportItem.get('apiKey').errors?.required\">ApiKey Name is required.\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-6\">\r\n              <button\r\n                class=\"save-button\"\r\n                mat-raised-button\r\n                color=\"primary\"\r\n                type=\"submit\"\r\n              >\r\n                Save\r\n              </button>\r\n            </div>\r\n            <div class=\"col-md-6\">\r\n              <button\r\n                class=\"back-button\"\r\n                mat-raised-button\r\n                color=\"secondary\"\r\n                (click)=\"back()\"\r\n              >\r\n                Back\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <a class=\"delete\" (click)=\"deleteOneCompany()\">Delete</a>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"col-xl-6\">\r\n    <div class=\"card card-custom example example-compact gutter-b\">\r\n      <div class=\"card-header\">\r\n        <div class=\"card-title\">\r\n          <h3 class=\"card-label\">Add Stats</h3>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <form\r\n          class=\"example-container\"\r\n          [formGroup]=\"companyFG\"\r\n          (submit)=\"updateOneCompany($event)\"\r\n        >\r\n          <div class=\"row\">\r\n            {{ companyFG.value | json }}\r\n            <div class=\"col-md-12\">\r\n              <mat-form-field>\r\n                <input\r\n                  matInput\r\n                  formControlName=\"name\"\r\n                  placeholder=\"Company Name\"\r\n                />\r\n                <mat-error *ngIf=\"companyFG.get('name').errors?.required\"\r\n                  >Company Name is required.\r\n                </mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-6\">\r\n              <button\r\n                class=\"save-button\"\r\n                mat-raised-button\r\n                color=\"primary\"\r\n                type=\"submit\"\r\n              >\r\n                Save\r\n              </button>\r\n            </div>\r\n            <div class=\"col-md-6\">\r\n              <button\r\n                class=\"back-button\"\r\n                mat-raised-button\r\n                color=\"secondary\"\r\n                (click)=\"back()\"\r\n              >\r\n                Back\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <a class=\"delete\" (click)=\"deleteOneCompany()\">Delete</a>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormControl, FormGroup, FormBuilder, Validators, FormArray, FormGroupDirective } from '@angular/forms';\r\nimport { SnackbarService } from 'src/app/shared/service/snackbar.service';\r\nimport { CompanyManagementService } from '../company-management.service';\r\n\r\n@Component({\r\n  selector: 'app-new-company',\r\n  templateUrl: './new-company.component.html',\r\n  styleUrls: ['./new-company.component.scss']\r\n})\r\nexport class NewCompanyComponent implements OnInit {\r\n  @ViewChild(FormGroupDirective) formGroupDirective: FormGroupDirective;\r\n  companyFG: FormGroup;\r\n\r\n  intialServerUrl = { adServerUrl: ['', Validators.required] } \r\n  intialReportProvider = { \r\n    reportingProvider: ['', Validators.required],\r\n    email: ['', Validators.required],\r\n    password: ['', Validators.required],\r\n    apiUrl: ['', Validators.required],\r\n    apiKey: ['', Validators.required],\r\n  } \r\n\r\n  constructor(\r\n    private companyManagementService: CompanyManagementService,\r\n    private snackService: SnackbarService,\r\n    private fb: FormBuilder, \r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.companyFG = new FormGroup({\r\n      name: new FormControl('', Validators.required),\r\n      adServerUrls: this.fb.array([]),\r\n      reportingProviders: this.fb.array([]),\r\n    });\r\n    this.adServerUrls.push(this.fb.group(this.intialServerUrl));\r\n    this.reportingProviders.push(this.fb.group(this.intialReportProvider));\r\n  }\r\n\r\n  save(): void {\r\n    this.companyFG.markAllAsTouched();\r\n    if (this.companyFG.valid) {\r\n      this.companyManagementService.addCompany(this.companyFG.value).subscribe(x => {\r\n        this.snackService.info('Successfully added a new company.');\r\n        this.companyFG.reset();\r\n        this.formGroupDirective.resetForm();\r\n      }, (err) => {\r\n        this.snackService.info(err.error);\r\n      });\r\n    }\r\n  }\r\n  get reportingProviders() {\r\n    return this.companyFG.controls['reportingProviders'] as FormArray;\r\n  }\r\n  get adServerUrls() {\r\n    return this.companyFG.controls['adServerUrls'] as FormArray;\r\n  }\r\n  newAdServerUrls(): FormGroup {\r\n    return this.fb.group({\r\n      adServerUrl: ['', Validators.required],\r\n    })\r\n  }\r\n  addAdServerUrl(event) {\r\n    this.adServerUrls.push(this.newAdServerUrls());\r\n  }\r\n  removeAdServerUrl(i:number) {\r\n    this.adServerUrls.removeAt(i);\r\n  }\r\n}\r\n","<div class=\"row\">\r\n    <div class=\"col-xl-6\">\r\n        <div class=\"card card-custom example example-compact gutter-b\">\r\n            <div class=\"card-header\">\r\n                <div class=\"card-title\">\r\n                    <h3 class=\"card-label\">Create New Company</h3>\r\n                </div>\r\n            </div>\r\n            <div class=\"card-body\">\r\n                <form class=\"example-container\" [formGroup]=\"companyFG\" (submit)=\"save()\">\r\n                    {{companyFG.value | json}}\r\n                    <div class=\"row pb-2 pt-2\">\r\n                        <div class=\"col-md-12\">\r\n                            <mat-form-field>\r\n                                <input matInput formControlName=\"name\" placeholder=\"Company Name\" />\r\n                                <mat-error *ngIf=\"companyFG.get('name').errors?.required\">Company Name is required.\r\n                                </mat-error>\r\n                            </mat-form-field>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row pb-2\">\r\n                        <div class=\"col-md-3\">\r\n                          <button type=\"button\" class=\"btn btn-sm btn-primary\" (click)=\"addAdServerUrl($event)\">\r\n                            Add\r\n                          </button>\r\n                        </div>           \r\n                      </div>\r\n                    <div class=\"row pb-2\">\r\n                        <div class=\"col-md-12\">\r\n                            <div formArrayName=\"adServerUrls\">\r\n                                <div class=\"row\" *ngFor=\"let adUrlItem of adServerUrls.controls; let i=index\" [formGroupName]=\"i\">\r\n                                    <div class=\"col-md-10\">\r\n                                        <mat-form-field>\r\n                                            <input matInput placeholder=\"Ad Server Url\" formControlName=\"adServerUrl\" />\r\n                                            <mat-error *ngIf=\"adUrlItem.get('adServerUrl').errors?.required\">\r\n                                                AdServerURL is required.\r\n                                            </mat-error>\r\n                                        </mat-form-field>\r\n                                    </div>\r\n                                    <div class=\"col-md-2\">\r\n                                        <button class=\"btn btn-sm btn-danger\" (click)=\"removeAdServerUrl(i)\">\r\n                                          <i class=\"flaticon2-line\"></i>\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div formArrayName=\"reportingProviders\">\r\n                        <div *ngFor=\"let reportItem of reportingProviders.controls; let i=index\" [formGroupName]=\"i\">\r\n                            <div class=\"row pb-2\">\r\n                                <div class=\"col-md-12\">\r\n                                    <mat-form-field>\r\n                                        <mat-label>Reporting Providers</mat-label>\r\n                                        <mat-select matNativeControl formControlName=\"reportingProvider\" multiple>\r\n                                            <mat-option value=\"Perion\">Perion</mat-option>\r\n                                            <mat-option value=\"Apptitude\">Apptitude</mat-option>              \r\n                                            <mat-option value=\"Verizon Direct\">Verizon Direct</mat-option>\r\n                                            <mat-option value=\"System 1\">System 1</mat-option>\r\n                                            <mat-option value=\"Bing Direct\">Bing Direct</mat-option>\r\n                                            <mat-option value=\"Media.net\">Media.net</mat-option>\r\n                                            <mat-option value=\"Hopkins\">Hopkins</mat-option>\r\n                                            <mat-option value=\"Lyons\">Lyons</mat-option>\r\n                                            <mat-option value=\"Rubi\">Rubi</mat-option>\r\n                                        </mat-select>\r\n                                        <mat-error *ngIf=\"reportItem.get('reportingProvider').errors?.required\">\r\n                                            Reporting Provider is required.\r\n                                        </mat-error>\r\n                                    </mat-form-field>\r\n                                </div>\r\n                                \r\n                            </div>\r\n                            <div class=\"row pb-2\">\r\n                                <div class=\"col-md-12\">\r\n                                    <mat-form-field>\r\n                                      <input matInput formControlName=\"email\" placeholder=\"Email\" />\r\n                                      <mat-error *ngIf=\"reportItem.get('email').errors?.email\"\r\n                                        >Email is not valid</mat-error\r\n                                      >\r\n                                    </mat-form-field>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"row\">\r\n                                <div class=\"col-md-12\">\r\n                                  <mat-form-field>\r\n                                    <input\r\n                                      matInput\r\n                                      formControlName=\"password\"\r\n                                      placeholder=\"Password\"\r\n                                      type=\"password\"\r\n                                      autocomplete=\"off\"\r\n                                    />\r\n                                    <mat-error\r\n                                      *ngIf=\"reportItem.get('password').errors?.required\"\r\n                                      >Password is required</mat-error\r\n                                    >\r\n                                  </mat-form-field>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"row pb-2\">\r\n                                <div class=\"col-md-12\">\r\n                                    <mat-form-field>\r\n                                        <input matInput formControlName=\"apiUrl\" placeholder=\"ApiUrl\" />\r\n                                        <mat-error *ngIf=\"reportItem.get('apiUrl').errors?.required\">ApiUrl Name is required.\r\n                                        </mat-error>\r\n                                    </mat-form-field>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"row pb-2\">\r\n                                <div class=\"col-md-12\">\r\n                                    <mat-form-field>\r\n                                        <input matInput formControlName=\"apiKey\" placeholder=\"ApiKey\" />\r\n                                        <mat-error *ngIf=\"reportItem.get('apiKey').errors?.required\">ApiKey Name is required.\r\n                                        </mat-error>\r\n                                    </mat-form-field>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div class=\"row pt-2\">\r\n                        <div class=\"col-md-12\">\r\n                            <button class=\"save-button\" mat-raised-button color=\"primary\" type=\"submit\">Save</button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>"]}