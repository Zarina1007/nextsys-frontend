{"version":3,"sources":["webpack:///src/app/modules/company-management/companies/companies.component.ts","webpack:///src/app/modules/company-management/companies/companies.component.html","webpack:///src/app/modules/company-management/company-management-routing.module.ts","webpack:///src/app/modules/company-management/company-management.module.ts","webpack:///src/app/modules/company-management/company-management.service.ts","webpack:///src/app/modules/company-management/edit-company/edit-company.component.ts","webpack:///src/app/modules/company-management/edit-company/edit-company.component.html","webpack:///src/app/modules/company-management/new-company/new-company.component.ts","webpack:///src/app/modules/company-management/new-company/new-company.component.html"],"names":["CompaniesComponent","companyService","cdr","router","loadingIndicator","getAllCompanies","subscribe","x","rows","console","log","detectChanges","companyID","navigateByUrl","selector","templateUrl","styleUrls","routes","path","component","children","pathMatch","redirectTo","CompanyManagementRoutingModule","forChild","imports","exports","CompanyManagementModule","declarations","providers","entryComponents","CompanyManagementService","company","add","getOneCompany","updateOneCompany","deleteOneCompany","providedIn","EditCompanyComponent","route","companyManagementService","snackService","companyFG","name","required","snapshot","params","id","patchValue","$event","markAllAsTouched","valid","value","info","err","statusText","navigate","back","NewCompanyComponent","addCompany","reset","formGroupDirective","resetForm","error","save"],"mappings":"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","file":"modules-company-management-company-management-module-es5.js","sourcesContent":["import { ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { CompanyManagementService } from '../company-management.service';\r\nimport { CompanyInterface } from 'src/app/shared/models/company.interface';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-companies',\r\n  templateUrl: './companies.component.html',\r\n  styleUrls: ['./companies.component.scss'],\r\n})\r\nexport class CompaniesComponent implements OnInit {\r\n  loadingIndicator = true;\r\n  rows: Array<CompanyInterface>;\r\n  // columns = [{ name: 'Name' }, {prop: '_id'}];\\\r\n\r\n  constructor(\r\n    private companyService: CompanyManagementService,\r\n    private cdr: ChangeDetectorRef,\r\n    private router: Router\r\n  ) {\r\n    this.getAllCompanies();\r\n  }\r\n\r\n  getAllCompanies() {\r\n    this.companyService.getAllCompanies().subscribe((x) => {\r\n      this.rows = x;\r\n      console.log(this.rows);\r\n      this.loadingIndicator = false;\r\n      this.cdr.detectChanges();\r\n    });\r\n  }\r\n\r\n  editCompany(companyID) {\r\n    this.router.navigateByUrl('/company-management/edit/' + companyID);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // console.log(companies)\r\n  }\r\n}\r\n","<div class=\"row\">\r\n  <div class=\"col-xl-12\">\r\n    <div class=\"card card-custom example example-compact gutter-b\">\r\n      <div class=\"card-header\">\r\n        <div class=\"card-title\">\r\n          <h3 class=\"card-label\">View Companies</h3>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <ngx-datatable\r\n          class=\"material fullscreen\"\r\n          [rows]=\"rows\"\r\n          [columnMode]=\"'force'\"\r\n          [loadingIndicator]=\"loadingIndicator\"\r\n          [footerHeight]=\"50\"\r\n          [rowHeight]=\"50\"\r\n          [scrollbarH]=\"true\"\r\n          [headerHeight]=\"50\"\r\n          [limit]=\"10\"\r\n        >\r\n          <ngx-datatable-column name=\"Name\">\r\n            <ng-template let-column=\"column\" ngx-datatable-header-template>\r\n              Name\r\n            </ng-template>\r\n            <ng-template let-value=\"value\" ngx-datatable-cell-template>\r\n              {{ value }}\r\n            </ng-template>\r\n          </ngx-datatable-column>\r\n          <ngx-datatable-column name=\"id\">\r\n            <ng-template ngx-datatable-header-template>Edit</ng-template>\r\n            <ng-template let-row=\"row\" ngx-datatable-cell-template>\r\n              <button\r\n                mat-raised-button\r\n                color=\"primary\"\r\n                (click)=\"editCompany(row._key)\"\r\n              >\r\n                Edit <mat-icon>edit</mat-icon>\r\n              </button>\r\n            </ng-template>\r\n          </ngx-datatable-column>\r\n        </ngx-datatable>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { TagManagementComponent } from '../tag-management/tag-management.component';\r\nimport { CompaniesComponent } from './companies/companies.component';\r\nimport { CompanyManagementComponent } from './company-management.component';\r\nimport { EditCompanyComponent } from './edit-company/edit-company.component';\r\nimport { NewCompanyComponent } from './new-company/new-company.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: CompanyManagementComponent,\r\n    children: [\r\n      {\r\n        path: 'companies',\r\n        component: CompaniesComponent\r\n      },\r\n      {\r\n        path: 'new',\r\n        component: NewCompanyComponent\r\n      },\r\n      {\r\n        path: 'edit/:id',\r\n        component: EditCompanyComponent,\r\n        pathMatch: 'full'\r\n      },\r\n      { path: '', redirectTo: '', pathMatch: 'full' },\r\n      { path: '**', redirectTo: '', pathMatch: 'full' },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class CompanyManagementRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { CompanyManagementRoutingModule } from './company-management-routing.module';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { NewCompanyComponent } from './new-company/new-company.component';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { SnackbarService } from 'src/app/shared/service/snackbar.service';\r\nimport { CompaniesComponent } from './companies/companies.component';\r\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { EditCompanyComponent } from './edit-company/edit-company.component';\r\n\r\n@NgModule({\r\n  declarations: [NewCompanyComponent, CompaniesComponent, EditCompanyComponent],\r\n  imports: [\r\n    CommonModule,\r\n    CompanyManagementRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatSnackBarModule,\r\n    MatIconModule,\r\n    NgxDatatableModule,\r\n  ],\r\n  providers: [SnackbarService],\r\n  entryComponents: [NewCompanyComponent],\r\n})\r\nexport class CompanyManagementModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { CompanyInterface } from 'src/app/shared/models/company.interface';\r\nimport { CompanyService } from 'src/app/shared/service/companies.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CompanyManagementService {\r\n  constructor(private companyService: CompanyService) {}\r\n\r\n  addCompany(company: CompanyInterface): Observable<CompanyInterface> {\r\n    return this.companyService.add(company);\r\n  }\r\n\r\n  getAllCompanies(): Observable<CompanyInterface[]> {\r\n    return this.companyService.getAllCompanies();\r\n  }\r\n\r\n  getOneCompany(company: CompanyInterface): Observable<CompanyInterface> {\r\n    return this.companyService.getOneCompany(company);\r\n  }\r\n\r\n  updateOneCompany(company: CompanyInterface): Observable<CompanyInterface> {\r\n    return this.companyService.updateOneCompany(company);\r\n  }\r\n\r\n  deleteOneCompany(company: CompanyInterface) {\r\n    return this.companyService.deleteOneCompany(company);\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CompanyInterface } from 'src/app/shared/models/company.interface';\r\nimport { CompanyService } from 'src/app/shared/service/companies.service';\r\nimport { SnackbarService } from 'src/app/shared/service/snackbar.service';\r\nimport { CompanyManagementService } from '../company-management.service';\r\n\r\n@Component({\r\n  selector: 'app-edit-company',\r\n  templateUrl: './edit-company.component.html',\r\n  styleUrls: ['./edit-company.component.scss']\r\n})\r\nexport class EditCompanyComponent implements OnInit {\r\n\r\n  companyFG: FormGroup;\r\n  company: CompanyInterface;\r\n\r\n  constructor(private route: ActivatedRoute, private companyManagementService: CompanyManagementService, private snackService: SnackbarService, private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n\r\n    //Create new formgroup\r\n    this.companyFG = new FormGroup({\r\n      name: new FormControl('', Validators.required),\r\n    })\r\n\r\n    //Get the current company to edit\r\n    if (this.route.snapshot.params.id) {\r\n      this.companyManagementService.getOneCompany(this.route.snapshot.params.id).subscribe(x => {\r\n        this.company = x;\r\n        this.companyFG.patchValue(x);\r\n      });\r\n    } else {\r\n      // this.user = this.authService.currentUserSubject.value as any;\r\n    }\r\n  }\r\n\r\n  //Update one company\r\n  //Checks to see if edits were made\r\n  //If edits were made updates current company with new updated fields\r\n  updateOneCompany($event: any) {\r\n    this.companyFG.markAllAsTouched();\r\n    if (this.companyFG.valid) {\r\n      this.company = {...this.company, ...this.companyFG.value};\r\n      this.companyManagementService.updateOneCompany(this.company).subscribe(x => {\r\n        this.snackService.info('Successfully updated company.');\r\n      }, (err) => {\r\n        this.snackService.info(`Error updating company: ${err.statusText}`);\r\n      });\r\n    }\r\n  }\r\n\r\n  deleteOneCompany() {\r\n      this.companyManagementService.deleteOneCompany(this.company).subscribe(x => {\r\n        this.snackService.info('Successfully deleted company.');\r\n        this.router.navigate(['/company-management/companies']);\r\n      }, (err) => {\r\n        this.snackService.info(`Error deleting company: ${err.statusText}`);\r\n      });\r\n  }\r\n\r\n  back() {\r\n    this.router.navigate(['/company-management/companies']);\r\n  }\r\n\r\n}\r\n","<div class=\"row\">\r\n  <div class=\"col-xl-6\">\r\n    <div class=\"card card-custom example example-compact gutter-b\">\r\n      <div class=\"card-header\">\r\n        <div class=\"card-title\">\r\n          <h3 class=\"card-label\">Edit Company</h3>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <form\r\n          class=\"example-container\"\r\n          [formGroup]=\"companyFG\"\r\n          (submit)=\"updateOneCompany($event)\"\r\n        >\r\n          <div class=\"row\">\r\n            {{ companyFG.value | json }}\r\n            <div class=\"col-md-12\">\r\n              <mat-form-field>\r\n                <input\r\n                  matInput\r\n                  formControlName=\"name\"\r\n                  placeholder=\"Company Name\"\r\n                />\r\n                <mat-error *ngIf=\"companyFG.get('name').errors?.required\"\r\n                  >Company Name is required.\r\n                </mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-6\">\r\n              <button\r\n                class=\"save-button\"\r\n                mat-raised-button\r\n                color=\"primary\"\r\n                type=\"submit\"\r\n              >\r\n                Save\r\n              </button>\r\n            </div>\r\n            <div class=\"col-md-6\">\r\n              <button\r\n                class=\"back-button\"\r\n                mat-raised-button\r\n                color=\"secondary\"\r\n                (click)=\"back()\"\r\n              >\r\n                Back\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <a class=\"delete\" (click)=\"deleteOneCompany()\">Delete</a>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"col-xl-6\">\r\n    <div class=\"card card-custom example example-compact gutter-b\">\r\n      <div class=\"card-header\">\r\n        <div class=\"card-title\">\r\n          <h3 class=\"card-label\">Add Stats</h3>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <form\r\n          class=\"example-container\"\r\n          [formGroup]=\"companyFG\"\r\n          (submit)=\"updateOneCompany($event)\"\r\n        >\r\n          <div class=\"row\">\r\n            {{ companyFG.value | json }}\r\n            <div class=\"col-md-12\">\r\n              <mat-form-field>\r\n                <input\r\n                  matInput\r\n                  formControlName=\"name\"\r\n                  placeholder=\"Company Name\"\r\n                />\r\n                <mat-error *ngIf=\"companyFG.get('name').errors?.required\"\r\n                  >Company Name is required.\r\n                </mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-6\">\r\n              <button\r\n                class=\"save-button\"\r\n                mat-raised-button\r\n                color=\"primary\"\r\n                type=\"submit\"\r\n              >\r\n                Save\r\n              </button>\r\n            </div>\r\n            <div class=\"col-md-6\">\r\n              <button\r\n                class=\"back-button\"\r\n                mat-raised-button\r\n                color=\"secondary\"\r\n                (click)=\"back()\"\r\n              >\r\n                Back\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <a class=\"delete\" (click)=\"deleteOneCompany()\">Delete</a>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators, FormGroupDirective } from '@angular/forms';\r\nimport { SnackbarService } from 'src/app/shared/service/snackbar.service';\r\nimport { CompanyManagementService } from '../company-management.service';\r\n\r\n@Component({\r\n  selector: 'app-new-company',\r\n  templateUrl: './new-company.component.html',\r\n  styleUrls: ['./new-company.component.scss']\r\n})\r\nexport class NewCompanyComponent implements OnInit {\r\n  @ViewChild(FormGroupDirective) formGroupDirective: FormGroupDirective;\r\n  companyFG: FormGroup;\r\n\r\n  constructor(\r\n    private companyManagementService: CompanyManagementService,\r\n    private snackService: SnackbarService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.companyFG = new FormGroup({\r\n      name: new FormControl('', Validators.required)\r\n    })\r\n  }\r\n\r\n  save(): void {\r\n    this.companyFG.markAllAsTouched();\r\n    if (this.companyFG.valid) {\r\n      this.companyManagementService.addCompany(this.companyFG.value).subscribe(x => {\r\n        this.snackService.info('Successfully added a new company.');\r\n        this.companyFG.reset();\r\n        this.formGroupDirective.resetForm();\r\n      }, (err) => {\r\n        this.snackService.info(err.error);\r\n      });\r\n    }\r\n  }\r\n}\r\n","<div class=\"row\">\r\n    <div class=\"col-xl-6\">\r\n        <div class=\"card card-custom example example-compact gutter-b\">\r\n            <div class=\"card-header\">\r\n                <div class=\"card-title\">\r\n                    <h3 class=\"card-label\">Create New Company</h3>\r\n                </div>\r\n            </div>\r\n            <div class=\"card-body\">\r\n                <form class=\"example-container\" [formGroup]=\"companyFG\" (submit)=\"save()\">\r\n                    <div class=\"row\">\r\n                        {{companyFG.value | json}}\r\n                        <div class=\"col-md-12\">\r\n                            <mat-form-field>\r\n                                <input matInput formControlName=\"name\" placeholder=\"Company Name\" />\r\n                                <mat-error *ngIf=\"companyFG.get('name').errors?.required\">Company Name is required.\r\n                                </mat-error>\r\n                            </mat-form-field>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-12\">\r\n                            <button class=\"save-button\" mat-raised-button color=\"primary\" type=\"submit\">Save</button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>"]}