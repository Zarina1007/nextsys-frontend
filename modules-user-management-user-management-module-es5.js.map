{"version":3,"sources":["webpack:///node_modules/ng-validate-equal/__ivy_ngcc__/fesm2015/ng-validate-equal.js","webpack:///src/app/modules/tag-management/tag-management.service.ts","webpack:///src/app/modules/user-management/admins/admins.component.ts","webpack:///src/app/modules/user-management/admins/admins.component.html","webpack:///src/app/modules/user-management/advertisers/advertisers.component.ts","webpack:///src/app/modules/user-management/advertisers/advertisers.component.html","webpack:///src/app/modules/user-management/edit-users/add-company/add-company.component.ts","webpack:///src/app/modules/user-management/edit-users/add-company/add-company.component.html","webpack:///src/app/modules/user-management/edit-users/add-tag/add-tag.component.ts","webpack:///src/app/modules/user-management/edit-users/add-tag/add-tag.component.html","webpack:///src/app/modules/user-management/edit-users/edit-users.component.html","webpack:///src/app/modules/user-management/edit-users/edit-users.component.ts","webpack:///src/app/modules/user-management/edit-users/user-password-reset/user-password-reset.component.ts","webpack:///src/app/modules/user-management/edit-users/user-password-reset/user-password-reset.component.html","webpack:///src/app/modules/user-management/new-admin/new-admin.component.ts","webpack:///src/app/modules/user-management/new-admin/new-admin.component.html","webpack:///src/app/modules/user-management/new-advertiser/new-advertiser.component.ts","webpack:///src/app/modules/user-management/new-advertiser/new-advertiser.component.html","webpack:///src/app/modules/user-management/new-superadmin/new-superadmin.component.ts","webpack:///src/app/modules/user-management/new-superadmin/new-superadmin.component.html","webpack:///src/app/modules/user-management/new-user/new-user.component.ts","webpack:///src/app/modules/user-management/new-user/new-user.component.html","webpack:///src/app/modules/user-management/roles/permission/permission.component.ts","webpack:///src/app/modules/user-management/roles/permission/permission.component.html","webpack:///src/app/modules/user-management/roles/roles.component.ts","webpack:///src/app/modules/user-management/roles/roles.component.html","webpack:///src/app/modules/user-management/superadmins/superadmins.component.ts","webpack:///src/app/modules/user-management/superadmins/superadmins.component.html","webpack:///src/app/modules/user-management/user-management-routing.module.ts","webpack:///src/app/modules/user-management/user-management.component.ts","webpack:///src/app/modules/user-management/user-management.component.html","webpack:///src/app/modules/user-management/user-management.module.ts","webpack:///src/app/modules/user-management/user-management.service.ts","webpack:///src/app/modules/user-management/users/users.component.ts","webpack:///src/app/modules/user-management/users/users.component.html","webpack:///src/app/shared/service/helper.service.ts"],"names":["ValidateEqualDirective_1","ValidateEqualDirective","otherControl","valueChangesSub","unsubscribe","selfControl","selfControlValue","value","root","get","valueChanges","subscribe","otherControlValue","isEqual","touched","dirty","setErrors","notEqual","hasError","errors","Object","keys","length","val1","val2","unifyEmptyStrings","val","isDefined","defaultUndefined","ɵfac","ValidateEqualDirective_Factory","t","ɵdir","type","selectors","features","provide","useExisting","multi","ctorParameters","String","decorators","args","ValidateEqualModule","ɵmod","ɵinj","factory","ValidateEqualModule_Factory","imports","selector","providers","ngJitMode","declarations","exports","TagManagementService","tagsService","getChrome","getFirefox","tag","add","getAllTags","companyKey","getCompanyTags","tagKey","deleteTag","getOneTag","updateOneTag","template","addTemplate","getAllTemplates","templateKey","deleteTemplate","getOneTemplate","providedIn","AdminsComponent","usersServie","cdr","router","route","userService","_snackBarService","notification","displayedColumns","admins","hidden","subscritions","localStorageCompany","getSelectedCompanyFromLocalStorage","showError","push","getAdminAll","data","console","log","filter","userData","companies","includes","detectChanges","userId","navigateByUrl","id","window","confirm","deleteUser","res","info","templateUrl","styleUrls","AdvertisersComponent","advertisers","getAdvertiserAll","AddCompanyComponent","companyService","dialogRef","loadingIndicator","user","userCompanies","getAllCompanies","response","allCompanies","close","save","AddTagComponent","tagManagementService","userTags","tagsId","allTags","handleSubmit","EditUsersComponent","userManagementService","authService","sS","modalService","tagService","snackBarService","dialog","userProfileFG","fullname","required","email","role","snapshot","params","getUserData","currentUserSubject","getUser","toPromise","getUserCompanies","getUserTags","patchValue","$event","valid","updateUser","x","modalRef","open","size","componentInstance","_key","result","then","c","tagdialog","height","width","afterClosed","openPasswordResetDialog","updateUserProfile","openAddTagDialog","openAddCompanyDialog","UserPasswordResetComponent","activeModal","fb","passwordFG","group","password","passwordConfirm","validator","passwordConfirming","markAllAsTouched","resetPassword","NewAdminComponent","companySelected","cPassword","MatchPassword","addNewUser","error","NewAdvertiserComponent","NewSuperadminComponent","NewUserComponent","PermissionComponent","snackService","allChecked","isIndeterminate","notifications","protectedMedia","googleMaterial","dashboard","eCommerce","liveTraffic","ngBootstrap","layoutBuilder","userManage","companyManage","tagManage","reportManage","i","getOnePermission","permission","permissionFG","ob","checked","updateOnePermission","err","statusText","onIndeterminateChange","onChkChange","onChildChkChange","ELEMENT_DATA","position","name","RolesComponent","dataSource","roleKey","SuperadminsComponent","superadmins","getSuperAdminAll","routes","path","component","children","pathMatch","redirectTo","UserManagementRoutingModule","forChild","UserManagementComponent","UserManagementModule","forRoot","entryComponents","UserManagementService","usersService","getAll","addUser","UsersComponent","users","getPublisherAll","showWarning","HelperService","invalid"],"mappings":"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","file":"modules-user-management-user-management-module-es5.js","sourcesContent":["import { __decorate, __param } from 'tslib';\r\nimport { Attribute, Directive, forwardRef, NgModule } from '@angular/core';\r\nimport { NG_VALIDATORS } from '@angular/forms';\r\n\r\nimport * as ɵngcc0 from '@angular/core';\nvar ValidateEqualDirective_1;\r\nlet ValidateEqualDirective = ValidateEqualDirective_1 = class ValidateEqualDirective {\r\n    constructor(otherControl) {\r\n        this.otherControl = otherControl;\r\n    }\r\n    ngOnDestroy() {\r\n        if (this.valueChangesSub) {\r\n            this.valueChangesSub.unsubscribe();\r\n        }\r\n    }\r\n    validate(selfControl) {\r\n        const selfControlValue = selfControl.value;\r\n        const otherControl = selfControl.root.get(this.otherControl);\r\n        if (this.valueChangesSub) {\r\n            this.valueChangesSub.unsubscribe();\r\n        }\r\n        // this code works when user types in other control putting the error in self control\r\n        this.valueChangesSub = otherControl.valueChanges.subscribe(otherControlValue => {\r\n            if (!this.isEqual(selfControlValue, otherControlValue) && (selfControl.touched || selfControl.dirty)) {\r\n                selfControl.setErrors({\r\n                    notEqual: true\r\n                });\r\n            }\r\n            else {\r\n                if (selfControl.hasError('notEqual')) {\r\n                    delete selfControl.errors['notEqual'];\r\n                    if (!Object.keys(selfControl.errors).length) {\r\n                        selfControl.setErrors(null);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        // this code works when the user types in self control putting the error in self control\r\n        if (!this.isEqual(selfControlValue, otherControl.value) && (selfControl.touched || selfControl.dirty)) {\r\n            return {\r\n                notEqual: true\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n    isEqual(val1, val2) {\r\n        val1 = this.unifyEmptyStrings(val1);\r\n        val2 = this.unifyEmptyStrings(val2);\r\n        return val1 === val2;\r\n    }\r\n    unifyEmptyStrings(val) {\r\n        const isDefined = this.isDefined;\r\n        if (val === null || !isDefined(val)) {\r\n            val = '';\r\n        }\r\n        return val;\r\n    }\r\n    isDefined(value) {\r\n        const defaultUndefined = void (0);\r\n        return value !== defaultUndefined;\r\n    }\r\n};\nValidateEqualDirective.ɵfac = function ValidateEqualDirective_Factory(t) { return new (t || ValidateEqualDirective)(ɵngcc0.ɵɵinjectAttribute('ngValidateEqual')); };\nValidateEqualDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ValidateEqualDirective, selectors: [[\"\", \"ngValidateEqual\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: NG_VALIDATORS, useExisting: forwardRef(() => ValidateEqualDirective_1), multi: true }\n        ])] });\r\nValidateEqualDirective.ctorParameters = () => [\r\n    { type: String, decorators: [{ type: Attribute, args: ['ngValidateEqual',] }] }\r\n];\r\nValidateEqualDirective = ValidateEqualDirective_1 = __decorate([ __param(0, Attribute('ngValidateEqual'))\r\n], ValidateEqualDirective);\r\n\r\nlet ValidateEqualModule = class ValidateEqualModule {\r\n};\nValidateEqualModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ValidateEqualModule });\nValidateEqualModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ValidateEqualModule_Factory(t) { return new (t || ValidateEqualModule)(); }, imports: [[]] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ValidateEqualDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[ngValidateEqual]',\n                providers: [\n                    { provide: NG_VALIDATORS, useExisting: forwardRef(() => ValidateEqualDirective_1), multi: true }\n                ]\n            }]\n    }], function () { return [{ type: String, decorators: [{\n                type: Attribute,\n                args: ['ngValidateEqual']\n            }] }]; }, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ValidateEqualModule, { declarations: [ValidateEqualDirective], exports: [ValidateEqualDirective] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ValidateEqualModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [ValidateEqualDirective],\n                imports: [],\n                exports: [ValidateEqualDirective]\n            }]\n    }], null, null); })();\r\n\r\n/*\r\n * Public API Surface of ng-validate-equal\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { ValidateEqualDirective, ValidateEqualModule };\r\n\r\n\n//# sourceMappingURL=ng-validate-equal.js.map","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { TagsService } from './../../shared/service/tags.service';\r\nimport { TagInterface } from './../../shared/models/tag.interface';\r\nimport { TemplateInterface } from './../../shared/models/template.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TagManagementService {\r\n\r\n  constructor(\r\n    private tagsService: TagsService,\r\n  ) { }\r\n\r\n  // Get all Chrome objects\r\n  getChromeBrowserVersion() {\r\n    return this.tagsService.getChrome();\r\n  }\r\n  // Get all Chrome objects\r\n  getFirefoxBrowserVersion() {\r\n    return this.tagsService.getFirefox();\r\n  }\r\n  addTag(tag: TagInterface): Observable<TagInterface> {\r\n    return this.tagsService.add(tag);\r\n  }\r\n  getAllTags(): Observable<TagInterface[]> {\r\n    return this.tagsService.getAllTags();\r\n  }\r\n  getCompanyTags(companyKey: any) {\r\n    return this.tagsService.getCompanyTags(companyKey);\r\n  }\r\n  \r\n  deleteTag(tagKey: any) {\r\n    return this.tagsService.deleteTag(tagKey);\r\n  }\r\n\r\n  getOneTag(tag: TagInterface): Observable<TagInterface> {\r\n    return this.tagsService.getOneTag(tag);\r\n  }\r\n  updateOneTag(tag: TagInterface): Observable<TagInterface> {\r\n    return this.tagsService.updateOneTag(tag);\r\n  }\r\n  addTemplate(template: TemplateInterface): Observable<TemplateInterface> {\r\n    return this.tagsService.addTemplate(template);\r\n  }\r\n  getAllTemplates(): Observable<TagInterface[]> {\r\n    return this.tagsService.getAllTemplates();\r\n  }\r\n  deleteTemplate(templateKey: any) {\r\n    return this.tagsService.deleteTemplate(templateKey);\r\n  }\r\n  getOneTemplate(template: TemplateInterface): Observable<TemplateInterface> {\r\n    return this.tagsService.getOneTemplate(template);\r\n  }\r\n}\r\n","import { Router, ActivatedRoute } from '@angular/router';\nimport { Component, OnInit, ChangeDetectorRef } from '@angular/core';\nimport { UsersService } from '../../../shared/service/users.service'\nimport { Subscription } from 'rxjs';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { UserInterface } from './../../../shared/models/user.interface';\nimport { SnackbarService } from 'src/app/shared/service/snackbar.service';\nimport { NotificationService } from 'src/app/shared/service/notification.service';\n\n@Component({\n  selector: 'app-admins',\n  templateUrl: './admins.component.html',\n  styleUrls: ['./admins.component.scss']\n})\nexport class AdminsComponent implements OnInit {\n  displayedColumns = [\"fullname\", \"email\", \"stat\", \"action\"];\n  admins = new MatTableDataSource<UserInterface>();\n  hidden = false;\n  //Local Storage Company\n  localStorageCompany: any;\n\n  private subscritions: Subscription[] = [];\n  constructor(\n    private usersServie: UsersService,\n    private cdr: ChangeDetectorRef,\n    private router: Router,\n    private route: ActivatedRoute,\n    private userService: UsersService,\n    private _snackBarService: SnackbarService,\n    private notification: NotificationService\n  ) { }\n\n  ngOnInit(): void {\n    this.localStorageCompany = this.getSelectedCompanyFromLocalStorage();\n    //access page part\n    if(!this.localStorageCompany){\n      this.hidden = true;\n      this.notification.showError(\"Please select your Company!\", \"\")\n    } else {\n      this.hidden = false;\n    }\n    this.subscritions.push(\n      this.usersServie.getAdminAll().subscribe(data => {\n        console.log(data);\n        if(this.localStorageCompany) {\n          this.admins.data = data.filter(userData => userData.companies.includes(this.localStorageCompany));\n        } else {\n          this.admins.data = data.filter(userData => userData.companies.length == 0);\n        }\n        this.cdr.detectChanges();\n      })\n    );\n  }\n  handleEditClick(userId: string): void {\n    this.router.navigateByUrl('/user-management/edit/' + userId);\n  }\n\n  //Gets the Selected Company from Local Storage\n  getSelectedCompanyFromLocalStorage() {\n    return this.userService.getSelectedCompanyFromLocalStorage();\n  }\n  handleAddProfile() {\n    this.router.navigateByUrl('/user-management/new-admin');\n  }\n  deleteAdmin(id: any) {\n    if(window.confirm('Do you want to go ahead?')) {\n      this.usersServie.deleteUser(id).subscribe((res) => {\n        this.usersServie.getAdminAll().subscribe(data => {\n          console.log(data);\n          if(this.localStorageCompany) {\n            this.admins.data = data.filter(userData => userData.companies.includes(this.localStorageCompany));\n          } else {\n            this.admins.data = data.filter(userData => userData.companies.length == 0);\n          }\n          this.cdr.detectChanges();\n        })\n        this._snackBarService.info('Deleted a User');\n      })\n    } \n  }\n}\n","<div class=\"row\" *ngIf=\"!hidden\">\n    <div class=\"col-xl-12\">\n        <div class=\"card card-custom example example-compact gutter-b\">\n            <div class=\"card-header\">\n            <div class=\"card-title\">\n                <h3 class=\"card-label\">Admins</h3>\n            </div>\n            </div>\n            <div class=\"card-body\">\n                <div class=\"pb-3\">\n                    <button type=\"button\" class=\"btn btn-sm btn-primary\" (click)=\"handleAddProfile()\">\n                        Add Admin\n                    </button>\n                </div>\n                <div class=\"example-container mat-elevation-z8\">\n                    <mat-table #table [dataSource]=\"admins\">\n                        <ng-container matColumnDef=\"fullname\">\n                            <mat-header-cell *matHeaderCellDef> Full Name </mat-header-cell>\n                            <mat-cell *matCellDef=\"let element\"> {{element.fullname}} </mat-cell>\n                        </ng-container>\n                        <ng-container matColumnDef=\"email\">\n                            <mat-header-cell *matHeaderCellDef> Email </mat-header-cell>\n                            <mat-cell *matCellDef=\"let element\"> {{element.email}} </mat-cell>\n                        </ng-container>\n                        <ng-container matColumnDef=\"stat\">\n                            <mat-header-cell *matHeaderCellDef> Stat# </mat-header-cell>\n                            <mat-cell *matCellDef=\"let element\"> {{element.tags.length}} </mat-cell>\n                        </ng-container>\n                        <ng-container matColumnDef=\"action\">\n                            <mat-header-cell *matHeaderCellDef> Action </mat-header-cell>\n                            <mat-cell *matCellDef=\"let element\">\n                            <a title=\"Edit Admin\" class=\"btn btn-icon btn-light btn-hover-primary btn-sm mx-3\" (click)=\"handleEditClick(element._key)\">\n                                <span [inlineSVG]=\"'./assets/media/svg/icons/Communication/Write.svg'\" cacheSVG=\"true\"\n                                class=\"svg-icon svg-icon-md svg-icon-primary\">\n                                </span>\n                            </a>\n                            \n                            <a title=\"Delete Admin\" class=\"btn btn-icon btn-light btn-hover-danger btn-sm\" (click)=\"deleteAdmin(element._key)\">\n                              <span [inlineSVG]=\"'./assets/media/svg/icons/General/Trash.svg'\" cacheSVG=\"false\"\n                                class=\"svg-icon svg-icon-md svg-icon-danger\">\n                              </span>\n                            </a>\n                            </mat-cell>\n                        </ng-container>\n            \n                        <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n                        <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n                    </mat-table>\n                    <div *ngIf=\"admins.data.length === 0\">\n                        <p style=\"text-align: center;padding: 10px;\">No records found</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<div\n*ngIf=\"hidden\"\n  class=\"error error-3 d-flex flex-row-fluid bgi-size-cover bgi-position-center\"\n  style=\"background-image: url('./assets/media/error/bg3.jpg'); height: 100%;zoom: 1;\n  display: block;\n  min-height: 80vh;\n  font-size: 14px;\n  line-height: 1.4;\n  color: #0e1724;\"\n>\n  <!--begin::Content-->\n  <div\n    class=\"px-10 px-md-30 py-10 py-md-0 d-flex flex-column justify-content-md-center\"\n  >\n    <p class=\"display-4 font-weight-boldest text-white mb-12\">\n      How did you get here\n    </p>\n    <p class=\"font-size-h1 font-weight-boldest text-dark-75\">\n      Sorry you can't access the page you're looking for.\n    </p>\n    <p class=\"font-size-h4 line-height-md\">\n      There may be a misspelling in the URL entered,<br />or the page you are\n      looking for may no longer exist.\n    </p>\n  </div>\n  <!--end::Content-->\n</div>\n<!-- end:: Error -->","import { Router, ActivatedRoute } from '@angular/router';\nimport { Component, OnInit, ChangeDetectorRef } from '@angular/core';\nimport { UsersService } from '../../../shared/service/users.service'\nimport { Subscription } from 'rxjs';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { UserInterface } from './../../../shared/models/user.interface';\nimport { SnackbarService } from 'src/app/shared/service/snackbar.service';\nimport { NotificationService } from 'src/app/shared/service/notification.service';\n\n@Component({\n  selector: 'app-advertisers',\n  templateUrl: './advertisers.component.html',\n  styleUrls: ['./advertisers.component.scss']\n})\nexport class AdvertisersComponent implements OnInit {\n  displayedColumns = [\"fullname\", \"email\", \"stat\", \"action\"];\n  advertisers = new MatTableDataSource<UserInterface>();\n  hidden = false;\n  //Local Storage Company\n  localStorageCompany: any;\n\n  private subscritions: Subscription[] = [];\n  constructor(\n    private usersServie: UsersService,\n    private cdr: ChangeDetectorRef,\n    private router: Router,\n    private route: ActivatedRoute,\n    private userService: UsersService,\n    private _snackBarService: SnackbarService,\n    private notification: NotificationService,\n  ) { }\n\n  ngOnInit(): void {\n    this.localStorageCompany = this.getSelectedCompanyFromLocalStorage();\n    //access page part\n    if(!this.localStorageCompany){\n      this.hidden = true;\n      this.notification.showError(\"Please select your Company!\", \"\")\n    } else {\n      this.hidden = false;\n    }\n    this.subscritions.push(\n      this.usersServie.getAdvertiserAll().subscribe(data => {\n        console.log(data);\n        if(this.localStorageCompany) {\n          this.advertisers.data = data.filter(userData => userData.companies.includes(this.localStorageCompany));\n        } else {\n          this.advertisers.data = data.filter(userData => userData.companies.length == 0);\n        }\n        \n        this.cdr.detectChanges();\n      })\n    );\n  }\n  handleEditClick(userId: string): void {\n    this.router.navigateByUrl('/user-management/edit/' + userId);\n  }\n  //Gets the Selected Company from Local Storage\n  getSelectedCompanyFromLocalStorage() {\n    return this.userService.getSelectedCompanyFromLocalStorage();\n  }\n  handleAddProfile() {\n    this.router.navigateByUrl('/user-management/new-advertiser');\n  }\n  deleteAdvertiser(id: any) {\n    if(window.confirm('Do you want to go ahead?')) {\n      this.usersServie.deleteUser(id).subscribe((res) => {\n        this.usersServie.getAdvertiserAll().subscribe(data => {\n          console.log(data);\n          if(this.localStorageCompany) {\n            this.advertisers.data = data.filter(userData => userData.companies.includes(this.localStorageCompany));\n          } else {\n            this.advertisers.data = data.filter(userData => userData.companies.length == 0);\n          }\n          this.cdr.detectChanges();\n        })\n        this._snackBarService.info('Deleted a User');\n      })\n    } \n  }\n}\n","<div class=\"row\" *ngIf=\"!hidden\">\n    <div class=\"col-xl-12\">\n      <div class=\"card card-custom example example-compact gutter-b\">\n        <div class=\"card-header\">\n          <div class=\"card-title\">\n            <h3 class=\"card-label\">Advertiser Users</h3>\n          </div>\n        </div>\n        <div class=\"card-body\">\n            <div class=\"pb-3\">\n                <button type=\"button\" class=\"btn btn-sm btn-primary\" (click)=\"handleAddProfile()\">\n                    Add Advertiser\n                </button>\n            </div>\n            <div class=\"example-container mat-elevation-z8\">\n                <mat-table #table [dataSource]=\"advertisers\">\n                    <ng-container matColumnDef=\"fullname\">\n                        <mat-header-cell *matHeaderCellDef> Full Name </mat-header-cell>\n                        <mat-cell *matCellDef=\"let element\"> {{element.fullname}} </mat-cell>\n                    </ng-container>\n                    <ng-container matColumnDef=\"email\">\n                        <mat-header-cell *matHeaderCellDef> Email </mat-header-cell>\n                        <mat-cell *matCellDef=\"let element\"> {{element.email}} </mat-cell>\n                    </ng-container>\n                    <ng-container matColumnDef=\"stat\">\n                        <mat-header-cell *matHeaderCellDef> Stat# </mat-header-cell>\n                        <mat-cell *matCellDef=\"let element\"> {{element.tags.length}} </mat-cell>\n                    </ng-container>\n                    <ng-container matColumnDef=\"action\">\n                        <mat-header-cell *matHeaderCellDef> Action </mat-header-cell>\n                        <mat-cell *matCellDef=\"let element\">\n                          <a title=\"Edit Advertiser\" class=\"btn btn-icon btn-light btn-hover-primary btn-sm mx-3\" (click)=\"handleEditClick(element._key)\">\n                            <span [inlineSVG]=\"'./assets/media/svg/icons/Communication/Write.svg'\" cacheSVG=\"true\"\n                            class=\"svg-icon svg-icon-md svg-icon-primary\">\n                            </span>\n                          </a>\n                          \n                          <a title=\"Delete Advertiser\" class=\"btn btn-icon btn-light btn-hover-danger btn-sm\" (click)=\"deleteAdvertiser(element._key)\">\n                            <span [inlineSVG]=\"'./assets/media/svg/icons/General/Trash.svg'\" cacheSVG=\"false\"\n                              class=\"svg-icon svg-icon-md svg-icon-danger\">\n                            </span>\n                          </a>\n                        \n                        </mat-cell>\n                    </ng-container>\n    \n                    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n                    <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n                </mat-table>\n                <div *ngIf=\"advertisers.data.length === 0\">\n                    <p style=\"text-align: center;padding: 10px;\">No records found</p>\n                </div>\n            </div>\n        </div>\n    </div>\n    </div>\n</div>\n<div\n*ngIf=\"hidden\"\n  class=\"error error-3 d-flex flex-row-fluid bgi-size-cover bgi-position-center\"\n  style=\"background-image: url('./assets/media/error/bg3.jpg'); height: 100%;zoom: 1;\n  display: block;\n  min-height: 80vh;\n  font-size: 14px;\n  line-height: 1.4;\n  color: #0e1724;\"\n>\n  <!--begin::Content-->\n  <div\n    class=\"px-10 px-md-30 py-10 py-md-0 d-flex flex-column justify-content-md-center\"\n  >\n    <p class=\"display-4 font-weight-boldest text-white mb-12\">\n      How did you get here\n    </p>\n    <p class=\"font-size-h1 font-weight-boldest text-dark-75\">\n      Sorry you can't access the page you're looking for.\n    </p>\n    <p class=\"font-size-h4 line-height-md\">\n      There may be a misspelling in the URL entered,<br />or the page you are\n      looking for may no longer exist.\n    </p>\n  </div>\n  <!--end::Content-->\n</div>\n<!-- end:: Error -->\n","import { ChangeDetectorRef, Inject } from '@angular/core';\r\nimport { Component, OnInit, Input } from '@angular/core';\r\nimport { CompanyService } from 'src/app/shared/service/companies.service';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { UserInterface } from 'src/app/shared/models/user.interface';\r\n\r\n@Component({\r\n  selector: 'app-add-company',\r\n  templateUrl: './add-company.component.html',\r\n  styleUrls: ['./add-company.component.scss'],\r\n})\r\nexport class AddCompanyComponent implements OnInit {\r\n  //Variable for loading indicator\r\n  loadingIndicator = true;\r\n\r\n  //Variable for current user\r\n  user: UserInterface;\r\n\r\n  //Variable for current companies saved on user account\r\n  userCompanies: string[];\r\n\r\n  //Variable for ALL Companies avaiablable\r\n  allCompanies: any;\r\n\r\n  constructor(\r\n    private companyService: CompanyService,\r\n    private cdr: ChangeDetectorRef,\r\n    public dialogRef: MatDialogRef<AddCompanyComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    //Sets current user to data input variable\r\n    this.user = this.data;\r\n\r\n    //Sets userCompanies to user's current companies\r\n    this.userCompanies = this.user.companies;\r\n\r\n    //Gets ALL companies available\r\n    this.getAllCompanies();\r\n  }\r\n\r\n  /**\r\n   * getAllCompanies()\r\n   * * Gets all companies available from companyService method.\r\n   * * @param NONE\r\n   */\r\n  getAllCompanies() {\r\n    this.companyService.getAllCompanies().subscribe((response) => {\r\n      console.log(response);\r\n      this.loadingIndicator = false;\r\n      this.allCompanies = response;\r\n      this.cdr.detectChanges();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * save()\r\n   * * Saves added or removed companies to the user's profile\r\n   * TODO: TBD\r\n   * @param NONE\r\n   */\r\n  save() {\r\n    this.user.companies = [...this.userCompanies];\r\n    this.dialogRef.close({ user: this.user });\r\n  }\r\n\r\n  /**\r\n   * close()\r\n   * * Closes the dialog and does not make any changes.\r\n   *\r\n   */\r\n  close() {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","<mat-dialog-content class=\"mat-typography\">\r\n  <div class=\"row\">\r\n    <!-- STARTING UPDATE PROFILE-->\r\n    <div class=\"col-xl-12\">\r\n      <div class=\"card card-custom example example-compact gutter-b\">\r\n        <div class=\"card-header\">\r\n          <div class=\"card-title\">\r\n            <h3 class=\"card-label\">Add or Remove Companies</h3>\r\n          </div>\r\n        </div>\r\n        <div class=\"card-body\">\r\n          <div class=\"row\">\r\n            <div class=\"col-xl-12\">\r\n              <mat-selection-list\r\n                color=\"primary\"\r\n                #company\r\n                [(ngModel)]=\"userCompanies\"\r\n              >\r\n                <mat-list-option\r\n                  *ngFor=\"let company of allCompanies\"\r\n                  [value]=\"company._id\"\r\n                >\r\n                  {{ company.name }}\r\n                </mat-list-option>\r\n              </mat-selection-list>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</mat-dialog-content>\r\n<div class=\"row buttons\">\r\n  <div class=\"col-md-6\">\r\n    <button\r\n      class=\"save-button\"\r\n      mat-raised-button\r\n      color=\"secondary\"\r\n      (click)=\"close()\"\r\n    >\r\n      Cancel\r\n    </button>\r\n  </div>\r\n  <div class=\"col-md-6\">\r\n    <button\r\n      class=\"back-button\"\r\n      mat-raised-button\r\n      color=\"primary\"\r\n      (click)=\"save()\"\r\n    >\r\n      Save\r\n    </button>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit, ChangeDetectorRef, Inject } from '@angular/core';\r\nimport { TagManagementService } from '../../../tag-management/tag-management.service';\r\nimport { UserInterface } from 'src/app/shared/models/user.interface';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-add-tag',\r\n  templateUrl: './add-tag.component.html',\r\n  styleUrls: ['./add-tag.component.scss']\r\n})\r\nexport class AddTagComponent implements OnInit {\r\n  //Variable for loading indicator\r\n  loadingIndicator = true;\r\n\r\n  //Variable for current user\r\n  user: UserInterface;\r\n\r\n  userTags: string[];\r\n\r\n  allTags: any;\r\n\r\n  constructor(\r\n    private tagManagementService: TagManagementService,\r\n    private cdr: ChangeDetectorRef,\r\n    public dialogRef: MatDialogRef<AddTagComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    //Sets current user to data input variable\r\n    this.user = this.data;\r\n\r\n    //Sets userTags to user's current tags\r\n    this.userTags = this.user.tagsId;\r\n\r\n    //Gets ALL companies available\r\n    this.getAllTags();\r\n  }\r\n\r\n  getAllTags() {\r\n    this.tagManagementService.getAllTags().subscribe((response) => {\r\n      console.log(response);\r\n      this.loadingIndicator = false;\r\n      this.allTags = response;\r\n      this.cdr.detectChanges();\r\n    });\r\n  }\r\n  handleSubmit(): void {\r\n    this.user.tagsId = [...this.userTags]\r\n    this.dialogRef.close({ user: this.user });\r\n  }\r\n\r\n  /**\r\n   * close()\r\n   * * Closes the dialog and does not make any changes.\r\n   *\r\n   */\r\n   close() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n","<mat-dialog-content class=\"mat-typography\">\r\n    <div class=\"row\">\r\n      <!-- STARTING UPDATE Tag-->\r\n      <div class=\"col-xl-12\">\r\n        <div class=\"card card-custom example example-compact gutter-b\">\r\n          <div class=\"card-header\">\r\n            <div class=\"card-title\">\r\n              <h3 class=\"card-label\">Add or Remove Tags</h3>\r\n            </div>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div class=\"row\">\r\n              <div class=\"col-xl-12\">\r\n                <mat-selection-list\r\n                  color=\"primary\"\r\n                  #tag\r\n                  [(ngModel)]=\"userTags\"\r\n                >\r\n                  <mat-list-option\r\n                    *ngFor=\"let tag of allTags\"\r\n                    [value]=\"tag._id\"\r\n                  >\r\n                    {{ tag.name }}\r\n                  </mat-list-option>\r\n                </mat-selection-list>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </mat-dialog-content>\r\n  <div class=\"row buttons\">\r\n    <div class=\"col-md-6\">\r\n      <button\r\n        class=\"save-button\"\r\n        mat-raised-button\r\n        color=\"secondary\"\r\n        (click)=\"close()\"\r\n      >\r\n        Cancel\r\n      </button>\r\n    </div>\r\n    <div class=\"col-md-6\">\r\n      <button\r\n        class=\"back-button\"\r\n        mat-raised-button\r\n        color=\"primary\"\r\n        (click)=\"handleSubmit()\"\r\n      >\r\n        Save\r\n      </button>\r\n    </div>\r\n  </div>\r\n  ","<div class=\"row\">\r\n  <!-- STARTING UPDATE PROFILE-->\r\n  <div class=\"col-xl-6\">\r\n    <div class=\"card card-custom example example-compact gutter-b\">\r\n      <div class=\"card-header\">\r\n        <div class=\"card-title\">\r\n          <h3 class=\"card-label\">Update Profile</h3>\r\n          <button\r\n            mat-button\r\n            color=\"primary\"\r\n            type=\"button\"\r\n            (click)=\"openPasswordResetDialog()\"\r\n          >\r\n            Reset Password\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <form\r\n          class=\"example-container\"\r\n          [formGroup]=\"userProfileFG\"\r\n          (submit)=\"updateUserProfile($event)\"\r\n        >\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n              <mat-form-field>\r\n                <input\r\n                  matInput\r\n                  formControlName=\"fullname\"\r\n                  placeholder=\"Full Name\"\r\n                />\r\n                <mat-error\r\n                  *ngIf=\"userProfileFG.get('fullname').errors?.required\"\r\n                  >Name is required</mat-error\r\n                >\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n              <mat-form-field>\r\n                <input matInput formControlName=\"email\" placeholder=\"Email\" />\r\n                <mat-error *ngIf=\"userProfileFG.get('email').errors?.email\"\r\n                  >Email is not valid</mat-error\r\n                >\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n              <mat-form-field>\r\n                <mat-select formControlName=\"role\" placeholder=\"Role\">\r\n                  <mat-option [value]=\"1\">Super Admin</mat-option>\r\n                  <mat-option [value]=\"2\">Admin</mat-option>              \r\n                  <mat-option [value]=\"3\">Publisher</mat-option>\r\n                  <mat-option [value]=\"4\">Advertiser</mat-option>\r\n                </mat-select>\r\n                <mat-error *ngIf=\"userProfileFG.get('role').errors?.required\"\r\n                  >Role is not valid</mat-error\r\n                >\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div class=\"row updateProfile\">\r\n            <div class=\"col-md-12\">\r\n              <button mat-raised-button color=\"primary\" type=\"submit\">\r\n                Update Profile\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- STARTING UPDATING TAGS -->\r\n  <div class=\"col-xl-6\">\r\n    <div class=\"card card-custom example example-compact gutter-b\">\r\n      <div class=\"card-header\">\r\n        <div class=\"card-title\">\r\n          <h3 class=\"card-label\">Tags</h3>\r\n          <button mat-button color=\"primary\" (click)=\"openAddTagDialog()\">\r\n            Add or Remove\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <div class=\"row\">\r\n          <div class=\"col-xl-12\">\r\n            <mat-list *ngIf=\"user\" #tag>\r\n              <mat-list-item *ngFor=\"let tag of userTags\">\r\n                {{ tag.name }}\r\n                <mat-divider></mat-divider>\r\n              </mat-list-item>\r\n            </mat-list>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- STARTING UPDATE COMPANIES -->\r\n<div class=\"row\">\r\n  <div class=\"col-xl-6\">\r\n    <div class=\"card card-custom example example-compact gutter-b\">\r\n      <div class=\"card-header\">\r\n        <div class=\"card-title\">\r\n          <h3 class=\"card-label\">Companies</h3>\r\n          <button mat-button color=\"primary\" (click)=\"openAddCompanyDialog()\">\r\n            Add or Remove\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <div class=\"row\">\r\n          <div class=\"col-xl-12\">\r\n            <mat-list *ngIf=\"user\" #company>\r\n              <mat-list-item *ngFor=\"let company of userCompanies\">\r\n                {{ company.name }}\r\n                <mat-divider></mat-divider>\r\n              </mat-list-item>\r\n            </mat-list>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { ActivatedRoute } from '@angular/router';\r\nimport { TagInterface } from './../../../shared/models/tag.interface';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { AuthService } from '../../auth/_services/auth.service';\r\nimport { UserManagementService } from '../user-management.service';\r\nimport { UserInterface } from 'src/app/shared/models/user.interface';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { UserPasswordResetComponent } from './user-password-reset/user-password-reset.component';\r\nimport { SnackbarService } from 'src/app/shared/service/snackbar.service';\r\nimport { AddTagComponent } from './add-tag/add-tag.component';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { CompanyInterface } from 'src/app/shared/models/company.interface';\r\nimport { AddCompanyComponent } from './add-company/add-company.component';\r\nimport { CompanyService } from 'src/app/shared/service/companies.service';\r\nimport { TagsService } from 'src/app/shared/service/tags.service';\r\n\r\nimport {\r\n  MatDialog,\r\n  MatDialogRef,\r\n  MAT_DIALOG_DATA,\r\n} from '@angular/material/dialog';\r\nimport { toJSDate } from '@ng-bootstrap/ng-bootstrap/datepicker/ngb-calendar';\r\n\r\n@Component({\r\n  selector: 'app-edit-users',\r\n  templateUrl: './edit-users.component.html',\r\n  styleUrls: ['./edit-users.component.scss'],\r\n})\r\nexport class EditUsersComponent implements OnInit {\r\n  userProfileFG: FormGroup;\r\n  rows: Array<CompanyInterface>;\r\n\r\n  //All User Data\r\n  user: UserInterface;\r\n\r\n  //All User Data\r\n  userCompanies: Array<CompanyInterface>;\r\n\r\n  userTags: any;\r\n\r\n  constructor(\r\n    private userManagementService: UserManagementService,\r\n    private authService: AuthService,\r\n    private route: ActivatedRoute,\r\n    private sS: SnackbarService,\r\n    private modalService: NgbModal,\r\n    private companyService: CompanyService,\r\n    private tagService: TagsService,\r\n    private snackBarService: SnackbarService,\r\n    public dialog: MatDialog\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.userProfileFG = new FormGroup({\r\n      fullname: new FormControl('', Validators.required),\r\n      email: new FormControl('', [Validators.required, Validators.email]),\r\n      role: new FormControl('', Validators.required),\r\n    });\r\n\r\n    if (this.route.snapshot.params.id) {\r\n      this.getUserData(this.route.snapshot.params.id);\r\n      // await this.getUserCompanies(this.user.companies);\r\n    } else {\r\n      this.user = this.authService.currentUserSubject.value as any;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * getUserData(id)\r\n   * @param id: User _key value\r\n   */\r\n  async getUserData(id: string) {\r\n    //Pulls the specific USER from the database.\r\n    this.user = await this.userManagementService.getUser(id).toPromise();\r\n    //If user has companies on their account\r\n    if (this.user.companies.length) {\r\n      this.userCompanies = await this.companyService\r\n        .getUserCompanies(this.user.companies)\r\n        .toPromise();\r\n    }\r\n    \r\n    if (this.user.tagsId) {\r\n      this.userTags = await this.tagService\r\n        .getUserTags(this.user.tagsId)\r\n        .toPromise();\r\n    }\r\n\r\n    //Patches value into FormGroup\r\n    this.userProfileFG.patchValue(this.user);\r\n  }\r\n\r\n  updateUserProfile($event: any): void {\r\n    if (this.userProfileFG.valid) {\r\n      this.user = { ...this.user, ...this.userProfileFG.value };\r\n      this.userManagementService.updateUser(this.user).subscribe((x) => {\r\n        this.sS.info('user profile updated');\r\n      });\r\n    }\r\n  }\r\n\r\n  openPasswordResetDialog() {\r\n    const modalRef = this.modalService.open(UserPasswordResetComponent, {\r\n      size: 'md',\r\n    });\r\n    modalRef.componentInstance.data = {\r\n      id: this.user._key,\r\n    };\r\n    modalRef.result.then((c) => {});\r\n  }\r\n\r\n  openAddTagDialog() {\r\n    let tagdialog = this.dialog\r\n      .open(AddTagComponent, {\r\n        height: 'auto',\r\n        width: '600px',\r\n        data: this.user,\r\n      })\r\n      .afterClosed()\r\n      .subscribe((response) => {\r\n        //If user hits save\r\n        if (response) {\r\n          // console.log(response);\r\n          //New variable readability -- all user data\r\n          this.user = response.user;\r\n          //Updates current user with new company selection.\r\n          this.userManagementService.updateUser(this.user).subscribe((x) => {\r\n            //\r\n            this.getUserData(this.user._key);\r\n            this.snackBarService.info(\r\n              `Updated  ${this.user.fullname}'s tags.`\r\n            );\r\n          });\r\n        }\r\n      });\r\n  }\r\n\r\n  //Add/Edit Companies to a user profile\r\n  openAddCompanyDialog() {\r\n    console.log(this.user);\r\n    let dialogRef = this.dialog\r\n      .open(AddCompanyComponent, {\r\n        height: 'auto',\r\n        width: '600px',\r\n        data: this.user,\r\n      })\r\n      .afterClosed()\r\n      .subscribe((response) => {\r\n        //If user hits save\r\n        if (response) {\r\n          console.log(response);\r\n          //New variable readability -- all user data\r\n          this.user = response.user;\r\n\r\n          //Updates current user with new company selection.\r\n          this.userManagementService.updateUser(this.user).subscribe((x) => {\r\n            //\r\n            this.getUserData(this.user._key);\r\n            this.snackBarService.info(\r\n              `Updated  ${this.user.fullname}'s companies.`\r\n            );\r\n          });\r\n        }\r\n      });\r\n\r\n    // dialogRef.afterClosed().subscribe((result) => {\r\n    //   console.log(`Dialog result: ${result}`);\r\n    // });\r\n\r\n    // console.log(this.user);\r\n    // const initialState = { data: this.user };\r\n    // const modalRef = this.modalService.open(AddCompanyComponent, {\r\n    //   size: 'md',\r\n    // });\r\n    // modalRef.componentInstance.companies = [...this.user.companies];\r\n\r\n    // modalRef.result.then((res) => {\r\n    //   //If a result is passed back, update the user profile with new companies.\r\n    //   if (res) {\r\n    //     this.user.companies = [...res];\r\n    //     this.userManagementService.updateUser(this.user).subscribe((x) => {\r\n    //       this.getUserData(this.user._key);\r\n    //       this.snackBarService.info(\r\n    //         `Updated  ${this.user.fullname}'s companies.`\r\n    //       );\r\n    //     });\r\n    //   }\r\n    // });\r\n  }\r\n\r\n  // isEnabled(tagKey: string): boolean {\r\n  //   if (this.user && Array.isArray(this.user.tags)) {\r\n  //     return !!this.user.tags.filter(x => !!x).find(x => x._key === tagKey);\r\n  //   } else {\r\n  //     return false;\r\n  //   }\r\n  // }\r\n\r\n  // handleTagClick(tagKey: string): void {\r\n  //   this.user.tags = this.user.tags || [];\r\n  //   let tag = this.user.tags.filter(x => !!x).find(x => x._key === tagKey);\r\n  //   if (tag) {\r\n  //     this.user.tags.splice(this.user.tags.indexOf(tag), 1);\r\n  //   } else {\r\n  //     this.user.tags.push(tag);\r\n  //   }\r\n  //   this.userManagementService.updateUser(this.user).subscribe();\r\n  // }\r\n}\r\n","import { Component, Inject, Input, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { HelperService } from 'src/app/shared/service/helper.service';\r\nimport { SnackbarService } from 'src/app/shared/service/snackbar.service';\r\nimport { UserManagementService } from '../../user-management.service';\r\n\r\n@Component({\r\n  selector: 'app-user-password-reset',\r\n  templateUrl: './user-password-reset.component.html',\r\n  styleUrls: ['./user-password-reset.component.scss']\r\n})\r\nexport class UserPasswordResetComponent implements OnInit {\r\n  passwordFG: FormGroup;\r\n  @Input() data: any;\r\n\r\n  constructor(\r\n    public activeModal: NgbActiveModal,\r\n    private userManagementService: UserManagementService,\r\n    private fb: FormBuilder,\r\n    private sS: SnackbarService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.passwordFG = this.fb.group({\r\n      password: new FormControl('', Validators.required),\r\n      passwordConfirm: new FormControl('', Validators.required)\r\n    }, { validator: HelperService.passwordConfirming })\r\n  }\r\n\r\n  handleSubmit(): void {\r\n    this.passwordFG.markAllAsTouched();\r\n    if (this.passwordFG.valid) {\r\n      var password = this.passwordFG.value.password;\r\n      var id = this.data.id;\r\n      this.userManagementService.resetPassword(id, password).subscribe(x => {\r\n        this.sS.info('password has been reset');\r\n        this.activeModal.close();\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"modal-header\">\r\n    <h4 class=\"modal-title\">Update Profile</h4>\r\n    <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"activeModal.dismiss('Cross click')\">\r\n        <span aria-hidden=\"true\">&times;</span>\r\n    </button>\r\n</div>\r\n<div class=\"modal-body\">\r\n    <form class=\"example-container\" [formGroup]=\"passwordFG\">\r\n        <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n                <mat-form-field>\r\n                    <input type=\"password\" matInput formControlName=\"password\" placeholder=\"Password\" />\r\n                    <mat-error *ngIf=\"passwordFG.get('password').errors?.required\">Password is required</mat-error>\r\n                </mat-form-field>\r\n            </div>\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n                <mat-form-field>\r\n                    <input type=\"password\" matInput formControlName=\"passwordConfirm\" placeholder=\"Confirm Password\" />\r\n                    <mat-error *ngIf=\"passwordFG.get('passwordConfirm').errors?.required\">Confirm password is required\r\n                    </mat-error>\r\n                    <mat-error *ngIf=\"passwordFG.errors?.invalid\">Password is not match</mat-error>\r\n                </mat-form-field>\r\n            </div>\r\n        </div>\r\n    </form>\r\n</div>\r\n<div class=\"modal-footer\">\r\n    <button type=\"button\" class=\"btn btn-secondary\" (click)=\"activeModal.close()\">Close</button>\r\n    <button type=\"button\" class=\"btn btn-primary\"  (click)=\"handleSubmit()\">Reset Password</button>\r\n    <!-- <button type=\"button\" class=\"btn btn-outline-dark\" (click)=\"activeModal.close('Close click')\">Close</button> -->\r\n</div>\r\n\r\n\r\n<!-- <h1 mat-dialog-title>Reset Password</h1>\r\n<div mat-dialog-content>\r\n\r\n</div>\r\n<div mat-dialog-actions>\r\n    <button mat-button (click)=\"dialogRef.close()\">Close</button>\r\n    <button mat-raised-button color=\"primary\" (click)=\"handleSubmit()\" cdkFocusInitial>Reset Password</button>\r\n</div> -->","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { UserManagementService } from '../user-management.service';\nimport { UserInterface } from 'src/app/shared/models/user.interface';\nimport { SnackbarService } from 'src/app/shared/service/snackbar.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { AuthService } from '../../auth/_services/auth.service';\nimport { ConfirmPasswordValidator } from 'src/app/modules/auth/registration/confirm-password.validator';\nimport { UsersService } from 'src/app/shared/service/users.service';\nimport { NotificationService } from 'src/app/shared/service/notification.service';\n\n@Component({\n  selector: 'app-new-admin',\n  templateUrl: './new-admin.component.html',\n  styleUrls: ['./new-admin.component.scss']\n})\nexport class NewAdminComponent implements OnInit {\n  userProfileFG: FormGroup;\n  //All User Data\n  user: UserInterface;\n  companySelected: any;\n  hidden = false;\n  constructor(\n    private userManagementService: UserManagementService,\n    private authService: AuthService,\n    private route: ActivatedRoute,\n    private sS: SnackbarService,\n    private fb: FormBuilder,\n    private userService: UsersService,\n    private notification: NotificationService,\n  ) { }\n\n  ngOnInit(): void {\n    this.companySelected = this.getSelectedCompanyFromLocalStorage();\n    //access page part\n    if(!this.companySelected){\n      this.hidden = true;\n      this.notification.showError(\"Please select your Company!\", \"\")\n    } else {\n      this.hidden = false;\n    }\n    this.userProfileFG = this.fb.group(\n      {\n        fullname: new FormControl('', Validators.required),\n        email: new FormControl('', [Validators.required, Validators.email]),\n        password: new FormControl('', Validators.required),\n        cPassword: new FormControl('', Validators.required),\n        role: new FormControl(''),\n        companies: new FormControl(''),\n      },\n      {\n        validator: ConfirmPasswordValidator.MatchPassword,\n      }\n    );\n  }\n  newUserProfile($event: any): void {\n    this.userProfileFG.patchValue({\n      role: 2,\n      companies: [this.companySelected]\n    })\n    this.user = { ...this.user, ...this.userProfileFG.value }\n    if (this.userProfileFG.valid) {\n      if (this.companySelected) {\n        this.user = { ...this.user, ...this.userProfileFG.value };\n        this.userManagementService.addNewUser(this.user).subscribe((x) => {\n          this.sS.info('New Admin profile created');\n        });\n      } else {\n        this.sS.error('No Company, You can not create User!.');\n      }\n      \n    }\n  }\n  //Gets the Selected Company from Local Storage\n  getSelectedCompanyFromLocalStorage() {\n    return this.userService.getSelectedCompanyFromLocalStorage();\n  }\n}\n","<div class=\"row\" *ngIf=\"!hidden\">\n    <!-- STARTING UPDATE PROFILE-->\n    <div class=\"col-xl-6\">\n      <div class=\"card card-custom example example-compact gutter-b\">\n        <div class=\"card-header\">\n          <div class=\"card-title\">\n            <h3 class=\"card-label\">New Admin Profile</h3>\n          </div>\n        </div>\n        <div class=\"card-body\">\n          <form\n            class=\"example-container\"\n            [formGroup]=\"userProfileFG\"\n            (submit)=\"newUserProfile($event)\"\n          >\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <mat-form-field>\n                  <input\n                    matInput\n                    formControlName=\"fullname\"\n                    placeholder=\"Full Name\"\n                  />\n                  <mat-error\n                    *ngIf=\"userProfileFG.get('fullname').errors?.required\"\n                    >Name is required</mat-error\n                  >\n                </mat-form-field>\n              </div>\n            </div>\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <mat-form-field>\n                  <input matInput formControlName=\"email\" placeholder=\"Email\" />\n                  <mat-error *ngIf=\"userProfileFG.get('email').errors?.email\"\n                    >Email is not valid</mat-error\n                  >\n                </mat-form-field>\n              </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                  <mat-form-field>\n                    <input\n                      matInput\n                      formControlName=\"password\"\n                      placeholder=\"Password\"\n                      type=\"password\"\n                      autocomplete=\"off\"\n                    />\n                    <mat-error\n                      *ngIf=\"userProfileFG.get('password').errors?.required\"\n                      >Password is required</mat-error\n                    >\n                  </mat-form-field>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                  <mat-form-field>\n                    <input\n                      matInput\n                      formControlName=\"cPassword\"\n                      placeholder=\"Confirm Passsword\"\n                      type=\"password\"\n                      autocomplete=\"off\"\n                    />\n                    <mat-error\n                      *ngIf=\"userProfileFG.get('cPassword').errors?.required\"\n                      >Confirm Password is required</mat-error\n                    >\n                    <mat-error\n                      *ngIf=\"userProfileFG.controls['cPassword'].errors && userProfileFG.controls['cPassword'].errors.ConfirmPassword\"\n                      >'Passsword' and 'Confirm Password' didn't match.</mat-error\n                    >\n                  </mat-form-field>\n                </div>\n            </div>\n            <div class=\"row pt-2\">\n              <div class=\"col-md-12\">\n                <button mat-raised-button color=\"primary\" type=\"submit\">\n                  Create Profile\n                </button>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n</div>\n<div\n*ngIf=\"hidden\"\n  class=\"error error-3 d-flex flex-row-fluid bgi-size-cover bgi-position-center\"\n  style=\"background-image: url('./assets/media/error/bg3.jpg'); height: 100%;zoom: 1;\n  display: block;\n  min-height: 80vh;\n  font-size: 14px;\n  line-height: 1.4;\n  color: #0e1724;\"\n>\n  <!--begin::Content-->\n  <div\n    class=\"px-10 px-md-30 py-10 py-md-0 d-flex flex-column justify-content-md-center\"\n  >\n    <p class=\"display-4 font-weight-boldest text-white mb-12\">\n      How did you get here\n    </p>\n    <p class=\"font-size-h1 font-weight-boldest text-dark-75\">\n      Sorry you can't access the page you're looking for.\n    </p>\n    <p class=\"font-size-h4 line-height-md\">\n      There may be a misspelling in the URL entered,<br />or the page you are\n      looking for may no longer exist.\n    </p>\n  </div>\n  <!--end::Content-->\n</div>\n<!-- end:: Error -->\n  ","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { UserManagementService } from '../user-management.service';\nimport { UserInterface } from 'src/app/shared/models/user.interface';\nimport { SnackbarService } from 'src/app/shared/service/snackbar.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { AuthService } from '../../auth/_services/auth.service';\nimport { ConfirmPasswordValidator } from 'src/app/modules/auth/registration/confirm-password.validator';\nimport { UsersService } from 'src/app/shared/service/users.service';\nimport { NotificationService } from 'src/app/shared/service/notification.service';\n\n@Component({\n  selector: 'app-new-advertiser',\n  templateUrl: './new-advertiser.component.html',\n  styleUrls: ['./new-advertiser.component.scss']\n})\nexport class NewAdvertiserComponent implements OnInit {\n  userProfileFG: FormGroup;\n  //All User Data\n  user: UserInterface;\n  companySelected: any;\n  hidden = false;\n\n  constructor(\n    private userManagementService: UserManagementService,\n    private authService: AuthService,\n    private route: ActivatedRoute,\n    private sS: SnackbarService,\n    private fb: FormBuilder,\n    private userService: UsersService,\n    private notification: NotificationService,\n  ) { }\n\n  ngOnInit(): void {\n    this.companySelected = this.getSelectedCompanyFromLocalStorage();\n    //access page part\n    if(!this.companySelected){\n      this.hidden = true;\n      this.notification.showError(\"Please select your Company!\", \"\")\n    } else {\n      this.hidden = false;\n    }\n    this.userProfileFG = this.fb.group(\n      {\n        fullname: new FormControl('', Validators.required),\n        email: new FormControl('', [Validators.required, Validators.email]),\n        password: new FormControl('', Validators.required),\n        cPassword: new FormControl('', Validators.required),\n        role: new FormControl(''),\n        companies: new FormControl(''),\n      },\n      {\n        validator: ConfirmPasswordValidator.MatchPassword,\n      }\n    );\n  }\n  newUserProfile($event: any): void {\n    this.userProfileFG.patchValue({\n      role: 4,\n      companies: [this.companySelected]\n    })\n    this.user = { ...this.user, ...this.userProfileFG.value }\n    if (this.userProfileFG.valid) {\n      if (this.companySelected) {\n        this.user = { ...this.user, ...this.userProfileFG.value };\n        this.userManagementService.addNewUser(this.user).subscribe((x) => {\n          this.sS.info('New Advertiser profile created');\n        });\n      }\n      else {\n        this.sS.error('No Company, You can not create User!.');\n      }\n    }\n  }\n  //Gets the Selected Company from Local Storage\n  getSelectedCompanyFromLocalStorage() {\n    return this.userService.getSelectedCompanyFromLocalStorage();\n  }\n\n}\n","<div class=\"row\" *ngIf=\"!hidden\">\n    <!-- STARTING UPDATE PROFILE-->\n    <div class=\"col-xl-6\">\n      <div class=\"card card-custom example example-compact gutter-b\">\n        <div class=\"card-header\">\n          <div class=\"card-title\">\n            <h3 class=\"card-label\">New Advertiser Profile</h3>\n          </div>\n        </div>\n        <div class=\"card-body\">\n          <form\n            class=\"example-container\"\n            [formGroup]=\"userProfileFG\"\n            (submit)=\"newUserProfile($event)\"\n          >\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <mat-form-field>\n                  <input\n                    matInput\n                    formControlName=\"fullname\"\n                    placeholder=\"Full Name\"\n                  />\n                  <mat-error\n                    *ngIf=\"userProfileFG.get('fullname').errors?.required\"\n                    >Name is required</mat-error\n                  >\n                </mat-form-field>\n              </div>\n            </div>\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <mat-form-field>\n                  <input matInput formControlName=\"email\" placeholder=\"Email\" />\n                  <mat-error *ngIf=\"userProfileFG.get('email').errors?.email\"\n                    >Email is not valid</mat-error\n                  >\n                </mat-form-field>\n              </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                  <mat-form-field>\n                    <input\n                      matInput\n                      formControlName=\"password\"\n                      placeholder=\"Password\"\n                      type=\"password\"\n                      autocomplete=\"off\"\n                    />\n                    <mat-error\n                      *ngIf=\"userProfileFG.get('password').errors?.required\"\n                      >Password is required</mat-error\n                    >\n                  </mat-form-field>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                  <mat-form-field>\n                    <input\n                      matInput\n                      formControlName=\"cPassword\"\n                      placeholder=\"Confirm Passsword\"\n                      type=\"password\"\n                      autocomplete=\"off\"\n                    />\n                    <mat-error\n                      *ngIf=\"userProfileFG.get('cPassword').errors?.required\"\n                      >Confirm Password is required</mat-error\n                    >\n                    <mat-error\n                      *ngIf=\"userProfileFG.controls['cPassword'].errors && userProfileFG.controls['cPassword'].errors.ConfirmPassword\"\n                      >'Passsword' and 'Confirm Password' didn't match.</mat-error\n                    >\n                  </mat-form-field>\n                </div>\n            </div>\n            <div class=\"row pt-2\">\n              <div class=\"col-md-12\">\n                <button mat-raised-button color=\"primary\" type=\"submit\">\n                  Create Profile\n                </button>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n</div>\n<div\n*ngIf=\"hidden\"\n  class=\"error error-3 d-flex flex-row-fluid bgi-size-cover bgi-position-center\"\n  style=\"background-image: url('./assets/media/error/bg3.jpg'); height: 100%;zoom: 1;\n  display: block;\n  min-height: 80vh;\n  font-size: 14px;\n  line-height: 1.4;\n  color: #0e1724;\"\n>\n  <!--begin::Content-->\n  <div\n    class=\"px-10 px-md-30 py-10 py-md-0 d-flex flex-column justify-content-md-center\"\n  >\n    <p class=\"display-4 font-weight-boldest text-white mb-12\">\n      How did you get here\n    </p>\n    <p class=\"font-size-h1 font-weight-boldest text-dark-75\">\n      Sorry you can't access the page you're looking for.\n    </p>\n    <p class=\"font-size-h4 line-height-md\">\n      There may be a misspelling in the URL entered,<br />or the page you are\n      looking for may no longer exist.\n    </p>\n  </div>\n  <!--end::Content-->\n</div>\n<!-- end:: Error -->","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { UserManagementService } from '../user-management.service';\nimport { UserInterface } from 'src/app/shared/models/user.interface';\nimport { SnackbarService } from 'src/app/shared/service/snackbar.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { AuthService } from '../../auth/_services/auth.service';\nimport { ConfirmPasswordValidator } from 'src/app/modules/auth/registration/confirm-password.validator';\nimport { UsersService } from 'src/app/shared/service/users.service';\nimport { NotificationService } from 'src/app/shared/service/notification.service';\n\n@Component({\n  selector: 'app-new-superadmin',\n  templateUrl: './new-superadmin.component.html',\n  styleUrls: ['./new-superadmin.component.scss']\n})\nexport class NewSuperadminComponent implements OnInit {\n  userProfileFG: FormGroup;\n  //All User Data\n  user: UserInterface;\n  companySelected: any;\n  hidden = false;\n\n  constructor(\n    private userManagementService: UserManagementService,\n    private authService: AuthService,\n    private route: ActivatedRoute,\n    private sS: SnackbarService,\n    private fb: FormBuilder,\n    private userService: UsersService,\n    private notification: NotificationService,\n  ) { }\n\n  ngOnInit(): void {\n    this.companySelected = this.getSelectedCompanyFromLocalStorage();\n    //access page part\n    if(!this.companySelected){\n      this.hidden = true;\n      this.notification.showError(\"Please select your Company!\", \"\")\n    } else {\n      this.hidden = false;\n    }\n    this.userProfileFG = this.fb.group(\n      {\n        fullname: new FormControl('', Validators.required),\n        email: new FormControl('', [Validators.required, Validators.email]),\n        password: new FormControl('', Validators.required),\n        cPassword: new FormControl('', Validators.required),\n        role: new FormControl(''),\n        companies: new FormControl(''),\n      },\n      {\n        validator: ConfirmPasswordValidator.MatchPassword,\n      }\n    );\n  }\n  newUserProfile($event: any): void {\n    this.userProfileFG.patchValue({\n      role: 1,\n      companies: [this.companySelected]\n    })\n    this.user = { ...this.user, ...this.userProfileFG.value }\n    if (this.userProfileFG.valid) {\n      if(this.companySelected) {\n        this.user = { ...this.user, ...this.userProfileFG.value };\n        this.userManagementService.addNewUser(this.user).subscribe((x) => {\n          this.sS.info('New Super Admin profile created');\n        });\n      } else {\n        this.sS.error('No Company, You can not create User!.');\n      }\n      \n    }\n  }\n  //Gets the Selected Company from Local Storage\n  getSelectedCompanyFromLocalStorage() {\n    return this.userService.getSelectedCompanyFromLocalStorage();\n  }\n\n}\n","<div class=\"row\" *ngIf=\"!hidden\">\n    <!-- STARTING UPDATE PROFILE-->\n    <div class=\"col-xl-6\">\n      <div class=\"card card-custom example example-compact gutter-b\">\n        <div class=\"card-header\">\n          <div class=\"card-title\">\n            <h3 class=\"card-label\">Super Admin Profile</h3>\n          </div>\n        </div>\n        <div class=\"card-body\">\n          <form\n            class=\"example-container\"\n            [formGroup]=\"userProfileFG\"\n            (submit)=\"newUserProfile($event)\"\n          >\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <mat-form-field>\n                  <input\n                    matInput\n                    formControlName=\"fullname\"\n                    placeholder=\"Full Name\"\n                  />\n                  <mat-error\n                    *ngIf=\"userProfileFG.get('fullname').errors?.required\"\n                    >Name is required</mat-error\n                  >\n                </mat-form-field>\n              </div>\n            </div>\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <mat-form-field>\n                  <input matInput formControlName=\"email\" placeholder=\"Email\" />\n                  <mat-error *ngIf=\"userProfileFG.get('email').errors?.email\"\n                    >Email is not valid</mat-error\n                  >\n                </mat-form-field>\n              </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                  <mat-form-field>\n                    <input\n                      matInput\n                      formControlName=\"password\"\n                      placeholder=\"Password\"\n                      type=\"password\"\n                      autocomplete=\"off\"\n                    />\n                    <mat-error\n                      *ngIf=\"userProfileFG.get('password').errors?.required\"\n                      >Password is required</mat-error\n                    >\n                  </mat-form-field>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                  <mat-form-field>\n                    <input\n                      matInput\n                      formControlName=\"cPassword\"\n                      placeholder=\"Confirm Passsword\"\n                      type=\"password\"\n                      autocomplete=\"off\"\n                    />\n                    <mat-error\n                      *ngIf=\"userProfileFG.get('cPassword').errors?.required\"\n                      >Confirm Password is required</mat-error\n                    >\n                    <mat-error\n                      *ngIf=\"userProfileFG.controls['cPassword'].errors && userProfileFG.controls['cPassword'].errors.ConfirmPassword\"\n                      >'Passsword' and 'Confirm Password' didn't match.</mat-error\n                    >\n                  </mat-form-field>\n                </div>\n            </div>\n            <div class=\"row pt-2\">\n              <div class=\"col-md-12\">\n                <button mat-raised-button color=\"primary\" type=\"submit\">\n                  Create Profile\n                </button>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n</div>\n<div\n*ngIf=\"hidden\"\n  class=\"error error-3 d-flex flex-row-fluid bgi-size-cover bgi-position-center\"\n  style=\"background-image: url('./assets/media/error/bg3.jpg'); height: 100%;zoom: 1;\n  display: block;\n  min-height: 80vh;\n  font-size: 14px;\n  line-height: 1.4;\n  color: #0e1724;\"\n>\n  <!--begin::Content-->\n  <div\n    class=\"px-10 px-md-30 py-10 py-md-0 d-flex flex-column justify-content-md-center\"\n  >\n    <p class=\"display-4 font-weight-boldest text-white mb-12\">\n      How did you get here\n    </p>\n    <p class=\"font-size-h1 font-weight-boldest text-dark-75\">\n      Sorry you can't access the page you're looking for.\n    </p>\n    <p class=\"font-size-h4 line-height-md\">\n      There may be a misspelling in the URL entered,<br />or the page you are\n      looking for may no longer exist.\n    </p>\n  </div>\n  <!--end::Content-->\n</div>\n<!-- end:: Error -->\n  ","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { UserManagementService } from '../user-management.service';\nimport { UserInterface } from 'src/app/shared/models/user.interface';\nimport { SnackbarService } from 'src/app/shared/service/snackbar.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { AuthService } from '../../auth/_services/auth.service';\nimport { ConfirmPasswordValidator } from 'src/app/modules/auth/registration/confirm-password.validator';\nimport { UsersService } from 'src/app/shared/service/users.service';\nimport { NotificationService } from 'src/app/shared/service/notification.service';\n\n@Component({\n  selector: 'app-new-user',\n  templateUrl: './new-user.component.html',\n  styleUrls: ['./new-user.component.scss']\n})\nexport class NewUserComponent implements OnInit {\n  userProfileFG: FormGroup;\n  //All User Data\n  user: UserInterface;\n  companySelected: any;\n  hidden = false;\n\n  constructor(\n    private userManagementService: UserManagementService,\n    private authService: AuthService,\n    private route: ActivatedRoute,\n    private sS: SnackbarService,\n    private fb: FormBuilder,\n    private userService: UsersService,\n    private notification: NotificationService,\n  ) { }\n\n  ngOnInit(): void {\n    this.companySelected = this.getSelectedCompanyFromLocalStorage();\n    //access page part\n    if(!this.companySelected){\n      this.hidden = true;\n      this.notification.showError(\"Please select your Company!\", \"\")\n    } else {\n      this.hidden = false;\n    }\n    this.userProfileFG = this.fb.group(\n      {\n        fullname: new FormControl('', Validators.required),\n        email: new FormControl('', [Validators.required, Validators.email]),\n        password: new FormControl('', Validators.required),\n        cPassword: new FormControl('', Validators.required),\n        role: new FormControl(''),\n        companies: new FormControl(''),\n      },\n      {\n        validator: ConfirmPasswordValidator.MatchPassword,\n      }\n    );\n  }\n  newUserProfile($event: any): void {\n    this.userProfileFG.patchValue({\n      role: 3,\n      companies: [this.companySelected]\n    })\n    this.user = { ...this.user, ...this.userProfileFG.value }\n    if (this.userProfileFG.valid) {\n      if (this.companySelected) {\n        this.user = { ...this.user, ...this.userProfileFG.value };\n        this.userManagementService.addNewUser(this.user).subscribe((x) => {\n          this.sS.info('New Publisher profile created');\n        });\n      } else {\n        this.sS.error('No Company, You can not create User!.');\n      }\n      \n    }\n  }\n  //Gets the Selected Company from Local Storage\n  getSelectedCompanyFromLocalStorage() {\n    return this.userService.getSelectedCompanyFromLocalStorage();\n  }\n}\n","<div class=\"row\" *ngIf=\"!hidden\">\n    <!-- STARTING UPDATE PROFILE-->\n    <div class=\"col-xl-6\">\n      <div class=\"card card-custom example example-compact gutter-b\">\n        <div class=\"card-header\">\n          <div class=\"card-title\">\n            <h3 class=\"card-label\">New Publisher Profile</h3>\n          </div>\n        </div>\n        <div class=\"card-body\">\n          <form\n            class=\"example-container\"\n            [formGroup]=\"userProfileFG\"\n            (submit)=\"newUserProfile($event)\"\n          >\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <mat-form-field>\n                  <input\n                    matInput\n                    formControlName=\"fullname\"\n                    placeholder=\"Full Name\"\n                  />\n                  <mat-error\n                    *ngIf=\"userProfileFG.get('fullname').errors?.required\"\n                    >Name is required</mat-error\n                  >\n                </mat-form-field>\n              </div>\n            </div>\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <mat-form-field>\n                  <input matInput formControlName=\"email\" placeholder=\"Email\" />\n                  <mat-error *ngIf=\"userProfileFG.get('email').errors?.email\"\n                    >Email is not valid</mat-error\n                  >\n                </mat-form-field>\n              </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                  <mat-form-field>\n                    <input\n                      matInput\n                      formControlName=\"password\"\n                      placeholder=\"Password\"\n                      type=\"password\"\n                      autocomplete=\"off\"\n                    />\n                    <mat-error\n                      *ngIf=\"userProfileFG.get('password').errors?.required\"\n                      >Password is required</mat-error\n                    >\n                  </mat-form-field>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                  <mat-form-field>\n                    <input\n                      matInput\n                      formControlName=\"cPassword\"\n                      placeholder=\"Confirm Passsword\"\n                      type=\"password\"\n                      autocomplete=\"off\"\n                    />\n                    <mat-error\n                      *ngIf=\"userProfileFG.get('cPassword').errors?.required\"\n                      >Confirm Password is required</mat-error\n                    >\n                    <mat-error\n                      *ngIf=\"userProfileFG.controls['cPassword'].errors && userProfileFG.controls['cPassword'].errors.ConfirmPassword\"\n                      >'Passsword' and 'Confirm Password' didn't match.</mat-error\n                    >\n                  </mat-form-field>\n                </div>\n            </div>\n            <div class=\"row pt-2\">\n              <div class=\"col-md-12\">\n                <button mat-raised-button color=\"primary\" type=\"submit\">\n                  Create Profile\n                </button>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n</div>\n<div\n*ngIf=\"hidden\"\n  class=\"error error-3 d-flex flex-row-fluid bgi-size-cover bgi-position-center\"\n  style=\"background-image: url('./assets/media/error/bg3.jpg'); height: 100%;zoom: 1;\n  display: block;\n  min-height: 80vh;\n  font-size: 14px;\n  line-height: 1.4;\n  color: #0e1724;\"\n>\n  <!--begin::Content-->\n  <div\n    class=\"px-10 px-md-30 py-10 py-md-0 d-flex flex-column justify-content-md-center\"\n  >\n    <p class=\"display-4 font-weight-boldest text-white mb-12\">\n      How did you get here\n    </p>\n    <p class=\"font-size-h1 font-weight-boldest text-dark-75\">\n      Sorry you can't access the page you're looking for.\n    </p>\n    <p class=\"font-size-h4 line-height-md\">\n      There may be a misspelling in the URL entered,<br />or the page you are\n      looking for may no longer exist.\n    </p>\n  </div>\n  <!--end::Content-->\n</div>\n<!-- end:: Error -->\n  ","import { Component, OnInit, Input } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { SnackbarService } from 'src/app/shared/service/snackbar.service';\r\nimport { MatCheckboxChange } from '@angular/material/checkbox';\r\nimport { PermissionInterface } from 'src/app/shared/models/permission.interface';\r\nimport { UserManagementService } from '../../user-management.service';\r\n\r\n@Component({\r\n  selector: 'app-permission',\r\n  templateUrl: './permission.component.html',\r\n  styleUrls: ['./permission.component.scss']\r\n})\r\nexport class PermissionComponent implements OnInit {\r\n  @Input() data: any;\r\n  permission: PermissionInterface\r\n  permissionFG: FormGroup;\r\n  allChecked = false;\r\n  isIndeterminate = false;\r\n  notifications = false;\r\n  protectedMedia = false;\r\n  googleMaterial = false;\r\n  dashboard = false;\r\n  eCommerce = false;\r\n  liveTraffic = false;\r\n  ngBootstrap =  false;\r\n  layoutBuilder = false;\r\n  userManage = false;\r\n  companyManage = false;\r\n  tagManage = false;\r\n  reportManage = false;\r\n  i = 0;\r\n  constructor(\r\n    public activeModal: NgbActiveModal,\r\n    private fb: FormBuilder,\r\n    private snackService: SnackbarService,\r\n    private userManagementService: UserManagementService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    //Get the current company to edit\r\n    if (this.data['id']) {\r\n      this.userManagementService.getOnePermission(this.data['id']).subscribe(x => {\r\n        this.permission = x;\r\n        this.permissionFG.patchValue(x);\r\n        if (x['companyManage'] == true && x['eCommerce'] == true && x['dashboard'] == true && x['googleMaterial'] == true && x['layoutBuilder'] == true && x['liveTraffic'] == true && x['ngBootstrap'] == true && x['notifications'] == true && x['protectedMedia'] == true && x['reportManage'] == true && x['tagManage'] == true && x['userManage'] == true) {\r\n          this.allChecked = true;\r\n          this.isIndeterminate = false;\r\n        } else {\r\n          this.allChecked = false;\r\n          this.isIndeterminate = false;\r\n        }\r\n      });\r\n    } else {}\r\n    this.permissionFG = this.fb.group({\r\n      dashboard: new FormControl('', Validators.required),\r\n      notifications: new FormControl('', Validators.required),\r\n      layoutBuilder: new FormControl('', Validators.required),\r\n      protectedMedia: new FormControl('', Validators.required),\r\n      googleMaterial: new FormControl('', Validators.required),\r\n      eCommerce: new FormControl('', Validators.required),\r\n      liveTraffic: new FormControl('', Validators.required),\r\n      ngBootstrap: new FormControl('', Validators.required),\r\n      companyManage: new FormControl('', Validators.required),\r\n      userManage: new FormControl('', Validators.required),\r\n      reportManage: new FormControl('', Validators.required),\r\n      tagManage: new FormControl('', Validators.required),\r\n    })\r\n  }\r\n  onIndeterminateChange(val: boolean) {\r\n    console.log('isIndeterminate: ' + val);\r\n  }\r\n  onChange(ob: MatCheckboxChange) {\r\n    console.log(\"checked: \" + ob.checked);\r\n  }\r\n  onChkChange(ob: MatCheckboxChange) {\r\n    if(ob.checked) {\r\n      this.userManage = true;\r\n      this.companyManage = true;\r\n      this.tagManage = true;\r\n      this.reportManage = true;\r\n      this.notifications = true;\r\n      this.protectedMedia = true;\r\n      this.googleMaterial = true;\r\n      this.dashboard = true;\r\n      this.eCommerce = true;\r\n      this.liveTraffic = true;\r\n      this.ngBootstrap =  true;\r\n      this.layoutBuilder = true;\r\n      this.i = 12;\r\n    } else {\r\n      this.userManage = false;\r\n      this.companyManage = false;\r\n      this.tagManage = false;\r\n      this.reportManage = false; \r\n      this.notifications = false;\r\n      this.protectedMedia = false;\r\n      this.googleMaterial = false;\r\n      this.dashboard = false;\r\n      this.eCommerce = false;\r\n      this.liveTraffic = false;\r\n      this.ngBootstrap =  false;\r\n      this.layoutBuilder = false;    \r\n    }\r\n }\r\n onChildChkChange(ob: MatCheckboxChange) {\r\n    if(ob.checked) {\r\n      this.i++;\r\n    } else {\r\n      this.i--;\r\n    }\r\n    if(this.i==12) {\r\n      this.allChecked = true;\r\n      this.isIndeterminate = false;\r\n    } else if (this.i >= 1 || this.i <= 11) {\r\n      this.isIndeterminate = true;\r\n      this.allChecked = false;\r\n    } else {\r\n      this.isIndeterminate = false;\r\n      this.allChecked = false;\r\n    }\r\n  }\r\n  \r\n  handleSubmit() {\r\n    this.permissionFG.markAllAsTouched();\r\n    if (this.permissionFG.valid) {     \r\n      this.permission = {...this.permission, ...this.permissionFG.value};\r\n      this.userManagementService.updateOnePermission(this.permission).subscribe(x => {\r\n        this.snackService.info('Successfully updated permission.');\r\n        this.activeModal.close(x);\r\n      }, (err) => {\r\n        this.snackService.info(`Error updating permission: ${err.statusText}`);\r\n      });\r\n    }\r\n  }\r\n}\r\n","<div class=\"modal-header\">\r\n    <h4 class=\"modal-title\">Permission</h4>\r\n    <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"activeModal.dismiss('Cross click')\">\r\n        <span aria-hidden=\"true\">&times;</span>\r\n    </button>\r\n</div>\r\n<div class=\"modal-body\">\r\n    <div class=\"row justify-content-end d-flex\">\r\n        <div class=\"select-all\">\r\n            <mat-checkbox [ngStyle]=\"{'color': '#232428'}\" class=\"example-margin\" [indeterminate]=\"isIndeterminate\" [checked]=\"allChecked\" (indeterminateChange)=\"onIndeterminateChange($event)\" (change)=\"onChkChange($event)\">Select All</mat-checkbox>\r\n        </div>\r\n    </div>\r\n    <form class=\"example-container\" [formGroup]=\"permissionFG\">\r\n        <div class=\"row\">\r\n            <div class=\"col-md-6\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-md-12\">\r\n                        <span class=\"example-list-section\">\r\n                            <mat-checkbox color=\"primary\" formControlName=\"dashboard\" class=\"example-margin\" [(ngModel)]=\"dashboard\" (change)=\"onChildChkChange($event)\">Dashboard</mat-checkbox>\r\n                        </span>\r\n                    </div>\r\n                    <div class=\"col-md-12\">\r\n                        <span class=\"example-list-section\">\r\n                            <mat-checkbox color=\"primary\" formControlName=\"layoutBuilder\" class=\"example-margin\" [(ngModel)]=\"layoutBuilder\" (change)=\"onChildChkChange($event)\">Layout Builder</mat-checkbox>\r\n                        </span>\r\n                    </div>\r\n                    <div class=\"col-md-12\">\r\n                        <span class=\"example-list-section\">\r\n                            <mat-checkbox color=\"primary\" formControlName=\"googleMaterial\" class=\"example-margin\" [(ngModel)]=\"googleMaterial\" (change)=\"onChildChkChange($event)\">Google Material</mat-checkbox>\r\n                        </span>\r\n                    </div>\r\n                    <div class=\"col-md-12\">\r\n                        <span class=\"example-list-section\">\r\n                            <mat-checkbox color=\"primary\" formControlName=\"ngBootstrap\" class=\"example-margin\" [(ngModel)]=\"ngBootstrap\" (change)=\"onChildChkChange($event)\">Ng-Bootstrap</mat-checkbox>\r\n                        </span>\r\n                    </div>\r\n                    \r\n                    <div class=\"col-md-12\">\r\n                        <span class=\"example-list-section\">\r\n                            <mat-checkbox color=\"primary\" formControlName=\"companyManage\" class=\"example-margin\" [(ngModel)]=\"companyManage\" (change)=\"onChildChkChange($event)\">Company Management</mat-checkbox>\r\n                        </span>\r\n                    </div>\r\n                    <div class=\"col-md-12\">\r\n                        <span class=\"example-list-section\">\r\n                            <mat-checkbox color=\"primary\" formControlName=\"tagManage\" class=\"example-margin\" [(ngModel)]=\"tagManage\" (change)=\"onChildChkChange($event)\">Tag Management</mat-checkbox>\r\n                        </span>\r\n                        \r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n            <div class=\"col-md-6\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-md-12\">\r\n                        <span class=\"example-list-section\">\r\n                            <mat-checkbox color=\"primary\" formControlName=\"eCommerce\" class=\"example-margin\" [(ngModel)]=\"eCommerce\" (change)=\"onChildChkChange($event)\">eCommerce</mat-checkbox>\r\n                        </span>\r\n                    </div>\r\n                    <div class=\"col-md-12\">\r\n                        <span class=\"example-list-section\">\r\n                            <mat-checkbox color=\"primary\" formControlName=\"liveTraffic\" class=\"example-margin\" [(ngModel)]=\"liveTraffic\" (change)=\"onChildChkChange($event)\">Live Traffic</mat-checkbox>\r\n                        </span>\r\n                    </div>\r\n                    <div class=\"col-md-12\">\r\n                        <span class=\"example-list-section\">\r\n                            <mat-checkbox color=\"primary\" formControlName=\"protectedMedia\" class=\"example-margin\" [(ngModel)]=\"protectedMedia\" (change)=\"onChildChkChange($event)\">Protected Media</mat-checkbox>\r\n                        </span>\r\n                        \r\n                    </div>\r\n                    <div class=\"col-md-12\">\r\n                        <span class=\"example-list-section\">\r\n                            <mat-checkbox color=\"primary\" formControlName=\"notifications\" class=\"example-margin\" [(ngModel)]=\"notifications\" (change)=\"onChildChkChange($event)\">Notifications</mat-checkbox>\r\n                        </span>\r\n                        \r\n                    </div>\r\n                    <div class=\"col-md-12\">\r\n                        <span class=\"example-list-section\">\r\n                            <mat-checkbox color=\"primary\" formControlName=\"userManage\" class=\"example-margin\" [(ngModel)]=\"userManage\" (change)=\"onChildChkChange($event)\">User Management</mat-checkbox>\r\n                        </span>\r\n                        \r\n                    </div>\r\n                    <div class=\"col-md-12\">\r\n                        <span class=\"example-list-section\">\r\n                            <mat-checkbox color=\"primary\" formControlName=\"reportManage\" class=\"example-margin\" [(ngModel)]=\"reportManage\" (change)=\"onChildChkChange($event)\">Report</mat-checkbox>\r\n                        </span>\r\n                        \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n    </form>\r\n</div>\r\n<div class=\"modal-footer\">\r\n    <button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"activeModal.close()\">Close</button>\r\n    <button type=\"button\" class=\"btn btn-sm btn-primary\"  (click)=\"handleSubmit()\">Update</button>\r\n</div>\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { PermissionComponent } from './permission/permission.component';\r\nimport { SnackbarService } from 'src/app/shared/service/snackbar.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\nexport interface PeriodicElement {\r\n  name: string;\r\n  position: number;\r\n}\r\n\r\nconst ELEMENT_DATA: PeriodicElement[] = [\r\n  { position: 1, name: \"Super Admin\" },\r\n  { position: 2, name: \"Admin\" },\r\n  { position: 3, name: \"Advertiser\" },\r\n  { position: 4, name: \"Publisher\" },\r\n];\r\n\r\n@Component({\r\n  selector: \"app-roles\",\r\n  templateUrl: \"./roles.component.html\",\r\n  styleUrls: [\"./roles.component.scss\"],\r\n})\r\nexport class RolesComponent implements OnInit {\r\n  displayedColumns: string[] = [\"position\", \"name\", \"action\"];\r\n  dataSource = ELEMENT_DATA;\r\n  constructor(\r\n    private modalService: NgbModal,\r\n    private route: ActivatedRoute,\r\n    private sS: SnackbarService,\r\n  ) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  openManagePermissionDialog(roleKey) {\r\n    const modalRef = this.modalService.open(PermissionComponent, {\r\n      size: 'md',\r\n    });\r\n    modalRef.componentInstance.data = {\r\n      id: roleKey\r\n    };\r\n    modalRef.result.then((c) => {});\r\n  }\r\n}\r\n","<table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\r\n\r\n  <!--- Note that these columns can be defined in any order.\r\n        The actual rendered columns are set as a property on the row definition\" -->\r\n\r\n  <!-- Position Column -->\r\n  <ng-container matColumnDef=\"position\">\r\n    <th mat-header-cell *matHeaderCellDef> No. </th>\r\n    <td mat-cell *matCellDef=\"let element\"> {{element.position}} </td>\r\n  </ng-container>\r\n\r\n  <!-- Name Column -->\r\n  <ng-container matColumnDef=\"name\">\r\n    <th mat-header-cell *matHeaderCellDef> Role </th>\r\n    <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\r\n  </ng-container>\r\n\r\n  <!-- Action Column -->\r\n  <ng-container matColumnDef=\"action\">\r\n    <th mat-header-cell *matHeaderCellDef> Action </th>\r\n    <td mat-cell *matCellDef=\"let element\">\r\n      <a title=\"Edit Role\" class=\"btn btn-icon btn-light btn-hover-primary btn-sm mx-3\" (click)=\"openManagePermissionDialog(element.position)\">\r\n        <span [inlineSVG]=\"'./assets/media/svg/icons/Communication/Write.svg'\" cacheSVG=\"true\"\r\n        class=\"svg-icon svg-icon-md svg-icon-primary\">\r\n        </span>\r\n      </a>\r\n    </td>\r\n  </ng-container>\r\n\r\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n</table>\r\n","import { Router, ActivatedRoute } from '@angular/router';\nimport { Component, OnInit, ChangeDetectorRef } from '@angular/core';\nimport { UsersService } from '../../../shared/service/users.service'\nimport { Subscription } from 'rxjs';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { UserInterface } from './../../../shared/models/user.interface';\nimport { NotificationService } from 'src/app/shared/service/notification.service';\n\n@Component({\n  selector: 'app-superadmins',\n  templateUrl: './superadmins.component.html',\n  styleUrls: ['./superadmins.component.scss']\n})\nexport class SuperadminsComponent implements OnInit {\n  displayedColumns = [\"fullname\", \"email\", \"stat\", \"action\"];\n  superadmins = new MatTableDataSource<UserInterface>();\n\n  //Local Storage Company\n  localStorageCompany: any;\n  hidden = false;\n  private subscritions: Subscription[] = [];\n  constructor(\n    private userService: UsersService,\n    private cdr: ChangeDetectorRef,\n    private router: Router,\n    private route: ActivatedRoute,\n    private notification: NotificationService,\n  ) { }\n\n  ngOnInit(): void {\n    this.localStorageCompany = this.getSelectedCompanyFromLocalStorage();\n    //access page part\n    if(!this.localStorageCompany){\n      this.hidden = true;\n      this.notification.showError(\"Please select your Company!\", \"\")\n    } else {\n      this.hidden = false;\n    }\n    this.subscritions.push(\n      this.userService.getSuperAdminAll().subscribe(data => {\n        if(this.localStorageCompany) {\n          this.superadmins.data = data.filter(userData => userData.companies.includes(this.localStorageCompany));\n        } else {\n          this.superadmins.data = data;\n        }\n        this.cdr.detectChanges();\n      })\n    );\n  }\n  handleEditClick(userId: string): void {\n    this.router.navigateByUrl('/user-management/edit/' + userId);\n  }\n  //Gets the Selected Company from Local Storage\n  getSelectedCompanyFromLocalStorage() {\n    return this.userService.getSelectedCompanyFromLocalStorage();\n  }\n  handleAddProfile() {\n    this.router.navigateByUrl('/user-management/new-super-admin');\n  }\n}\n","<div class=\"row\" *ngIf=\"!hidden\">\n    <div class=\"col-xl-12\">\n        <div class=\"card card-custom example example-compact gutter-b\">\n            <div class=\"card-header\">\n            <div class=\"card-title\">\n                <h3 class=\"card-label\">Super Admins</h3>\n            </div>\n            </div>\n            <div class=\"card-body\">\n                <div class=\"pb-3\">\n                    <button type=\"button\" class=\"btn btn-sm btn-primary\" (click)=\"handleAddProfile()\">\n                        Add Super Admin\n                    </button>\n                </div>\n                \n                <div class=\"example-container mat-elevation-z8\">\n                    <mat-table #table [dataSource]=\"superadmins\">\n                        <ng-container matColumnDef=\"fullname\">\n                            <mat-header-cell *matHeaderCellDef> Full Name </mat-header-cell>\n                            <mat-cell *matCellDef=\"let element\"> {{element.fullname}} </mat-cell>\n                        </ng-container>\n                        <ng-container matColumnDef=\"email\">\n                            <mat-header-cell *matHeaderCellDef> Email </mat-header-cell>\n                            <mat-cell *matCellDef=\"let element\"> {{element.email}} </mat-cell>\n                        </ng-container>\n                        <ng-container matColumnDef=\"stat\">\n                            <mat-header-cell *matHeaderCellDef> Stat# </mat-header-cell>\n                            <mat-cell *matCellDef=\"let element\"> {{element.tags.length}} </mat-cell>\n                        </ng-container>\n                        <ng-container matColumnDef=\"action\">\n                            <mat-header-cell *matHeaderCellDef> Action </mat-header-cell>\n                            <mat-cell *matCellDef=\"let element\">\n                                <a title=\"Edit Super Admin\" class=\"btn btn-icon btn-light btn-hover-primary btn-sm mx-3\" (click)=\"handleEditClick(element._key)\">\n                                    <span [inlineSVG]=\"'./assets/media/svg/icons/Communication/Write.svg'\" cacheSVG=\"true\"\n                                    class=\"svg-icon svg-icon-md svg-icon-primary\">\n                                    </span>\n                                </a>\n                            </mat-cell>\n                        </ng-container>\n            \n                        <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n                        <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n                        \n                    </mat-table>\n                    <div *ngIf=\"superadmins.data.length === 0\">\n                        <p style=\"text-align: center;padding: 10px;\">No records found</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<div\n*ngIf=\"hidden\"\n  class=\"error error-3 d-flex flex-row-fluid bgi-size-cover bgi-position-center\"\n  style=\"background-image: url('./assets/media/error/bg3.jpg'); height: 100%;zoom: 1;\n  display: block;\n  min-height: 80vh;\n  font-size: 14px;\n  line-height: 1.4;\n  color: #0e1724;\"\n>\n  <!--begin::Content-->\n  <div\n    class=\"px-10 px-md-30 py-10 py-md-0 d-flex flex-column justify-content-md-center\"\n  >\n    <p class=\"display-4 font-weight-boldest text-white mb-12\">\n      How did you get here\n    </p>\n    <p class=\"font-size-h1 font-weight-boldest text-dark-75\">\n      Sorry you can't access the page you're looking for.\n    </p>\n    <p class=\"font-size-h4 line-height-md\">\n      There may be a misspelling in the URL entered,<br />or the page you are\n      looking for may no longer exist.\n    </p>\n  </div>\n  <!--end::Content-->\n</div>\n<!-- end:: Error -->\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { UserManagementComponent } from './user-management.component';\r\nimport { SuperadminsComponent } from './superadmins/superadmins.component';\r\nimport { AdminsComponent } from './admins/admins.component';\r\nimport { AdvertisersComponent } from './advertisers/advertisers.component';\r\nimport { UsersComponent } from './users/users.component';\r\nimport { RolesComponent } from './roles/roles.component';\r\nimport { EditUsersComponent } from './edit-users/edit-users.component';\r\nimport { NewUserComponent } from './new-user/new-user.component';\r\nimport { NewSuperadminComponent } from './new-superadmin/new-superadmin.component';\r\nimport { NewAdminComponent } from './new-admin/new-admin.component';\r\nimport { NewAdvertiserComponent } from './new-advertiser/new-advertiser.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: UserManagementComponent,\r\n    children: [\r\n      {\r\n        path: 'super-admin-users',\r\n        component: SuperadminsComponent,\r\n      },\r\n      {\r\n        path: 'admin-users',\r\n        component: AdminsComponent,\r\n      },\r\n      {\r\n        path: 'advertiser-users',\r\n        component: AdvertisersComponent,\r\n      },\r\n      {\r\n        path: 'publisher-users',\r\n        component: UsersComponent,\r\n      },\r\n      {\r\n        path: 'roles',\r\n        component: RolesComponent,\r\n      },\r\n      {\r\n        path: 'new-super-admin',\r\n        component: NewSuperadminComponent,\r\n      },\r\n      {\r\n        path: 'new-admin',\r\n        component: NewAdminComponent,\r\n      },\r\n      {\r\n        path: 'new-advertiser',\r\n        component: NewAdvertiserComponent,\r\n      },\r\n      {\r\n        path: 'new-publisher',\r\n        component: NewUserComponent,\r\n      },\r\n      {\r\n        path: 'edit-user',\r\n        component: EditUsersComponent,\r\n      },\r\n      {\r\n        path: 'edit/:id',\r\n        component: EditUsersComponent,\r\n        pathMatch: 'full'\r\n      },\r\n      { path: '', redirectTo: 'publisher-users', pathMatch: 'full' },\r\n      { path: '**', redirectTo: 'publisher-users', pathMatch: 'full' },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class UserManagementRoutingModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-user-management',\r\n  templateUrl: './user-management.component.html',\r\n})\r\nexport class UserManagementComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n","<router-outlet></router-outlet>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { UsersComponent } from './users/users.component';\r\nimport { RolesComponent } from './roles/roles.component';\r\nimport { UserManagementComponent } from './user-management.component';\r\nimport { UserManagementRoutingModule } from './user-management-routing.module';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { NgbAlertConfig, NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { EditUsersComponent } from './edit-users/edit-users.component';\r\nimport { ValidateEqualModule } from 'ng-validate-equal';\r\nimport { UserPasswordResetComponent } from './edit-users/user-password-reset/user-password-reset.component';\r\nimport { SnackbarService } from 'src/app/shared/service/snackbar.service';\r\nimport { AddTagComponent } from './edit-users/add-tag/add-tag.component';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { AddCompanyComponent } from './edit-users/add-company/add-company.component';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { PermissionComponent } from './roles/permission/permission.component';\r\nimport { SuperadminsComponent } from './superadmins/superadmins.component';\r\nimport { AdminsComponent } from './admins/admins.component';\r\nimport { AdvertisersComponent } from './advertisers/advertisers.component';\r\nimport { NewUserComponent } from './new-user/new-user.component';\r\nimport { NewSuperadminComponent } from './new-superadmin/new-superadmin.component';\r\nimport { NewAdminComponent } from './new-admin/new-admin.component';\r\nimport { NewAdvertiserComponent } from './new-advertiser/new-advertiser.component';\r\nimport { InlineSVGModule } from 'ng-inline-svg';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    UsersComponent,\r\n    RolesComponent,\r\n    UserManagementComponent,\r\n    EditUsersComponent,\r\n    UserPasswordResetComponent,\r\n    AddTagComponent,\r\n    AddCompanyComponent,\r\n    PermissionComponent,\r\n    SuperadminsComponent,\r\n    AdminsComponent,\r\n    AdvertisersComponent,\r\n    NewUserComponent,\r\n    NewSuperadminComponent,\r\n    NewAdminComponent,\r\n    NewAdvertiserComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatTableModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    MatInputModule,\r\n    MatFormFieldModule,\r\n    MatButtonModule,\r\n    MatSnackBarModule,\r\n    MatSelectModule,\r\n    NgbModule,\r\n    MatIconModule,\r\n    MatCheckboxModule,\r\n    UserManagementRoutingModule,\r\n    ValidateEqualModule,\r\n    NgxDatatableModule,\r\n    MatListModule,\r\n    MatDialogModule,\r\n    InlineSVGModule.forRoot()\r\n  ],\r\n  providers: [SnackbarService],\r\n  entryComponents: [\r\n    UserPasswordResetComponent,\r\n    AddTagComponent,\r\n    AddCompanyComponent,\r\n    EditUsersComponent,\r\n  ],\r\n})\r\nexport class UserManagementModule {}\r\n","import { UserInterface } from './../../shared/models/user.interface';\r\nimport { PermissionInterface } from './../../shared/models/permission.interface';\r\nimport { AuthUserInterface } from 'src/app/shared/models/auth-user.interface';\r\nimport { TagsService } from './../../shared/service/tags.service';\r\nimport { TagInterface } from './../../shared/models/tag.interface';\r\nimport { UsersService } from 'src/app/shared/service/users.service';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserManagementService {\r\n\r\n  constructor(\r\n    private usersService: UsersService,\r\n    private tagsService: TagsService\r\n  ) { }\r\n\r\n  resetPassword(userId: number, password: string): Observable<void> {\r\n    return this.usersService.resetPassword(userId, password);\r\n  }\r\n\r\n  getAllTags(): Observable<TagInterface[]> {\r\n    return this.tagsService.getAll();\r\n  }\r\n\r\n  addTag(tag: TagInterface): Observable<TagInterface> {\r\n    return this.tagsService.add(tag);\r\n  }\r\n\r\n  addNewUser(user: UserInterface): Observable<UserInterface> {\r\n    return this.usersService.addUser(user);\r\n  }\r\n\r\n  updateUser(user: UserInterface): Observable<UserInterface> {\r\n    return this.usersService.updateUser(user);\r\n  }\r\n\r\n  getUser(userId: string): Observable<UserInterface> {\r\n    return this.usersService.getUser(userId);\r\n  }\r\n\r\n  updateOnePermission(permission: PermissionInterface): Observable<PermissionInterface> {\r\n    return this.usersService.updateOnePermission(permission);\r\n  }\r\n  getOnePermission(permission: PermissionInterface): Observable<PermissionInterface> {\r\n    return this.usersService.getOnePermission(permission);\r\n  }\r\n}\r\n","import { UserInterface } from './../../../shared/models/user.interface';\r\nimport { TagInterface } from './../../../shared/models/tag.interface';\r\nimport { AuthUserInterface } from 'src/app/shared/models/auth-user.interface';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Component, OnInit, ChangeDetectorRef } from '@angular/core';\r\nimport { UsersService } from '../../../shared/service/users.service'\r\nimport { Subscription } from 'rxjs';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { NotificationService } from 'src/app/shared/service/notification.service';\r\n\r\n@Component({\r\n  selector: 'app-users',\r\n  templateUrl: './users.component.html',\r\n  styleUrls: ['./users.component.scss']\r\n})\r\nexport class UsersComponent implements OnInit {\r\n  displayedColumns = [\"fullname\", \"email\", \"stat\", \"action\"];\r\n  users = new MatTableDataSource<UserInterface>();\r\n\r\n  private subscritions: Subscription[] = [];\r\n\r\n  //Local Storage Company\r\n  localStorageCompany: any;\r\n  hidden = false;\r\n\r\n  constructor(\r\n    private usersServie: UsersService,\r\n    private cdr: ChangeDetectorRef,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private userService: UsersService,\r\n    private notification: NotificationService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.localStorageCompany = this.getSelectedCompanyFromLocalStorage();\r\n    //access page part\r\n    if(!this.localStorageCompany){\r\n      this.hidden = true;\r\n      this.notification.showError(\"Please select your Company!\", \"\")\r\n    } else {\r\n      this.hidden = false;\r\n    }\r\n    this.subscritions.push(\r\n      this.usersServie.getPublisherAll().subscribe(data => {\r\n        console.log(data);\r\n        if(this.localStorageCompany) {\r\n          this.users.data = data.filter(userData => userData.companies.includes(this.localStorageCompany));\r\n        } else {\r\n          this.users.data = data.filter(userData => userData.companies.length == 0);\r\n        }\r\n        this.cdr.detectChanges();\r\n      })\r\n    );\r\n  }\r\n\r\n  handleEditClick(userId: string): void {\r\n    this.router.navigateByUrl('/user-management/edit/' + userId);\r\n  }\r\n  //Gets the Selected Company from Local Storage\r\n  getSelectedCompanyFromLocalStorage() {\r\n    return this.userService.getSelectedCompanyFromLocalStorage();\r\n  }\r\n  handleAddProfile() {\r\n    this.router.navigateByUrl('/user-management/new-publisher');\r\n  }\r\n  deletePublisher(id: any) {\r\n    if(window.confirm('Do you want to go ahead?')) {\r\n      this.usersServie.deleteUser(id).subscribe((res) => {\r\n        this.usersServie.getPublisherAll().subscribe(data => {\r\n          console.log(data);\r\n          if(this.localStorageCompany) {\r\n            this.users.data = data.filter(userData => userData.companies.includes(this.localStorageCompany));\r\n          } else {\r\n            this.users.data = data.filter(userData => userData.companies.length == 0);\r\n          }\r\n          this.cdr.detectChanges();\r\n        })\r\n        this.notification.showWarning('Deleted a User', \"\");\r\n      })\r\n    } \r\n  }\r\n}\r\n","<div class=\"row\" *ngIf=\"!hidden\">\r\n  <div class=\"col-xl-12\">\r\n    <div class=\"card card-custom example example-compact gutter-b\">\r\n      <div class=\"card-header\">\r\n        <div class=\"card-title\">\r\n          <h3 class=\"card-label\">Publisher Users</h3>\r\n        </div>\r\n        <!-- <div class=\"card-toolbar\">\r\n        <div class=\"example-tools justify-content-center\">\r\n          <button class=\"btn btn-sm btn-icon btn-bg-light btn-icon-success btn-hover-success\"\r\n            (click)=\"openAddTagDialog()\">\r\n            <i class=\"flaticon-add-circular-button\"></i>\r\n          </button>\r\n          <button class=\"btn btn-sm btn-icon btn-bg-light btn-icon-danger btn-hover-danger\">\r\n            <i class=\"flaticon2-line\"></i>\r\n          </button>\r\n        </div>\r\n      </div> -->\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <div class=\"pb-3\">\r\n          <button type=\"button\" class=\"btn btn-sm btn-primary\" (click)=\"handleAddProfile()\">\r\n              Add Pubisher\r\n          </button>\r\n        </div>\r\n        <div class=\"example-container mat-elevation-z8\">\r\n          <mat-table #table [dataSource]=\"users\">\r\n            <ng-container matColumnDef=\"fullname\">\r\n              <mat-header-cell *matHeaderCellDef> Full Name </mat-header-cell>\r\n              <mat-cell *matCellDef=\"let element\"> {{element.fullname}} </mat-cell>\r\n            </ng-container>\r\n            <ng-container matColumnDef=\"email\">\r\n              <mat-header-cell *matHeaderCellDef> Email </mat-header-cell>\r\n              <mat-cell *matCellDef=\"let element\"> {{element.email}} </mat-cell>\r\n            </ng-container>\r\n            <ng-container matColumnDef=\"stat\">\r\n              <mat-header-cell *matHeaderCellDef> Stat# </mat-header-cell>\r\n              <mat-cell *matCellDef=\"let element\"> {{element.tags.length}} </mat-cell>\r\n            </ng-container>\r\n            <ng-container matColumnDef=\"action\">\r\n              <mat-header-cell *matHeaderCellDef> Action </mat-header-cell>\r\n              <mat-cell *matCellDef=\"let element\">\r\n                \r\n                <a title=\"Edit Pubisher\" class=\"btn btn-icon btn-light btn-hover-primary btn-sm mx-3\" (click)=\"handleEditClick(element._key)\">\r\n                  <span [inlineSVG]=\"'./assets/media/svg/icons/Communication/Write.svg'\" cacheSVG=\"true\"\r\n                  class=\"svg-icon svg-icon-md svg-icon-primary\">\r\n                  </span>\r\n                </a>\r\n                \r\n                <a title=\"Delete Pubisher\" class=\"btn btn-icon btn-light btn-hover-danger btn-sm\" (click)=\"deletePublisher(element._key)\">\r\n                  <span [inlineSVG]=\"'./assets/media/svg/icons/General/Trash.svg'\" cacheSVG=\"false\"\r\n                    class=\"svg-icon svg-icon-md svg-icon-danger\">\r\n                  </span>\r\n                </a>\r\n              </mat-cell>\r\n            </ng-container>\r\n\r\n            <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n            <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n          </mat-table>\r\n          <div *ngIf=\"users.data.length === 0\">\r\n            <p style=\"text-align: center;padding: 10px;\">No records found</p>\r\n        </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n  <!-- <table class=\"table table-striped\">\r\n  <thead>\r\n    <tr>\r\n      <th scope=\"col\">Name</th>\r\n      <th scope=\"col\">Email</th>\r\n      <th scope=\"col\">Stats #</th>\r\n      <th scope=\"col\"></th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr *ngFor=\"let user of users; index as i\">\r\n      <td>{{ user.fullname }}</td>\r\n      <td>{{ user.email }}</td>\r\n      <td>{{ user.tags.length }}</td>\r\n      <td>\r\n        <button type=\"button\" \r\n          class=\"btn btn-primary\"\r\n          (click)=\"handleEditClick(user._key)\" >\r\n          Edit\r\n        </button>\r\n      </td>\r\n    </tr>\r\n  </tbody>\r\n</table> -->\r\n<div\r\n*ngIf=\"hidden\"\r\n  class=\"error error-3 d-flex flex-row-fluid bgi-size-cover bgi-position-center\"\r\n  style=\"background-image: url('./assets/media/error/bg3.jpg'); height: 100%;zoom: 1;\r\n  display: block;\r\n  min-height: 80vh;\r\n  font-size: 14px;\r\n  line-height: 1.4;\r\n  color: #0e1724;\"\r\n>\r\n  <!--begin::Content-->\r\n  <div\r\n    class=\"px-10 px-md-30 py-10 py-md-0 d-flex flex-column justify-content-md-center\"\r\n  >\r\n    <p class=\"display-4 font-weight-boldest text-white mb-12\">\r\n      How did you get here\r\n    </p>\r\n    <p class=\"font-size-h1 font-weight-boldest text-dark-75\">\r\n      Sorry you can't access the page you're looking for.\r\n    </p>\r\n    <p class=\"font-size-h4 line-height-md\">\r\n      There may be a misspelling in the URL entered,<br />or the page you are\r\n      looking for may no longer exist.\r\n    </p>\r\n  </div>\r\n  <!--end::Content-->\r\n</div>\r\n<!-- end:: Error -->","import { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { AbstractControl } from '@angular/forms';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HelperService {\r\n\r\n  constructor(\r\n  ) { }\r\n\r\n  static passwordConfirming(c: AbstractControl): { invalid: boolean } {\r\n    if (c.get('password').value !== c.get('passwordConfirm').value) {\r\n      return { invalid: true };\r\n    }\r\n  }\r\n\r\n}\r\n"]}