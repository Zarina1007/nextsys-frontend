{"version":3,"sources":["webpack:///node_modules/ng-validate-equal/__ivy_ngcc__/fesm2015/ng-validate-equal.js","webpack:///src/app/modules/user-management/edit-users/add-company/add-company.component.ts","webpack:///src/app/modules/user-management/edit-users/add-company/add-company.component.html","webpack:///src/app/modules/user-management/edit-users/add-tag/add-tag.component.ts","webpack:///src/app/modules/user-management/edit-users/add-tag/add-tag.component.html","webpack:///src/app/modules/user-management/edit-users/edit-users.component.html","webpack:///src/app/modules/user-management/edit-users/edit-users.component.ts","webpack:///src/app/modules/user-management/edit-users/user-password-reset/user-password-reset.component.ts","webpack:///src/app/modules/user-management/edit-users/user-password-reset/user-password-reset.component.html","webpack:///src/app/modules/user-management/roles/roles.component.ts","webpack:///src/app/modules/user-management/roles/roles.component.html","webpack:///src/app/modules/user-management/user-management-routing.module.ts","webpack:///src/app/modules/user-management/user-management.component.ts","webpack:///src/app/modules/user-management/user-management.component.html","webpack:///src/app/modules/user-management/user-management.module.ts","webpack:///src/app/modules/user-management/user-management.service.ts","webpack:///src/app/modules/user-management/users/users.component.ts","webpack:///src/app/modules/user-management/users/users.component.html","webpack:///src/app/shared/service/helper.service.ts"],"names":["ValidateEqualDirective_1","ValidateEqualDirective","otherControl","valueChangesSub","unsubscribe","selfControl","selfControlValue","value","root","get","valueChanges","subscribe","otherControlValue","isEqual","touched","dirty","setErrors","notEqual","hasError","errors","Object","keys","length","val1","val2","unifyEmptyStrings","val","isDefined","defaultUndefined","ɵfac","ValidateEqualDirective_Factory","t","ɵdir","type","selectors","features","provide","useExisting","multi","ctorParameters","String","decorators","args","ValidateEqualModule","ɵmod","ɵinj","factory","ValidateEqualModule_Factory","imports","selector","providers","ngJitMode","declarations","exports","AddCompanyComponent","companyService","cdr","dialogRef","data","loadingIndicator","user","userCompanies","companies","console","log","getAllCompanies","response","allCompanies","detectChanges","close","save","templateUrl","styleUrls","AddTagComponent","activeModal","userManagementService","fb","sS","tagFG","group","name","required","company","markAllAsTouched","valid","addTag","x","info","handleSubmit","EditUsersComponent","authService","route","modalService","snackBarService","dialog","tagsColumnDisplay","tags","userProfileFG","fullname","email","role","snapshot","params","id","getUserData","currentUserSubject","getUser","toPromise","getUserCompanies","patchValue","$event","updateUser","modalRef","open","size","componentInstance","_key","result","then","c","tagsId","push","height","width","afterClosed","openPasswordResetDialog","updateUserProfile","openAddTagDialog","openAddCompanyDialog","UserPasswordResetComponent","passwordFG","password","passwordConfirm","validator","passwordConfirming","resetPassword","ELEMENT_DATA","position","RolesComponent","displayedColumns","dataSource","routes","path","component","children","pathMatch","redirectTo","UserManagementRoutingModule","forChild","UserManagementComponent","UserManagementModule","entryComponents","UserManagementService","usersService","tagsService","userId","getAll","tag","add","providedIn","UsersComponent","usersServie","router","users","subscritions","navigateByUrl","HelperService","invalid"],"mappings":"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","file":"modules-user-management-user-management-module-es5.js","sourcesContent":["import { __decorate, __param } from 'tslib';\r\nimport { Attribute, Directive, forwardRef, NgModule } from '@angular/core';\r\nimport { NG_VALIDATORS } from '@angular/forms';\r\n\r\nimport * as ɵngcc0 from '@angular/core';\nvar ValidateEqualDirective_1;\r\nlet ValidateEqualDirective = ValidateEqualDirective_1 = class ValidateEqualDirective {\r\n    constructor(otherControl) {\r\n        this.otherControl = otherControl;\r\n    }\r\n    ngOnDestroy() {\r\n        if (this.valueChangesSub) {\r\n            this.valueChangesSub.unsubscribe();\r\n        }\r\n    }\r\n    validate(selfControl) {\r\n        const selfControlValue = selfControl.value;\r\n        const otherControl = selfControl.root.get(this.otherControl);\r\n        if (this.valueChangesSub) {\r\n            this.valueChangesSub.unsubscribe();\r\n        }\r\n        // this code works when user types in other control putting the error in self control\r\n        this.valueChangesSub = otherControl.valueChanges.subscribe(otherControlValue => {\r\n            if (!this.isEqual(selfControlValue, otherControlValue) && (selfControl.touched || selfControl.dirty)) {\r\n                selfControl.setErrors({\r\n                    notEqual: true\r\n                });\r\n            }\r\n            else {\r\n                if (selfControl.hasError('notEqual')) {\r\n                    delete selfControl.errors['notEqual'];\r\n                    if (!Object.keys(selfControl.errors).length) {\r\n                        selfControl.setErrors(null);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        // this code works when the user types in self control putting the error in self control\r\n        if (!this.isEqual(selfControlValue, otherControl.value) && (selfControl.touched || selfControl.dirty)) {\r\n            return {\r\n                notEqual: true\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n    isEqual(val1, val2) {\r\n        val1 = this.unifyEmptyStrings(val1);\r\n        val2 = this.unifyEmptyStrings(val2);\r\n        return val1 === val2;\r\n    }\r\n    unifyEmptyStrings(val) {\r\n        const isDefined = this.isDefined;\r\n        if (val === null || !isDefined(val)) {\r\n            val = '';\r\n        }\r\n        return val;\r\n    }\r\n    isDefined(value) {\r\n        const defaultUndefined = void (0);\r\n        return value !== defaultUndefined;\r\n    }\r\n};\nValidateEqualDirective.ɵfac = function ValidateEqualDirective_Factory(t) { return new (t || ValidateEqualDirective)(ɵngcc0.ɵɵinjectAttribute('ngValidateEqual')); };\nValidateEqualDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ValidateEqualDirective, selectors: [[\"\", \"ngValidateEqual\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: NG_VALIDATORS, useExisting: forwardRef(() => ValidateEqualDirective_1), multi: true }\n        ])] });\r\nValidateEqualDirective.ctorParameters = () => [\r\n    { type: String, decorators: [{ type: Attribute, args: ['ngValidateEqual',] }] }\r\n];\r\nValidateEqualDirective = ValidateEqualDirective_1 = __decorate([ __param(0, Attribute('ngValidateEqual'))\r\n], ValidateEqualDirective);\r\n\r\nlet ValidateEqualModule = class ValidateEqualModule {\r\n};\nValidateEqualModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ValidateEqualModule });\nValidateEqualModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ValidateEqualModule_Factory(t) { return new (t || ValidateEqualModule)(); }, imports: [[]] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ValidateEqualDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[ngValidateEqual]',\n                providers: [\n                    { provide: NG_VALIDATORS, useExisting: forwardRef(() => ValidateEqualDirective_1), multi: true }\n                ]\n            }]\n    }], function () { return [{ type: String, decorators: [{\n                type: Attribute,\n                args: ['ngValidateEqual']\n            }] }]; }, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ValidateEqualModule, { declarations: [ValidateEqualDirective], exports: [ValidateEqualDirective] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ValidateEqualModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [ValidateEqualDirective],\n                imports: [],\n                exports: [ValidateEqualDirective]\n            }]\n    }], null, null); })();\r\n\r\n/*\r\n * Public API Surface of ng-validate-equal\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { ValidateEqualDirective, ValidateEqualModule };\r\n\r\n\n//# sourceMappingURL=ng-validate-equal.js.map","import { ChangeDetectorRef, Inject } from '@angular/core';\r\nimport { Component, OnInit, Input } from '@angular/core';\r\nimport { CompanyService } from 'src/app/shared/service/companies.service';\r\nimport { CompanyInterface } from '../../../../shared/models/company.interface';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { UserInterface } from 'src/app/shared/models/user.interface';\r\n\r\n@Component({\r\n  selector: 'app-add-company',\r\n  templateUrl: './add-company.component.html',\r\n  styleUrls: ['./add-company.component.scss'],\r\n})\r\nexport class AddCompanyComponent implements OnInit {\r\n  //Variable for loading indicator\r\n  loadingIndicator = true;\r\n\r\n  //Variable for current user\r\n  user: UserInterface;\r\n\r\n  //Variable for current companies saved on user account\r\n  userCompanies: string[];\r\n\r\n  //Variable for ALL Companies avaiablable\r\n  allCompanies: any;\r\n\r\n  constructor(\r\n    private companyService: CompanyService,\r\n    private cdr: ChangeDetectorRef,\r\n    public dialogRef: MatDialogRef<AddCompanyComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    //Sets current user to data input variable\r\n    this.user = this.data;\r\n\r\n    //Sets userCompanies to user's current companies\r\n    this.userCompanies = this.user.companies;\r\n\r\n    console.log(this.user);\r\n    console.log(this.userCompanies);\r\n\r\n    //Gets ALL companies available\r\n    this.getAllCompanies();\r\n  }\r\n\r\n  /**\r\n   * getAllCompanies()\r\n   * * Gets all companies available from companyService method.\r\n   * * @param NONE\r\n   */\r\n  getAllCompanies() {\r\n    this.companyService.getAllCompanies().subscribe((response) => {\r\n      console.log(response);\r\n      this.loadingIndicator = false;\r\n      this.allCompanies = response;\r\n      this.cdr.detectChanges();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * save()\r\n   * * Saves added or removed companies to the user's profile\r\n   * TODO: TBD\r\n   * @param NONE\r\n   */\r\n  save() {\r\n    this.user.companies = [...this.userCompanies];\r\n    this.dialogRef.close({ user: this.user });\r\n  }\r\n\r\n  /**\r\n   * close()\r\n   * * Closes the dialog and does not make any changes.\r\n   *\r\n   */\r\n  close() {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","<mat-dialog-content class=\"mat-typography\">\r\n  <div class=\"row\">\r\n    <!-- STARTING UPDATE PROFILE-->\r\n    <div class=\"col-xl-12\">\r\n      <div class=\"card card-custom example example-compact gutter-b\">\r\n        <div class=\"card-header\">\r\n          <div class=\"card-title\">\r\n            <h3 class=\"card-label\">Add or Remove Companies</h3>\r\n          </div>\r\n        </div>\r\n        <div class=\"card-body\">\r\n          <div class=\"row\">\r\n            <div class=\"col-xl-12\">\r\n              <mat-selection-list\r\n                color=\"primary\"\r\n                #company\r\n                [(ngModel)]=\"userCompanies\"\r\n              >\r\n                <mat-list-option\r\n                  *ngFor=\"let company of allCompanies\"\r\n                  [value]=\"company._id\"\r\n                >\r\n                  {{ company.name }}\r\n                </mat-list-option>\r\n              </mat-selection-list>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</mat-dialog-content>\r\n<div class=\"row buttons\">\r\n  <div class=\"col-md-6\">\r\n    <button\r\n      class=\"save-button\"\r\n      mat-raised-button\r\n      color=\"secondary\"\r\n      (click)=\"close()\"\r\n    >\r\n      Cancel\r\n    </button>\r\n  </div>\r\n  <div class=\"col-md-6\">\r\n    <button\r\n      class=\"back-button\"\r\n      mat-raised-button\r\n      color=\"primary\"\r\n      (click)=\"save()\"\r\n    >\r\n      Save\r\n    </button>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { SnackbarService } from 'src/app/shared/service/snackbar.service';\r\nimport { UserManagementService } from '../../user-management.service';\r\n\r\n@Component({\r\n  selector: 'app-add-tag',\r\n  templateUrl: './add-tag.component.html',\r\n  styleUrls: ['./add-tag.component.scss']\r\n})\r\nexport class AddTagComponent implements OnInit {\r\n  tagFG: FormGroup;\r\n\r\n  constructor(\r\n    public activeModal: NgbActiveModal,\r\n    private userManagementService: UserManagementService,\r\n    private fb: FormBuilder,\r\n    private sS: SnackbarService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.tagFG = this.fb.group({\r\n      name: new FormControl('', Validators.required),\r\n      company: new FormControl('', Validators.required)\r\n    })\r\n  }\r\n\r\n  handleSubmit(): void {\r\n    this.tagFG.markAllAsTouched();\r\n    if (this.tagFG.valid) {\r\n      this.userManagementService.addTag(this.tagFG.value).subscribe(x => {\r\n        console.log(x);\r\n        this.sS.info('Added a new tag');\r\n        this.activeModal.close(x);\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n","<!-- <h1 mat-dialog-title>Add Tag</h1>\r\n<div mat-dialog-content>\r\n    <form class=\"example-container\" [formGroup]=\"tagFG\">\r\n        <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n                <mat-form-field>\r\n                    <input type=\"text\" matInput formControlName=\"name\" placeholder=\"Name\" />\r\n                    <mat-error *ngIf=\"tagFG.get('name').errors?.required\">Name is required</mat-error>\r\n                </mat-form-field>\r\n            </div>\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n                <mat-form-field>\r\n                    <input type=\"text\" matInput formControlName=\"company\" placeholder=\"Company\" />\r\n                    <mat-error *ngIf=\"tagFG.get('company').errors?.required\">Company is required\r\n                    </mat-error>\r\n                </mat-form-field>\r\n            </div>\r\n        </div>\r\n    </form>\r\n</div>\r\n<div mat-dialog-actions>\r\n    <button mat-button (click)=\"dialogRef.close()\">Close</button>\r\n    <button mat-raised-button color=\"primary\" (click)=\"handleSubmit()\" cdkFocusInitial>Add Tag</button>\r\n</div>\r\n -->\r\n\r\n\r\n<div class=\"modal-header\">\r\n    <h4 class=\"modal-title\">New Tag</h4>\r\n    <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"activeModal.dismiss('Cross click')\">\r\n        <span aria-hidden=\"true\">&times;</span>\r\n    </button>\r\n</div>\r\n<div class=\"modal-body\">\r\n    <form class=\"example-container\" [formGroup]=\"tagFG\">\r\n        <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n                <mat-form-field>\r\n                    <input type=\"text\" matInput formControlName=\"name\" placeholder=\"Name\" />\r\n                    <mat-error *ngIf=\"tagFG.get('name').errors?.required\">Name is required</mat-error>\r\n                </mat-form-field>\r\n            </div>\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n                <mat-form-field>\r\n                    <input type=\"text\" matInput formControlName=\"company\" placeholder=\"Company\" />\r\n                    <mat-error *ngIf=\"tagFG.get('company').errors?.required\">Company is required\r\n                    </mat-error>\r\n                </mat-form-field>\r\n            </div>\r\n        </div>\r\n    </form>\r\n</div>\r\n<div class=\"modal-footer\">\r\n    <button type=\"button\" class=\"btn btn-secondary\" (click)=\"activeModal.close()\">Close</button>\r\n    <button type=\"button\" class=\"btn btn-primary\"  (click)=\"handleSubmit()\">Add</button>\r\n</div>\r\n","<div class=\"row\">\r\n  <!-- STARTING UPDATE PROFILE-->\r\n  <div class=\"col-xl-6\">\r\n    <div class=\"card card-custom example example-compact gutter-b\">\r\n      <div class=\"card-header\">\r\n        <div class=\"card-title\">\r\n          <h3 class=\"card-label\">Update Profile</h3>\r\n          <button\r\n            mat-button\r\n            color=\"primary\"\r\n            type=\"button\"\r\n            (click)=\"openPasswordResetDialog()\"\r\n          >\r\n            Reset Password\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <form\r\n          class=\"example-container\"\r\n          [formGroup]=\"userProfileFG\"\r\n          (submit)=\"updateUserProfile($event)\"\r\n        >\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n              <mat-form-field>\r\n                <input\r\n                  matInput\r\n                  formControlName=\"fullname\"\r\n                  placeholder=\"Full Name\"\r\n                />\r\n                <mat-error\r\n                  *ngIf=\"userProfileFG.get('fullname').errors?.required\"\r\n                  >Name is required</mat-error\r\n                >\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n              <mat-form-field>\r\n                <input matInput formControlName=\"email\" placeholder=\"Email\" />\r\n                <mat-error *ngIf=\"userProfileFG.get('email').errors?.email\"\r\n                  >Email is not valid</mat-error\r\n                >\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n              <mat-form-field>\r\n                <mat-select formControlName=\"role\" placeholder=\"Role\">\r\n                  <mat-option [value]=\"1\">Super Admin</mat-option>\r\n                  <mat-option [value]=\"2\">Admin</mat-option>              \r\n                  <mat-option [value]=\"3\">Publisher</mat-option>\r\n                  <mat-option [value]=\"4\">Advertiser</mat-option>\r\n                </mat-select>\r\n                <mat-error *ngIf=\"userProfileFG.get('role').errors?.required\"\r\n                  >Role is not valid</mat-error\r\n                >\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div class=\"row updateProfile\">\r\n            <div class=\"col-md-12\">\r\n              <button mat-raised-button color=\"primary\" type=\"submit\">\r\n                Update Profile\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- STARTING UPDATING TAGS -->\r\n  <div class=\"col-xl-6\">\r\n    <div class=\"card card-custom example example-compact gutter-b\">\r\n      <div class=\"card-header\">\r\n        <div class=\"card-title\">\r\n          <h3 class=\"card-label\">Tags</h3>\r\n        </div>\r\n        <div class=\"card-toolbar\">\r\n          <div class=\"example-tools justify-content-center\">\r\n            <button\r\n              class=\"\r\n                btn\r\n                btn-sm\r\n                btn-icon\r\n                btn-bg-light\r\n                btn-icon-success\r\n                btn-hover-success\r\n              \"\r\n              (click)=\"openAddTagDialog()\"\r\n            >\r\n              <i class=\"flaticon-add-circular-button\"></i>\r\n            </button>\r\n\r\n            <button\r\n              class=\"\r\n                btn\r\n                btn-sm\r\n                btn-icon\r\n                btn-bg-light\r\n                btn-icon-danger\r\n                btn-hover-danger\r\n              \"\r\n            >\r\n              <i class=\"flaticon2-line\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <div class=\"example-container mat-elevation-z8\">\r\n          <mat-table #table [dataSource]=\"tags\">\r\n            <ng-container matColumnDef=\"name\">\r\n              <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\r\n              <mat-cell *matCellDef=\"let element\">\r\n                {{ element.name }}\r\n              </mat-cell>\r\n            </ng-container>\r\n            <ng-container matColumnDef=\"company\">\r\n              <mat-header-cell *matHeaderCellDef> Company </mat-header-cell>\r\n              <mat-cell *matCellDef=\"let element\">\r\n                {{ element.company }}\r\n              </mat-cell>\r\n            </ng-container>\r\n\r\n            <mat-header-row\r\n              *matHeaderRowDef=\"tagsColumnDisplay\"\r\n            ></mat-header-row>\r\n            <mat-row *matRowDef=\"let row; columns: tagsColumnDisplay\"></mat-row>\r\n          </mat-table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- STARTING UPDATE COMPANIES -->\r\n<div class=\"row\">\r\n  <div class=\"col-xl-6\">\r\n    <div class=\"card card-custom example example-compact gutter-b\">\r\n      <div class=\"card-header\">\r\n        <div class=\"card-title\">\r\n          <h3 class=\"card-label\">Companies</h3>\r\n          <button mat-button color=\"primary\" (click)=\"openAddCompanyDialog()\">\r\n            Add or Remove\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <div class=\"row\">\r\n          <div class=\"col-xl-12\">\r\n            <mat-list *ngIf=\"user\" #company>\r\n              <mat-list-item *ngFor=\"let company of userCompanies\">\r\n                {{ company.name }}\r\n                <mat-divider></mat-divider>\r\n              </mat-list-item>\r\n            </mat-list>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { ActivatedRoute } from '@angular/router';\r\nimport { TagInterface } from './../../../shared/models/tag.interface';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { AuthService } from '../../auth/_services/auth.service';\r\nimport { UserManagementService } from '../user-management.service';\r\nimport { UserInterface } from 'src/app/shared/models/user.interface';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { UserPasswordResetComponent } from './user-password-reset/user-password-reset.component';\r\nimport { SnackbarService } from 'src/app/shared/service/snackbar.service';\r\nimport { AddTagComponent } from './add-tag/add-tag.component';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { CompanyInterface } from 'src/app/shared/models/company.interface';\r\nimport { AddCompanyComponent } from './add-company/add-company.component';\r\nimport { CompanyService } from 'src/app/shared/service/companies.service';\r\nimport {\r\n  MatDialog,\r\n  MatDialogRef,\r\n  MAT_DIALOG_DATA,\r\n} from '@angular/material/dialog';\r\nimport { toJSDate } from '@ng-bootstrap/ng-bootstrap/datepicker/ngb-calendar';\r\n\r\n@Component({\r\n  selector: 'app-edit-users',\r\n  templateUrl: './edit-users.component.html',\r\n  styleUrls: ['./edit-users.component.scss'],\r\n})\r\nexport class EditUsersComponent implements OnInit {\r\n  userProfileFG: FormGroup;\r\n  tagsColumnDisplay = ['name', 'company'];\r\n  tags = new MatTableDataSource<TagInterface>();\r\n  rows: Array<CompanyInterface>;\r\n\r\n  //All User Data\r\n  user: UserInterface;\r\n\r\n  //All User Data\r\n  userCompanies: Array<CompanyInterface>;\r\n\r\n  constructor(\r\n    private userManagementService: UserManagementService,\r\n    private authService: AuthService,\r\n    private route: ActivatedRoute,\r\n    private sS: SnackbarService,\r\n    private modalService: NgbModal,\r\n    private companyService: CompanyService,\r\n    private snackBarService: SnackbarService,\r\n    public dialog: MatDialog\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.userProfileFG = new FormGroup({\r\n      fullname: new FormControl('', Validators.required),\r\n      email: new FormControl('', [Validators.required, Validators.email]),\r\n      role: new FormControl('', Validators.required),\r\n    });\r\n\r\n    if (this.route.snapshot.params.id) {\r\n      this.getUserData(this.route.snapshot.params.id);\r\n      // await this.getUserCompanies(this.user.companies);\r\n    } else {\r\n      this.user = this.authService.currentUserSubject.value as any;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * getUserData(id)\r\n   * @param id: User _key value\r\n   */\r\n  async getUserData(id) {\r\n    //Pulls the specific USER from the database.\r\n    this.user = await this.userManagementService.getUser(id).toPromise();\r\n    console.log(\"user information\", this.user)\r\n    //If user has companies on their account\r\n    if (this.user.companies.length) {\r\n      this.userCompanies = await this.companyService\r\n        .getUserCompanies(this.user.companies)\r\n        .toPromise();\r\n      console.log(this.userCompanies);\r\n    }\r\n\r\n    //Patches value into FormGroup\r\n    this.userProfileFG.patchValue(this.user);\r\n  }\r\n\r\n  updateUserProfile($event: any): void {\r\n    if (this.userProfileFG.valid) {\r\n      this.user = { ...this.user, ...this.userProfileFG.value };\r\n      this.userManagementService.updateUser(this.user).subscribe((x) => {\r\n        this.sS.info('user profile updated');\r\n      });\r\n    }\r\n  }\r\n\r\n  openPasswordResetDialog() {\r\n    const modalRef = this.modalService.open(UserPasswordResetComponent, {\r\n      size: 'sm',\r\n    });\r\n    modalRef.componentInstance.data = {\r\n      id: this.user._key,\r\n    };\r\n    modalRef.result.then((c) => {});\r\n  }\r\n\r\n  openAddTagDialog() {\r\n    const modalRef = this.modalService.open(AddTagComponent, {\r\n      size: 'sm',\r\n    });\r\n    modalRef.componentInstance.data = {};\r\n    modalRef.result.then((c) => {\r\n      var tags = this.user.tags || [];\r\n      var tagsId = this.user.tagsId || [];\r\n      tags.push(c);\r\n      tagsId.push(c._key);\r\n      this.user.tagsId = tagsId;\r\n      this.tags.data = tags;\r\n      this.userManagementService.updateUser(this.user).subscribe((x) => {});\r\n    });\r\n  }\r\n\r\n  //Add/Edit Companies to a user profile\r\n  openAddCompanyDialog() {\r\n    console.log(this.user);\r\n    let dialogRef = this.dialog\r\n      .open(AddCompanyComponent, {\r\n        height: 'auto',\r\n        width: '600px',\r\n        data: this.user,\r\n      })\r\n      .afterClosed()\r\n      .subscribe((response) => {\r\n        //If user hits save\r\n        if (response) {\r\n          console.log(response);\r\n          //New variable readability -- all user data\r\n          this.user = response.user;\r\n\r\n          //Updates current user with new company selection.\r\n          this.userManagementService.updateUser(this.user).subscribe((x) => {\r\n            //\r\n            this.getUserData(this.user._key);\r\n            this.snackBarService.info(\r\n              `Updated  ${this.user.fullname}'s companies.`\r\n            );\r\n          });\r\n        }\r\n      });\r\n\r\n    // dialogRef.afterClosed().subscribe((result) => {\r\n    //   console.log(`Dialog result: ${result}`);\r\n    // });\r\n\r\n    // console.log(this.user);\r\n    // const initialState = { data: this.user };\r\n    // const modalRef = this.modalService.open(AddCompanyComponent, {\r\n    //   size: 'md',\r\n    // });\r\n    // modalRef.componentInstance.companies = [...this.user.companies];\r\n\r\n    // modalRef.result.then((res) => {\r\n    //   //If a result is passed back, update the user profile with new companies.\r\n    //   if (res) {\r\n    //     this.user.companies = [...res];\r\n    //     this.userManagementService.updateUser(this.user).subscribe((x) => {\r\n    //       this.getUserData(this.user._key);\r\n    //       this.snackBarService.info(\r\n    //         `Updated  ${this.user.fullname}'s companies.`\r\n    //       );\r\n    //     });\r\n    //   }\r\n    // });\r\n  }\r\n\r\n  // isEnabled(tagKey: string): boolean {\r\n  //   if (this.user && Array.isArray(this.user.tags)) {\r\n  //     return !!this.user.tags.filter(x => !!x).find(x => x._key === tagKey);\r\n  //   } else {\r\n  //     return false;\r\n  //   }\r\n  // }\r\n\r\n  // handleTagClick(tagKey: string): void {\r\n  //   this.user.tags = this.user.tags || [];\r\n  //   let tag = this.user.tags.filter(x => !!x).find(x => x._key === tagKey);\r\n  //   if (tag) {\r\n  //     this.user.tags.splice(this.user.tags.indexOf(tag), 1);\r\n  //   } else {\r\n  //     this.user.tags.push(tag);\r\n  //   }\r\n  //   this.userManagementService.updateUser(this.user).subscribe();\r\n  // }\r\n}\r\n","import { Component, Inject, Input, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { HelperService } from 'src/app/shared/service/helper.service';\r\nimport { SnackbarService } from 'src/app/shared/service/snackbar.service';\r\nimport { UserManagementService } from '../../user-management.service';\r\n\r\n@Component({\r\n  selector: 'app-user-password-reset',\r\n  templateUrl: './user-password-reset.component.html',\r\n  styleUrls: ['./user-password-reset.component.scss']\r\n})\r\nexport class UserPasswordResetComponent implements OnInit {\r\n  passwordFG: FormGroup;\r\n  @Input() data: any;\r\n\r\n  constructor(\r\n    public activeModal: NgbActiveModal,\r\n    private userManagementService: UserManagementService,\r\n    private fb: FormBuilder,\r\n    private sS: SnackbarService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.passwordFG = this.fb.group({\r\n      password: new FormControl('', Validators.required),\r\n      passwordConfirm: new FormControl('', Validators.required)\r\n    }, { validator: HelperService.passwordConfirming })\r\n  }\r\n\r\n  handleSubmit(): void {\r\n    this.passwordFG.markAllAsTouched();\r\n    if (this.passwordFG.valid) {\r\n      var password = this.passwordFG.value.password;\r\n      var id = this.data.id;\r\n      this.userManagementService.resetPassword(id, password).subscribe(x => {\r\n        this.sS.info('password has been reset');\r\n        this.activeModal.close();\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"modal-header\">\r\n    <h4 class=\"modal-title\">Update Profile</h4>\r\n    <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"activeModal.dismiss('Cross click')\">\r\n        <span aria-hidden=\"true\">&times;</span>\r\n    </button>\r\n</div>\r\n<div class=\"modal-body\">\r\n    <form class=\"example-container\" [formGroup]=\"passwordFG\">\r\n        <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n                <mat-form-field>\r\n                    <input type=\"password\" matInput formControlName=\"password\" placeholder=\"Password\" />\r\n                    <mat-error *ngIf=\"passwordFG.get('password').errors?.required\">Password is required</mat-error>\r\n                </mat-form-field>\r\n            </div>\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n                <mat-form-field>\r\n                    <input type=\"password\" matInput formControlName=\"passwordConfirm\" placeholder=\"Confirm Password\" />\r\n                    <mat-error *ngIf=\"passwordFG.get('passwordConfirm').errors?.required\">Confirm password is required\r\n                    </mat-error>\r\n                    <mat-error *ngIf=\"passwordFG.errors?.invalid\">Password is not match</mat-error>\r\n                </mat-form-field>\r\n            </div>\r\n        </div>\r\n    </form>\r\n</div>\r\n<div class=\"modal-footer\">\r\n    <button type=\"button\" class=\"btn btn-secondary\" (click)=\"activeModal.close()\">Close</button>\r\n    <button type=\"button\" class=\"btn btn-primary\"  (click)=\"handleSubmit()\">Reset Password</button>\r\n    <!-- <button type=\"button\" class=\"btn btn-outline-dark\" (click)=\"activeModal.close('Close click')\">Close</button> -->\r\n</div>\r\n\r\n\r\n<!-- <h1 mat-dialog-title>Reset Password</h1>\r\n<div mat-dialog-content>\r\n\r\n</div>\r\n<div mat-dialog-actions>\r\n    <button mat-button (click)=\"dialogRef.close()\">Close</button>\r\n    <button mat-raised-button color=\"primary\" (click)=\"handleSubmit()\" cdkFocusInitial>Reset Password</button>\r\n</div> -->","import { Component, OnInit } from \"@angular/core\";\r\n\r\nexport interface PeriodicElement {\r\n  name: string;\r\n  position: number;\r\n}\r\n\r\nconst ELEMENT_DATA: PeriodicElement[] = [\r\n  { position: 1, name: \"Super Admin\" },\r\n  { position: 2, name: \"Admin\" },\r\n  { position: 3, name: \"Advertiser\" },\r\n  { position: 4, name: \"Publisher\" },\r\n];\r\n\r\n@Component({\r\n  selector: \"app-roles\",\r\n  templateUrl: \"./roles.component.html\",\r\n  styleUrls: [\"./roles.component.scss\"],\r\n})\r\nexport class RolesComponent implements OnInit {\r\n  displayedColumns: string[] = [\"position\", \"name\"];\r\n  dataSource = ELEMENT_DATA;\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n","<table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\r\n\r\n  <!--- Note that these columns can be defined in any order.\r\n        The actual rendered columns are set as a property on the row definition\" -->\r\n\r\n  <!-- Position Column -->\r\n  <ng-container matColumnDef=\"position\">\r\n    <th mat-header-cell *matHeaderCellDef> No. </th>\r\n    <td mat-cell *matCellDef=\"let element\"> {{element.position}} </td>\r\n  </ng-container>\r\n\r\n  <!-- Name Column -->\r\n  <ng-container matColumnDef=\"name\">\r\n    <th mat-header-cell *matHeaderCellDef> Role </th>\r\n    <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\r\n  </ng-container>\r\n\r\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n</table>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { UserManagementComponent } from './user-management.component';\r\nimport { UsersComponent } from './users/users.component';\r\nimport { RolesComponent } from './roles/roles.component';\r\nimport { EditUsersComponent } from './edit-users/edit-users.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: UserManagementComponent,\r\n    children: [\r\n      {\r\n        path: 'publisher-users',\r\n        component: UsersComponent,\r\n      },\r\n      {\r\n        path: 'roles',\r\n        component: RolesComponent,\r\n      },\r\n      {\r\n        path: 'edit-user',\r\n        component: EditUsersComponent,\r\n      },\r\n      {\r\n        path: 'edit/:id',\r\n        component: EditUsersComponent,\r\n        pathMatch: 'full'\r\n      },\r\n      { path: '', redirectTo: 'publisher-users', pathMatch: 'full' },\r\n      { path: '**', redirectTo: 'publisher-users', pathMatch: 'full' },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class UserManagementRoutingModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-user-management',\r\n  templateUrl: './user-management.component.html',\r\n})\r\nexport class UserManagementComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n","<router-outlet></router-outlet>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { UsersComponent } from './users/users.component';\r\nimport { RolesComponent } from './roles/roles.component';\r\nimport { UserManagementComponent } from './user-management.component';\r\nimport { UserManagementRoutingModule } from './user-management-routing.module';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { NgbAlertConfig, NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { EditUsersComponent } from './edit-users/edit-users.component';\r\nimport { ValidateEqualModule } from 'ng-validate-equal';\r\nimport { UserPasswordResetComponent } from './edit-users/user-password-reset/user-password-reset.component';\r\nimport { SnackbarService } from 'src/app/shared/service/snackbar.service';\r\nimport { AddTagComponent } from './edit-users/add-tag/add-tag.component';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { AddCompanyComponent } from './edit-users/add-company/add-company.component';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatSelectModule } from '@angular/material/select';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    UsersComponent,\r\n    RolesComponent,\r\n    UserManagementComponent,\r\n    EditUsersComponent,\r\n    UserPasswordResetComponent,\r\n    AddTagComponent,\r\n    AddCompanyComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatTableModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    MatInputModule,\r\n    MatFormFieldModule,\r\n    MatButtonModule,\r\n    MatSnackBarModule,\r\n    MatSelectModule,\r\n    NgbModule,\r\n    MatIconModule,\r\n    UserManagementRoutingModule,\r\n    ValidateEqualModule,\r\n    NgxDatatableModule,\r\n    MatListModule,\r\n    MatDialogModule,\r\n  ],\r\n  providers: [SnackbarService],\r\n  entryComponents: [\r\n    UserPasswordResetComponent,\r\n    AddTagComponent,\r\n    AddCompanyComponent,\r\n    EditUsersComponent,\r\n  ],\r\n})\r\nexport class UserManagementModule {}\r\n","import { UserInterface } from './../../shared/models/user.interface';\r\nimport { AuthUserInterface } from 'src/app/shared/models/auth-user.interface';\r\nimport { TagsService } from './../../shared/service/tags.service';\r\nimport { TagInterface } from './../../shared/models/tag.interface';\r\nimport { UsersService } from 'src/app/shared/service/users.service';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserManagementService {\r\n\r\n  constructor(\r\n    private usersService: UsersService,\r\n    private tagsService: TagsService\r\n  ) { }\r\n\r\n  resetPassword(userId: number, password: string): Observable<void> {\r\n    return this.usersService.resetPassword(userId, password);\r\n  }\r\n\r\n  getAllTags(): Observable<TagInterface[]> {\r\n    return this.tagsService.getAll();\r\n  }\r\n\r\n  addTag(tag: TagInterface): Observable<TagInterface> {\r\n    return this.tagsService.add(tag);\r\n  }\r\n\r\n  updateUser(user: UserInterface): Observable<UserInterface> {\r\n    return this.usersService.updateUser(user);\r\n  }\r\n\r\n  getUser(userId: string): Observable<UserInterface> {\r\n    return this.usersService.getUser(userId);\r\n  }\r\n\r\n}\r\n","import { UserInterface } from './../../../shared/models/user.interface';\r\nimport { TagInterface } from './../../../shared/models/tag.interface';\r\nimport { AuthUserInterface } from 'src/app/shared/models/auth-user.interface';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Component, OnInit, ChangeDetectorRef } from '@angular/core';\r\nimport { UsersService } from '../../../shared/service/users.service'\r\nimport { Subscription } from 'rxjs';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\n\r\n@Component({\r\n  selector: 'app-users',\r\n  templateUrl: './users.component.html',\r\n  styleUrls: ['./users.component.scss']\r\n})\r\nexport class UsersComponent implements OnInit {\r\n  displayedColumns = [\"fullname\", \"email\", \"stat\", \"action\"];\r\n  users = new MatTableDataSource<UserInterface>();\r\n\r\n  private subscritions: Subscription[] = [];\r\n  constructor(\r\n    private usersServie: UsersService,\r\n    private cdr: ChangeDetectorRef,\r\n    private router: Router,\r\n    private route: ActivatedRoute\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.subscritions.push(\r\n      this.usersServie.getAll().subscribe(data => {\r\n        console.log(data);\r\n        this.users.data = data;\r\n        this.cdr.detectChanges();\r\n      })\r\n    );\r\n  }\r\n\r\n  handleEditClick(userId: string): void {\r\n    this.router.navigateByUrl('/user-management/edit/' + userId);\r\n  }\r\n\r\n}\r\n","<div class=\"row\">\r\n  <div class=\"col-xl-12\">\r\n    <div class=\"card card-custom example example-compact gutter-b\">\r\n      <div class=\"card-header\">\r\n        <div class=\"card-title\">\r\n          <h3 class=\"card-label\">Users</h3>\r\n        </div>\r\n        <!-- <div class=\"card-toolbar\">\r\n        <div class=\"example-tools justify-content-center\">\r\n          <button class=\"btn btn-sm btn-icon btn-bg-light btn-icon-success btn-hover-success\"\r\n            (click)=\"openAddTagDialog()\">\r\n            <i class=\"flaticon-add-circular-button\"></i>\r\n          </button>\r\n          <button class=\"btn btn-sm btn-icon btn-bg-light btn-icon-danger btn-hover-danger\">\r\n            <i class=\"flaticon2-line\"></i>\r\n          </button>\r\n        </div>\r\n      </div> -->\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <div class=\"example-container mat-elevation-z8\">\r\n          <mat-table #table [dataSource]=\"users\">\r\n            <ng-container matColumnDef=\"fullname\">\r\n              <mat-header-cell *matHeaderCellDef> Full Name </mat-header-cell>\r\n              <mat-cell *matCellDef=\"let element\"> {{element.fullname}} </mat-cell>\r\n            </ng-container>\r\n            <ng-container matColumnDef=\"email\">\r\n              <mat-header-cell *matHeaderCellDef> Email </mat-header-cell>\r\n              <mat-cell *matCellDef=\"let element\"> {{element.email}} </mat-cell>\r\n            </ng-container>\r\n            <ng-container matColumnDef=\"stat\">\r\n              <mat-header-cell *matHeaderCellDef> Stat# </mat-header-cell>\r\n              <mat-cell *matCellDef=\"let element\"> {{element.tags.length}} </mat-cell>\r\n            </ng-container>\r\n            <ng-container matColumnDef=\"action\">\r\n              <mat-header-cell *matHeaderCellDef> Action </mat-header-cell>\r\n              <mat-cell *matCellDef=\"let element\">\r\n                <button type=\"button\" class=\"btn btn-primary\" (click)=\"handleEditClick(element._key)\">\r\n                  Edit\r\n                </button>\r\n              </mat-cell>\r\n            </ng-container>\r\n\r\n            <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n            <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n          </mat-table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n\r\n  <!-- <table class=\"table table-striped\">\r\n  <thead>\r\n    <tr>\r\n      <th scope=\"col\">Name</th>\r\n      <th scope=\"col\">Email</th>\r\n      <th scope=\"col\">Stats #</th>\r\n      <th scope=\"col\"></th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr *ngFor=\"let user of users; index as i\">\r\n      <td>{{ user.fullname }}</td>\r\n      <td>{{ user.email }}</td>\r\n      <td>{{ user.tags.length }}</td>\r\n      <td>\r\n        <button type=\"button\" \r\n          class=\"btn btn-primary\"\r\n          (click)=\"handleEditClick(user._key)\" >\r\n          Edit\r\n        </button>\r\n      </td>\r\n    </tr>\r\n  </tbody>\r\n</table> -->","import { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { AbstractControl } from '@angular/forms';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HelperService {\r\n\r\n  constructor(\r\n  ) { }\r\n\r\n  static passwordConfirming(c: AbstractControl): { invalid: boolean } {\r\n    if (c.get('password').value !== c.get('passwordConfirm').value) {\r\n      return { invalid: true };\r\n    }\r\n  }\r\n\r\n}\r\n"]}