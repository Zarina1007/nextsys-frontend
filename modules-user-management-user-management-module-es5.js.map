{"version":3,"sources":["webpack:///node_modules/ng-validate-equal/__ivy_ngcc__/fesm2015/ng-validate-equal.js","webpack:///src/app/modules/tag-management/tag-management.service.ts","webpack:///src/app/modules/user-management/admins/admins.component.ts","webpack:///src/app/modules/user-management/admins/admins.component.html","webpack:///src/app/modules/user-management/advertisers/advertisers.component.ts","webpack:///src/app/modules/user-management/advertisers/advertisers.component.html","webpack:///src/app/modules/user-management/edit-users/add-company/add-company.component.ts","webpack:///src/app/modules/user-management/edit-users/add-company/add-company.component.html","webpack:///src/app/modules/user-management/edit-users/add-tag/add-tag.component.ts","webpack:///src/app/modules/user-management/edit-users/add-tag/add-tag.component.html","webpack:///src/app/modules/user-management/edit-users/edit-users.component.html","webpack:///src/app/modules/user-management/edit-users/edit-users.component.ts","webpack:///src/app/modules/user-management/edit-users/user-password-reset/user-password-reset.component.ts","webpack:///src/app/modules/user-management/edit-users/user-password-reset/user-password-reset.component.html","webpack:///src/app/modules/user-management/new-admin/new-admin.component.ts","webpack:///src/app/modules/user-management/new-admin/new-admin.component.html","webpack:///src/app/modules/user-management/new-advertiser/new-advertiser.component.ts","webpack:///src/app/modules/user-management/new-advertiser/new-advertiser.component.html","webpack:///src/app/modules/user-management/new-superadmin/new-superadmin.component.ts","webpack:///src/app/modules/user-management/new-superadmin/new-superadmin.component.html","webpack:///src/app/modules/user-management/new-user/new-user.component.ts","webpack:///src/app/modules/user-management/new-user/new-user.component.html","webpack:///src/app/modules/user-management/roles/permission/permission.component.ts","webpack:///src/app/modules/user-management/roles/permission/permission.component.html","webpack:///src/app/modules/user-management/roles/roles.component.ts","webpack:///src/app/modules/user-management/roles/roles.component.html","webpack:///src/app/modules/user-management/superadmins/superadmins.component.ts","webpack:///src/app/modules/user-management/superadmins/superadmins.component.html","webpack:///src/app/modules/user-management/user-management-routing.module.ts","webpack:///src/app/modules/user-management/user-management.component.ts","webpack:///src/app/modules/user-management/user-management.component.html","webpack:///src/app/modules/user-management/user-management.module.ts","webpack:///src/app/modules/user-management/user-management.service.ts","webpack:///src/app/modules/user-management/users/users.component.ts","webpack:///src/app/modules/user-management/users/users.component.html","webpack:///src/app/shared/service/helper.service.ts"],"names":["ValidateEqualDirective_1","ValidateEqualDirective","otherControl","valueChangesSub","unsubscribe","selfControl","selfControlValue","value","root","get","valueChanges","subscribe","otherControlValue","isEqual","touched","dirty","setErrors","notEqual","hasError","errors","Object","keys","length","val1","val2","unifyEmptyStrings","val","isDefined","defaultUndefined","ɵfac","ValidateEqualDirective_Factory","t","ɵdir","type","selectors","features","provide","useExisting","multi","ctorParameters","String","decorators","args","ValidateEqualModule","ɵmod","ɵinj","factory","ValidateEqualModule_Factory","imports","selector","providers","ngJitMode","declarations","exports","TagManagementService","tagsService","getChrome","getFirefox","tag","add","getAllTags","companyKey","getCompanyTags","tagKey","deleteTag","getOneTag","updateOneTag","template","addTemplate","getAllTemplates","templateKey","deleteTemplate","getOneTemplate","providedIn","AdminsComponent","usersServie","cdr","router","route","userService","_snackBarService","notification","displayedColumns","admins","hidden","companyUser","subscritions","localStorageCompany","getSelectedCompanyFromLocalStorage","showError","push","getAdminAll","data","originalData","filter","userData","companies","includes","detectChanges","userId","navigateByUrl","id","window","confirm","deleteUser","res","info","event","checked","templateUrl","styleUrls","AdvertisersComponent","advertisers","getAdvertiserAll","AddCompanyComponent","companyService","dialogRef","loadingIndicator","user","userCompanies","getAllCompanies","response","console","log","allCompanies","close","save","AddTagComponent","tagService","tagManagementService","reportProviderData","allTags","companySelected","getSelectedCompanyLocalStorage","userTags","tagsId","target","forEach","x","every","p","tempTags","currentCompanyTag","current","company","map","_id","tagName","name","publisher","advertiser","userNewTags","checkAllCheckBox","handleSubmit","EditUsersComponent","userManagementService","authService","sS","modalService","snackBarService","dialog","userProfileFG","fullname","required","email","role","snapshot","params","getUserData","currentUserSubject","getUser","toPromise","getUserCompanies","getUserTags","patchValue","$event","valid","updateUser","modalRef","open","size","componentInstance","_key","result","then","c","tagdialog","height","width","afterClosed","openPasswordResetDialog","updateUserProfile","openAddTagDialog","openAddCompanyDialog","UserPasswordResetComponent","activeModal","fb","passwordFG","group","password","passwordConfirm","validator","passwordConfirming","markAllAsTouched","resetPassword","NewAdminComponent","cPassword","MatchPassword","addNewUser","userName","reset","formGroupDirective","resetForm","error","NewAdvertiserComponent","NewSuperadminComponent","NewUserComponent","PermissionComponent","snackService","allChecked","isIndeterminate","notifications","protectedMedia","googleMaterial","dashboard","eCommerce","liveTraffic","ngBootstrap","layoutBuilder","userManage","companyManage","tagManage","reportManage","apiDocumentationManage","publisherReportingManage","i","getOnePermission","permission","permissionFG","ob","updateOnePermission","err","statusText","onIndeterminateChange","onChkChange","onChildChkChange","ELEMENT_DATA","position","RolesComponent","dataSource","roleKey","SuperadminsComponent","superadmins","getSuperAdminAll","routes","path","component","children","pathMatch","redirectTo","UserManagementRoutingModule","forChild","UserManagementComponent","UserManagementModule","forRoot","entryComponents","UserManagementService","usersService","getAll","addUser","UsersComponent","users","getPublisherAll","showWarning","HelperService","invalid"],"mappings":"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","file":"modules-user-management-user-management-module-es5.js","sourcesContent":["import { __decorate, __param } from 'tslib';\r\nimport { Attribute, Directive, forwardRef, NgModule } from '@angular/core';\r\nimport { NG_VALIDATORS } from '@angular/forms';\r\n\r\nimport * as ɵngcc0 from '@angular/core';\nvar ValidateEqualDirective_1;\r\nlet ValidateEqualDirective = ValidateEqualDirective_1 = class ValidateEqualDirective {\r\n    constructor(otherControl) {\r\n        this.otherControl = otherControl;\r\n    }\r\n    ngOnDestroy() {\r\n        if (this.valueChangesSub) {\r\n            this.valueChangesSub.unsubscribe();\r\n        }\r\n    }\r\n    validate(selfControl) {\r\n        const selfControlValue = selfControl.value;\r\n        const otherControl = selfControl.root.get(this.otherControl);\r\n        if (this.valueChangesSub) {\r\n            this.valueChangesSub.unsubscribe();\r\n        }\r\n        // this code works when user types in other control putting the error in self control\r\n        this.valueChangesSub = otherControl.valueChanges.subscribe(otherControlValue => {\r\n            if (!this.isEqual(selfControlValue, otherControlValue) && (selfControl.touched || selfControl.dirty)) {\r\n                selfControl.setErrors({\r\n                    notEqual: true\r\n                });\r\n            }\r\n            else {\r\n                if (selfControl.hasError('notEqual')) {\r\n                    delete selfControl.errors['notEqual'];\r\n                    if (!Object.keys(selfControl.errors).length) {\r\n                        selfControl.setErrors(null);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        // this code works when the user types in self control putting the error in self control\r\n        if (!this.isEqual(selfControlValue, otherControl.value) && (selfControl.touched || selfControl.dirty)) {\r\n            return {\r\n                notEqual: true\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n    isEqual(val1, val2) {\r\n        val1 = this.unifyEmptyStrings(val1);\r\n        val2 = this.unifyEmptyStrings(val2);\r\n        return val1 === val2;\r\n    }\r\n    unifyEmptyStrings(val) {\r\n        const isDefined = this.isDefined;\r\n        if (val === null || !isDefined(val)) {\r\n            val = '';\r\n        }\r\n        return val;\r\n    }\r\n    isDefined(value) {\r\n        const defaultUndefined = void (0);\r\n        return value !== defaultUndefined;\r\n    }\r\n};\nValidateEqualDirective.ɵfac = function ValidateEqualDirective_Factory(t) { return new (t || ValidateEqualDirective)(ɵngcc0.ɵɵinjectAttribute('ngValidateEqual')); };\nValidateEqualDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ValidateEqualDirective, selectors: [[\"\", \"ngValidateEqual\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: NG_VALIDATORS, useExisting: forwardRef(() => ValidateEqualDirective_1), multi: true }\n        ])] });\r\nValidateEqualDirective.ctorParameters = () => [\r\n    { type: String, decorators: [{ type: Attribute, args: ['ngValidateEqual',] }] }\r\n];\r\nValidateEqualDirective = ValidateEqualDirective_1 = __decorate([ __param(0, Attribute('ngValidateEqual'))\r\n], ValidateEqualDirective);\r\n\r\nlet ValidateEqualModule = class ValidateEqualModule {\r\n};\nValidateEqualModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ValidateEqualModule });\nValidateEqualModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ValidateEqualModule_Factory(t) { return new (t || ValidateEqualModule)(); }, imports: [[]] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ValidateEqualDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[ngValidateEqual]',\n                providers: [\n                    { provide: NG_VALIDATORS, useExisting: forwardRef(() => ValidateEqualDirective_1), multi: true }\n                ]\n            }]\n    }], function () { return [{ type: String, decorators: [{\n                type: Attribute,\n                args: ['ngValidateEqual']\n            }] }]; }, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ValidateEqualModule, { declarations: [ValidateEqualDirective], exports: [ValidateEqualDirective] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ValidateEqualModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [ValidateEqualDirective],\n                imports: [],\n                exports: [ValidateEqualDirective]\n            }]\n    }], null, null); })();\r\n\r\n/*\r\n * Public API Surface of ng-validate-equal\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { ValidateEqualDirective, ValidateEqualModule };\r\n\r\n\n//# sourceMappingURL=ng-validate-equal.js.map","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { TagsService } from './../../shared/service/tags.service';\r\nimport { TagInterface } from './../../shared/models/tag.interface';\r\nimport { TemplateInterface } from './../../shared/models/template.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TagManagementService {\r\n\r\n  constructor(\r\n    private tagsService: TagsService,\r\n  ) { }\r\n\r\n  // Get all Chrome objects\r\n  getChromeBrowserVersion() {\r\n    return this.tagsService.getChrome();\r\n  }\r\n  // Get all Chrome objects\r\n  getFirefoxBrowserVersion() {\r\n    return this.tagsService.getFirefox();\r\n  }\r\n  addTag(tag: TagInterface): Observable<TagInterface> {\r\n    return this.tagsService.add(tag);\r\n  }\r\n  getAllTags(): Observable<TagInterface[]> {\r\n    return this.tagsService.getAllTags();\r\n  }\r\n  getCompanyTags(companyKey: any) {\r\n    return this.tagsService.getCompanyTags(companyKey);\r\n  }\r\n  \r\n  deleteTag(tagKey: any) {\r\n    return this.tagsService.deleteTag(tagKey);\r\n  }\r\n\r\n  getOneTag(tag: TagInterface): Observable<TagInterface> {\r\n    return this.tagsService.getOneTag(tag);\r\n  }\r\n  updateOneTag(tag: TagInterface): Observable<TagInterface> {\r\n    return this.tagsService.updateOneTag(tag);\r\n  }\r\n  addTemplate(template: TemplateInterface): Observable<TemplateInterface> {\r\n    return this.tagsService.addTemplate(template);\r\n  }\r\n  getAllTemplates(): Observable<TagInterface[]> {\r\n    return this.tagsService.getAllTemplates();\r\n  }\r\n  deleteTemplate(templateKey: any) {\r\n    return this.tagsService.deleteTemplate(templateKey);\r\n  }\r\n  getOneTemplate(template: TemplateInterface): Observable<TemplateInterface> {\r\n    return this.tagsService.getOneTemplate(template);\r\n  }\r\n}\r\n","import { Router, ActivatedRoute } from '@angular/router';\r\nimport { Component, OnInit, ChangeDetectorRef } from '@angular/core';\r\nimport { UsersService } from '../../../shared/service/users.service'\r\nimport { Subscription } from 'rxjs';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { UserInterface } from './../../../shared/models/user.interface';\r\nimport { SnackbarService } from 'src/app/shared/service/snackbar.service';\r\nimport { NotificationService } from 'src/app/shared/service/notification.service';\r\n\r\n@Component({\r\n  selector: 'app-admins',\r\n  templateUrl: './admins.component.html',\r\n  styleUrls: ['./admins.component.scss']\r\n})\r\nexport class AdminsComponent implements OnInit {\r\n  displayedColumns = [\"fullname\", \"email\", \"companyname\", \"stat\", \"apiKey\", \"action\"];\r\n  admins = new MatTableDataSource<UserInterface>();\r\n  hidden = false;\r\n  //Local Storage Company\r\n  localStorageCompany: any;\r\n  companyUser = false;\r\n  originalData: any[];\r\n\r\n  private subscritions: Subscription[] = [];\r\n  constructor(\r\n    private usersServie: UsersService,\r\n    private cdr: ChangeDetectorRef,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private userService: UsersService,\r\n    private _snackBarService: SnackbarService,\r\n    private notification: NotificationService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.localStorageCompany = this.getSelectedCompanyFromLocalStorage();\r\n    //access page part\r\n    if (!this.localStorageCompany) {\r\n      this.hidden = true;\r\n      this.notification.showError(\"Please select your Company!\", \"\")\r\n    } else {\r\n      this.hidden = false;\r\n    }\r\n    this.subscritions.push(\r\n      this.usersServie.getAdminAll().subscribe(data => {\r\n        // console.log(data);\r\n        this.originalData = data;\r\n        if (this.localStorageCompany) {\r\n          this.admins.data = data.filter(userData => userData.companies.includes(this.localStorageCompany));\r\n        } else {\r\n          this.admins.data = data.filter(userData => userData.companies.length == 0);\r\n        }\r\n        this.cdr.detectChanges();\r\n      })\r\n    );\r\n  }\r\n  handleEditClick(userId: string): void {\r\n    this.router.navigateByUrl('/user-management/edit/' + userId);\r\n  }\r\n\r\n  //Gets the Selected Company from Local Storage\r\n  getSelectedCompanyFromLocalStorage() {\r\n    return this.userService.getSelectedCompanyFromLocalStorage();\r\n  }\r\n  handleAddProfile() {\r\n    this.router.navigateByUrl('/user-management/new-admin');\r\n  }\r\n  deleteAdmin(id: any) {\r\n    if (window.confirm('Do you want to go ahead?')) {\r\n      this.usersServie.deleteUser(id).subscribe((res) => {\r\n        this.usersServie.getAdminAll().subscribe(data => {\r\n          // console.log(data);\r\n          if (this.companyUser) {\r\n            this.admins.data = data;\r\n          } else {\r\n            if (this.localStorageCompany) {\r\n              this.admins.data = data.filter(userData => userData.companies.includes(this.localStorageCompany));\r\n            } else {\r\n              this.admins.data = data.filter(userData => userData.companies.length == 0);\r\n            }\r\n          }\r\n\r\n          this.cdr.detectChanges();\r\n        })\r\n        this._snackBarService.info('Deleted a User');\r\n      })\r\n    }\r\n  }\r\n  onChangeAdmin(event) {\r\n    this.companyUser = event.checked;\r\n    if (this.companyUser) {\r\n      this.admins.data = this.originalData;\r\n    } else {\r\n      if (this.localStorageCompany) {\r\n        this.admins.data = this.originalData.filter(userData => userData.companies.includes(this.localStorageCompany));\r\n      } else {\r\n        this.admins.data = this.originalData;\r\n      }\r\n    }\r\n\r\n  }\r\n}\r\n","<div class=\"row\" *ngIf=\"!hidden\">\r\n  <div class=\"col-xl-12\">\r\n    <div class=\"card card-custom example example-compact gutter-b\">\r\n      <div class=\"card-header\">\r\n        <div class=\"card-title\">\r\n          <h3 class=\"card-label\">Admins</h3>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <div class=\"pb-3\">\r\n          <div class=\"row\">\r\n            <div class=\"col-xl-6\">\r\n              <button type=\"button\" class=\"btn btn-sm btn-primary\" (click)=\"handleAddProfile()\">\r\n                Add Admin\r\n              </button>\r\n            </div>\r\n            <div class=\"col-xl-6 all-admin-user align-self-center d-flex\">\r\n              <mat-checkbox color=\"primary\" [(ngModel)]=\"companyUser\" (change)=\"onChangeAdmin($event)\">Display All\r\n                Admins</mat-checkbox>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"example-container mat-elevation-z8\">\r\n          <mat-table #table [dataSource]=\"admins\">\r\n            <ng-container matColumnDef=\"fullname\">\r\n              <mat-header-cell *matHeaderCellDef> Full Name </mat-header-cell>\r\n              <mat-cell *matCellDef=\"let element\"> {{element.fullname}} </mat-cell>\r\n            </ng-container>\r\n            <ng-container matColumnDef=\"email\">\r\n              <mat-header-cell *matHeaderCellDef> Email </mat-header-cell>\r\n              <mat-cell *matCellDef=\"let element\"> {{element.email}} </mat-cell>\r\n            </ng-container>\r\n            <ng-container matColumnDef=\"companyname\">\r\n              <mat-header-cell *matHeaderCellDef> Companies </mat-header-cell>\r\n              <mat-cell *matCellDef=\"let element\" [ngClass]=\"'font-weight-bold'\"> {{element.companyname}} </mat-cell>\r\n            </ng-container>\r\n            <ng-container matColumnDef=\"stat\">\r\n              <mat-header-cell *matHeaderCellDef> Stat# </mat-header-cell>\r\n              <mat-cell *matCellDef=\"let element\"> {{element.tags.length}} </mat-cell>\r\n            </ng-container>\r\n            <ng-container matColumnDef=\"apiKey\">\r\n              <mat-header-cell *matHeaderCellDef> ApiKey </mat-header-cell>\r\n              <mat-cell *matCellDef=\"let element\"> {{element.apiKey}} </mat-cell>\r\n            </ng-container>\r\n            <ng-container matColumnDef=\"action\">\r\n              <mat-header-cell *matHeaderCellDef> Action </mat-header-cell>\r\n              <mat-cell *matCellDef=\"let element\">\r\n                <a title=\"Edit Admin\" class=\"btn btn-icon btn-light btn-hover-primary btn-sm mx-3\"\r\n                  (click)=\"handleEditClick(element._key)\">\r\n                  <span [inlineSVG]=\"'./assets/media/svg/icons/Communication/Write.svg'\" cacheSVG=\"true\"\r\n                    class=\"svg-icon svg-icon-md svg-icon-primary\">\r\n                  </span>\r\n                </a>\r\n\r\n                <a title=\"Delete Admin\" class=\"btn btn-icon btn-light btn-hover-danger btn-sm\"\r\n                  (click)=\"deleteAdmin(element._key)\">\r\n                  <span [inlineSVG]=\"'./assets/media/svg/icons/General/Trash.svg'\" cacheSVG=\"false\"\r\n                    class=\"svg-icon svg-icon-md svg-icon-danger\">\r\n                  </span>\r\n                </a>\r\n              </mat-cell>\r\n            </ng-container>\r\n\r\n            <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n            <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n          </mat-table>\r\n          <div *ngIf=\"admins.data.length === 0\">\r\n            <p style=\"text-align: center;padding: 10px;\">No records found</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div *ngIf=\"hidden\" class=\"error error-3 d-flex flex-row-fluid bgi-size-cover bgi-position-center\" style=\"background-image: url('./assets/media/error/bg3.jpg'); height: 100%;zoom: 1;\r\n  display: block;\r\n  min-height: 80vh;\r\n  font-size: 14px;\r\n  line-height: 1.4;\r\n  color: #0e1724;\">\r\n  <!--begin::Content-->\r\n  <div class=\"px-10 px-md-30 py-10 py-md-0 d-flex flex-column justify-content-md-center\">\r\n    <p class=\"display-4 font-weight-boldest text-white mb-12\">\r\n      How did you get here\r\n    </p>\r\n    <p class=\"font-size-h1 font-weight-boldest text-dark-75\">\r\n      Sorry you can't access the page you're looking for.\r\n    </p>\r\n    <p class=\"font-size-h4 line-height-md\">\r\n      There may be a misspelling in the URL entered,<br />or the page you are\r\n      looking for may no longer exist.\r\n    </p>\r\n  </div>\r\n  <!--end::Content-->\r\n</div>\r\n<!-- end:: Error -->","import { Router, ActivatedRoute } from '@angular/router';\r\nimport { Component, OnInit, ChangeDetectorRef } from '@angular/core';\r\nimport { UsersService } from '../../../shared/service/users.service'\r\nimport { Subscription } from 'rxjs';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { UserInterface } from './../../../shared/models/user.interface';\r\nimport { SnackbarService } from 'src/app/shared/service/snackbar.service';\r\nimport { NotificationService } from 'src/app/shared/service/notification.service';\r\n\r\n@Component({\r\n  selector: 'app-advertisers',\r\n  templateUrl: './advertisers.component.html',\r\n  styleUrls: ['./advertisers.component.scss']\r\n})\r\nexport class AdvertisersComponent implements OnInit {\r\n  displayedColumns = [\"fullname\", \"email\", \"companyname\", \"stat\", \"apiKey\", \"action\"];\r\n  advertisers = new MatTableDataSource<UserInterface>();\r\n  hidden = false;\r\n  //Local Storage Company\r\n  localStorageCompany: any;\r\n  companyUser = false;\r\n  originalData: any[];\r\n\r\n  private subscritions: Subscription[] = [];\r\n  constructor(\r\n    private usersServie: UsersService,\r\n    private cdr: ChangeDetectorRef,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private userService: UsersService,\r\n    private _snackBarService: SnackbarService,\r\n    private notification: NotificationService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.localStorageCompany = this.getSelectedCompanyFromLocalStorage();\r\n    //access page part\r\n    if (!this.localStorageCompany) {\r\n      this.hidden = true;\r\n      this.notification.showError(\"Please select your Company!\", \"\")\r\n    } else {\r\n      this.hidden = false;\r\n    }\r\n    this.subscritions.push(\r\n      this.usersServie.getAdvertiserAll().subscribe(data => {\r\n        // console.log(data);\r\n        this.originalData = data;\r\n        if (this.localStorageCompany) {\r\n          this.advertisers.data = data.filter(userData => userData.companies.includes(this.localStorageCompany));\r\n        } else {\r\n          this.advertisers.data = data.filter(userData => userData.companies.length == 0);\r\n        }\r\n\r\n        this.cdr.detectChanges();\r\n      })\r\n    );\r\n  }\r\n  handleEditClick(userId: string): void {\r\n    this.router.navigateByUrl('/user-management/edit/' + userId);\r\n  }\r\n  //Gets the Selected Company from Local Storage\r\n  getSelectedCompanyFromLocalStorage() {\r\n    return this.userService.getSelectedCompanyFromLocalStorage();\r\n  }\r\n  handleAddProfile() {\r\n    this.router.navigateByUrl('/user-management/new-advertiser');\r\n  }\r\n  deleteAdvertiser(id: any) {\r\n    if (window.confirm('Do you want to go ahead?')) {\r\n      this.usersServie.deleteUser(id).subscribe((res) => {\r\n        this.usersServie.getAdvertiserAll().subscribe(data => {\r\n          // console.log(data);\r\n          if (this.companyUser) {\r\n            this.advertisers.data = data;\r\n          } else {\r\n            if (this.localStorageCompany) {\r\n              this.advertisers.data = data.filter(userData => userData.companies.includes(this.localStorageCompany));\r\n            } else {\r\n              this.advertisers.data = data.filter(userData => userData.companies.length == 0);\r\n            }\r\n          }\r\n\r\n          this.cdr.detectChanges();\r\n        })\r\n        this._snackBarService.info('Deleted a User');\r\n      })\r\n    }\r\n  }\r\n  onChangeAdvertiser(event) {\r\n    this.companyUser = event.checked;\r\n    if (this.companyUser) {\r\n      this.advertisers.data = this.originalData;\r\n    } else {\r\n      if (this.localStorageCompany) {\r\n        this.advertisers.data = this.originalData.filter(userData => userData.companies.includes(this.localStorageCompany));\r\n      } else {\r\n        this.advertisers.data = this.originalData;\r\n      }\r\n    }\r\n\r\n  }\r\n}\r\n","<div class=\"row\" *ngIf=\"!hidden\">\r\n  <div class=\"col-xl-12\">\r\n    <div class=\"card card-custom example example-compact gutter-b\">\r\n      <div class=\"card-header\">\r\n        <div class=\"card-title\">\r\n          <h3 class=\"card-label\">Advertiser Users</h3>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <div class=\"pb-3\">\r\n          <div class=\"row\">\r\n            <div class=\"col-xl-6\">\r\n              <button type=\"button\" class=\"btn btn-sm btn-primary\" (click)=\"handleAddProfile()\">\r\n                Add Advertiser\r\n              </button>\r\n            </div>\r\n            <div class=\"col-xl-6 all-advertiser-user align-self-center d-flex\">\r\n              <mat-checkbox color=\"primary\" [(ngModel)]=\"companyUser\" (change)=\"onChangeAdvertiser($event)\">Display All\r\n                Advertisers</mat-checkbox>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"example-container mat-elevation-z8\">\r\n          <mat-table #table [dataSource]=\"advertisers\">\r\n            <ng-container matColumnDef=\"fullname\">\r\n              <mat-header-cell *matHeaderCellDef> Full Name </mat-header-cell>\r\n              <mat-cell *matCellDef=\"let element\"> {{element.fullname}} </mat-cell>\r\n            </ng-container>\r\n            <ng-container matColumnDef=\"email\">\r\n              <mat-header-cell *matHeaderCellDef> Email </mat-header-cell>\r\n              <mat-cell *matCellDef=\"let element\"> {{element.email}} </mat-cell>\r\n            </ng-container>\r\n            <ng-container matColumnDef=\"companyname\">\r\n              <mat-header-cell *matHeaderCellDef> Companies </mat-header-cell>\r\n              <mat-cell *matCellDef=\"let element\" [ngClass]=\"'font-weight-bold'\"> {{element.companyname}} </mat-cell>\r\n            </ng-container>\r\n            <ng-container matColumnDef=\"stat\">\r\n              <mat-header-cell *matHeaderCellDef> Stat# </mat-header-cell>\r\n              <mat-cell *matCellDef=\"let element\"> {{element.tags.length}} </mat-cell>\r\n            </ng-container>\r\n            <ng-container matColumnDef=\"apiKey\">\r\n              <mat-header-cell *matHeaderCellDef> ApiKey </mat-header-cell>\r\n              <mat-cell *matCellDef=\"let element\"> {{element.apiKey}} </mat-cell>\r\n            </ng-container>\r\n            <ng-container matColumnDef=\"action\">\r\n              <mat-header-cell *matHeaderCellDef> Action </mat-header-cell>\r\n              <mat-cell *matCellDef=\"let element\">\r\n                <a title=\"Edit Advertiser\" class=\"btn btn-icon btn-light btn-hover-primary btn-sm mx-3\"\r\n                  (click)=\"handleEditClick(element._key)\">\r\n                  <span [inlineSVG]=\"'./assets/media/svg/icons/Communication/Write.svg'\" cacheSVG=\"true\"\r\n                    class=\"svg-icon svg-icon-md svg-icon-primary\">\r\n                  </span>\r\n                </a>\r\n\r\n                <a title=\"Delete Advertiser\" class=\"btn btn-icon btn-light btn-hover-danger btn-sm\"\r\n                  (click)=\"deleteAdvertiser(element._key)\">\r\n                  <span [inlineSVG]=\"'./assets/media/svg/icons/General/Trash.svg'\" cacheSVG=\"false\"\r\n                    class=\"svg-icon svg-icon-md svg-icon-danger\">\r\n                  </span>\r\n                </a>\r\n\r\n              </mat-cell>\r\n            </ng-container>\r\n\r\n            <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n            <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n          </mat-table>\r\n          <div *ngIf=\"advertisers.data.length === 0\">\r\n            <p style=\"text-align: center;padding: 10px;\">No records found</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div *ngIf=\"hidden\" class=\"error error-3 d-flex flex-row-fluid bgi-size-cover bgi-position-center\" style=\"background-image: url('./assets/media/error/bg3.jpg'); height: 100%;zoom: 1;\r\n  display: block;\r\n  min-height: 80vh;\r\n  font-size: 14px;\r\n  line-height: 1.4;\r\n  color: #0e1724;\">\r\n  <!--begin::Content-->\r\n  <div class=\"px-10 px-md-30 py-10 py-md-0 d-flex flex-column justify-content-md-center\">\r\n    <p class=\"display-4 font-weight-boldest text-white mb-12\">\r\n      How did you get here\r\n    </p>\r\n    <p class=\"font-size-h1 font-weight-boldest text-dark-75\">\r\n      Sorry you can't access the page you're looking for.\r\n    </p>\r\n    <p class=\"font-size-h4 line-height-md\">\r\n      There may be a misspelling in the URL entered,<br />or the page you are\r\n      looking for may no longer exist.\r\n    </p>\r\n  </div>\r\n  <!--end::Content-->\r\n</div>\r\n<!-- end:: Error -->","import { ChangeDetectorRef, Inject } from '@angular/core';\r\nimport { Component, OnInit, Input } from '@angular/core';\r\nimport { CompanyService } from 'src/app/shared/service/companies.service';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { UserInterface } from 'src/app/shared/models/user.interface';\r\n\r\n@Component({\r\n  selector: 'app-add-company',\r\n  templateUrl: './add-company.component.html',\r\n  styleUrls: ['./add-company.component.scss'],\r\n})\r\nexport class AddCompanyComponent implements OnInit {\r\n  //Variable for loading indicator\r\n  loadingIndicator = true;\r\n\r\n  //Variable for current user\r\n  user: UserInterface;\r\n\r\n  //Variable for current companies saved on user account\r\n  userCompanies: string[];\r\n\r\n  //Variable for ALL Companies avaiablable\r\n  allCompanies: any;\r\n\r\n  constructor(\r\n    private companyService: CompanyService,\r\n    private cdr: ChangeDetectorRef,\r\n    public dialogRef: MatDialogRef<AddCompanyComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    //Sets current user to data input variable\r\n    this.user = this.data;\r\n\r\n    //Sets userCompanies to user's current companies\r\n    this.userCompanies = this.user.companies;\r\n\r\n    //Gets ALL companies available\r\n    this.getAllCompanies();\r\n  }\r\n\r\n  /**\r\n   * getAllCompanies()\r\n   * * Gets all companies available from companyService method.\r\n   * * @param NONE\r\n   */\r\n  getAllCompanies() {\r\n    this.companyService.getAllCompanies().subscribe((response) => {\r\n      console.log(response);\r\n      this.loadingIndicator = false;\r\n      this.allCompanies = response;\r\n      this.cdr.detectChanges();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * save()\r\n   * * Saves added or removed companies to the user's profile\r\n   * TODO: TBD\r\n   * @param NONE\r\n   */\r\n  save() {\r\n    this.user.companies = [...this.userCompanies];\r\n    this.dialogRef.close({ user: this.user });\r\n  }\r\n\r\n  /**\r\n   * close()\r\n   * * Closes the dialog and does not make any changes.\r\n   *\r\n   */\r\n  close() {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","<mat-dialog-content class=\"mat-typography\">\r\n  <div class=\"row\">\r\n    <!-- STARTING UPDATE PROFILE-->\r\n    <div class=\"col-xl-12\">\r\n      <div class=\"card card-custom example example-compact gutter-b\">\r\n        <div class=\"card-header\">\r\n          <div class=\"card-title\">\r\n            <h3 class=\"card-label\">Add or Remove Companies</h3>\r\n          </div>\r\n        </div>\r\n        <div class=\"card-body\">\r\n          <div class=\"row\">\r\n            <div class=\"col-xl-12\">\r\n              <mat-selection-list\r\n                color=\"primary\"\r\n                #company\r\n                [(ngModel)]=\"userCompanies\"\r\n              >\r\n                <mat-list-option\r\n                  *ngFor=\"let company of allCompanies\"\r\n                  [value]=\"company._id\"\r\n                >\r\n                  {{ company.name }}\r\n                </mat-list-option>\r\n              </mat-selection-list>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</mat-dialog-content>\r\n<div class=\"row buttons\">\r\n  <div class=\"col-md-6\">\r\n    <button\r\n      class=\"save-button\"\r\n      mat-raised-button\r\n      color=\"secondary\"\r\n      (click)=\"close()\"\r\n    >\r\n      Cancel\r\n    </button>\r\n  </div>\r\n  <div class=\"col-md-6\">\r\n    <button\r\n      class=\"back-button\"\r\n      mat-raised-button\r\n      color=\"primary\"\r\n      (click)=\"save()\"\r\n    >\r\n      Save\r\n    </button>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit, ChangeDetectorRef, Inject } from '@angular/core';\r\nimport { UserInterface } from 'src/app/shared/models/user.interface';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { UsersService } from 'src/app/shared/service/users.service';\r\nimport { TagsService } from 'src/app/shared/service/tags.service';\r\nimport { TagManagementService } from 'src/app/modules/tag-management/tag-management.service';\r\n\r\n@Component({\r\n  selector: 'app-add-tag',\r\n  templateUrl: './add-tag.component.html',\r\n  styleUrls: ['./add-tag.component.scss']\r\n})\r\nexport class AddTagComponent implements OnInit {\r\n  //Variable for loading indicator\r\n  loadingIndicator = true;\r\n\r\n  //Variable for current user\r\n  user: UserInterface;\r\n  companySelected: any;\r\n  userTags: string[];\r\n  reportProviderData: any = [];\r\n  allTags: any = [];\r\n\r\n  constructor(\r\n    private tagService: TagsService,\r\n    private cdr: ChangeDetectorRef,\r\n    public dialogRef: MatDialogRef<AddTagComponent>,\r\n    private userService: UsersService,\r\n    private tagManagementService: TagManagementService,\r\n    @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) { \r\n    this.companySelected = this.getSelectedCompanyLocalStorage();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    //Sets current user to data input variable\r\n    this.user = this.data;\r\n    //Sets userAdvertisers to user's current tags\r\n    this.userTags = this.user.tagsId;\r\n\r\n    //Gets ALL companies available\r\n    this.getAllTags();\r\n    //this.getReportingProviderList();\r\n  }\r\n  //Gets the Selected Company from Local Storage\r\n  getSelectedCompanyLocalStorage() {\r\n    return this.userService.getSelectedCompanyFromLocalStorage();\r\n  }\r\n\r\n  checkAllCheckBox(event: any) {\r\n    console.log(event.target.checked)\r\n    this.allTags.forEach((x: { checked: any; }) => x.checked = event.target.checked);\r\n  }\r\n\r\n  isAllCheckBoxChecked() {\r\n    return this.allTags.every(p => p.checked);\r\n  }\r\n\r\n  //get report Provider List\r\n  // getReportingProviderList() {\r\n  //   if (this.companySelected) {\r\n  //     this.tagService.getTagUserAdvertiser(this.user._key).subscribe(res => {\r\n  //       for (var resAdvertiser of res) {\r\n  //         this.reportProviderData.push({\r\n  //           value: resAdvertiser.advertiser,\r\n  //           viewValue: resAdvertiser.advertiser,\r\n  //         })\r\n  //       }\r\n  //       this.cdr.detectChanges();\r\n  //     });\r\n  //   }\r\n  // }\r\n\r\n  getAllTags() {\r\n    this.tagManagementService.getAllTags().subscribe((response) => {\r\n      this.loadingIndicator = false;\r\n      let tempTags = [];\r\n      let currentCompanyTag = response.filter(current => current.company[0][\"_id\"] == this.companySelected);\r\n      currentCompanyTag.map(res => {\r\n        tempTags.push({\r\n          _id: res._id,\r\n          tagName: res.name,\r\n          publisher: res.publisher[0][\"fullname\"],\r\n          advertiser: res.advertiser,\r\n          checked: this.userTags.includes(res._id)\r\n        })\r\n      })\r\n      this.allTags = tempTags;\r\n      this.cdr.detectChanges();\r\n    });\r\n  }\r\n  handleSubmit(): void {\r\n    let userNewTags = [];\r\n    this.allTags.map(data => {\r\n      if (data.checked) {\r\n        userNewTags.push(data._id);\r\n      }\r\n    });\r\n    this.userTags = userNewTags;\r\n    this.user.tagsId = [...this.userTags];\r\n    this.dialogRef.close({ user: this.user });\r\n  }\r\n\r\n  close() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n","<mat-dialog-content class=\"mat-typography\">\r\n  <div class=\"row\">\r\n    <!-- STARTING UPDATE Tag-->\r\n    <div class=\"col-xl-12\">\r\n      <div class=\"card card-custom example example-compact gutter-b\">\r\n        <div class=\"card-header\">\r\n          <div class=\"card-title\">\r\n            <h3 class=\"card-label\">Add or Remove Tags</h3>\r\n          </div>\r\n        </div>\r\n        <div class=\"card-body\">\r\n          <div class=\"row\">\r\n            <div class=\"col-xl-12\">\r\n              <table class=\"table table-bordered\">\r\n                <thead>\r\n                  <tr>\r\n                    <th><input type=\"checkbox\" [checked]=\"isAllCheckBoxChecked()\" (change)=\"checkAllCheckBox($event)\"></th>\r\n                    <th>Tag Name</th>\r\n                    <th>Publisher</th>\r\n                    <th>Advertiser</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr *ngFor=\"let tag of allTags; let i=index;\">\r\n                    <td><input type=\"checkbox\" value=\"{{tag._id}}\" [(ngModel)]=\"tag.checked\"></td>\r\n                    <td>{{ tag.tagName }}</td>\r\n                    <td>{{ tag.publisher }}</td>\r\n                    <td>{{ tag.advertiser }}</td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n              <!-- <mat-selection-list color=\"primary\" #advertiser [(ngModel)]=\"userTags\">\r\n                <mat-list-option *ngFor=\"let tag of allTags\" [value]=\"tag._id\">\r\n                  {{ tag.name }}\r\n                </mat-list-option>\r\n              </mat-selection-list> -->\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</mat-dialog-content>\r\n<div class=\"row buttons\">\r\n  <div class=\"col-md-6\">\r\n    <button class=\"save-button\" mat-raised-button color=\"secondary\" (click)=\"close()\">\r\n      Cancel\r\n    </button>\r\n  </div>\r\n  <div class=\"col-md-6\">\r\n    <button class=\"back-button\" mat-raised-button color=\"primary\" (click)=\"handleSubmit()\">\r\n      Save\r\n    </button>\r\n  </div>\r\n</div>","<div class=\"row\">\r\n  <!-- STARTING UPDATE PROFILE-->\r\n  <div class=\"col-xl-6\">\r\n    <div class=\"card card-custom example example-compact gutter-b\">\r\n      <div class=\"card-header\">\r\n        <div class=\"card-title\">\r\n          <h3 class=\"card-label\">Update Profile</h3>\r\n          <button mat-button color=\"primary\" type=\"button\" (click)=\"openPasswordResetDialog()\">\r\n            Reset Password\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <form class=\"example-container\" [formGroup]=\"userProfileFG\" (submit)=\"updateUserProfile($event)\">\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n              <mat-form-field>\r\n                <input matInput formControlName=\"fullname\" placeholder=\"Full Name\" />\r\n                <mat-error *ngIf=\"userProfileFG.get('fullname').errors?.required\">Name is required</mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n              <mat-form-field>\r\n                <input matInput formControlName=\"email\" placeholder=\"Email\" />\r\n                <mat-error *ngIf=\"userProfileFG.get('email').errors?.email\">Email is not valid</mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n              <mat-form-field>\r\n                <mat-select formControlName=\"role\" placeholder=\"Role\">\r\n                  <mat-option [value]=\"1\">Super Admin</mat-option>\r\n                  <mat-option [value]=\"2\">Admin</mat-option>\r\n                  <mat-option [value]=\"3\">Publisher</mat-option>\r\n                  <mat-option [value]=\"4\">Advertiser</mat-option>\r\n                </mat-select>\r\n                <mat-error *ngIf=\"userProfileFG.get('role').errors?.required\">Role is not valid</mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div class=\"row updateProfile\">\r\n            <div class=\"col-md-12\">\r\n              <button mat-raised-button color=\"primary\" type=\"submit\">\r\n                Update Profile\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- STARTING UPDATING TAGS -->\r\n  <div class=\"col-xl-6\">\r\n    <div class=\"card card-custom example example-compact gutter-b\">\r\n      <div class=\"card-header\">\r\n        <div class=\"card-title\">\r\n          <h3 class=\"card-label\">Tags</h3>\r\n          <button mat-button color=\"primary\" (click)=\"openAddTagDialog()\">\r\n            Add or Remove\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <div class=\"row\">\r\n          <div class=\"col-xl-12\">\r\n            <mat-list *ngIf=\"user\" #tag>\r\n              <mat-list-item *ngFor=\"let tag of userTags\">\r\n                <div style=\"display: flex;justify-content: space-between;width: 100%;\">\r\n                  <div> {{tag.name}} </div>\r\n                  <div> {{tag._key}} </div>\r\n                </div>\r\n                <mat-divider></mat-divider>\r\n              </mat-list-item>\r\n            </mat-list>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- STARTING UPDATE COMPANIES -->\r\n<div class=\"row\">\r\n  <div class=\"col-xl-6\">\r\n    <div class=\"card card-custom example example-compact gutter-b\">\r\n      <div class=\"card-header\">\r\n        <div class=\"card-title\">\r\n          <h3 class=\"card-label\">Companies</h3>\r\n          <button mat-button color=\"primary\" (click)=\"openAddCompanyDialog()\">\r\n            Add or Remove\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <div class=\"row\">\r\n          <div class=\"col-xl-12\">\r\n            <mat-list *ngIf=\"user\" #company>\r\n              <mat-list-item *ngFor=\"let company of userCompanies\">\r\n                {{ company.name }}\r\n                <mat-divider></mat-divider>\r\n              </mat-list-item>\r\n            </mat-list>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>","import { ActivatedRoute } from '@angular/router';\r\nimport { TagInterface } from './../../../shared/models/tag.interface';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { AuthService } from '../../auth/_services/auth.service';\r\nimport { UserManagementService } from '../user-management.service';\r\nimport { UserInterface } from 'src/app/shared/models/user.interface';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { UserPasswordResetComponent } from './user-password-reset/user-password-reset.component';\r\nimport { SnackbarService } from 'src/app/shared/service/snackbar.service';\r\nimport { AddTagComponent } from './add-tag/add-tag.component';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { CompanyInterface } from 'src/app/shared/models/company.interface';\r\nimport { AddCompanyComponent } from './add-company/add-company.component';\r\nimport { CompanyService } from 'src/app/shared/service/companies.service';\r\nimport { TagsService } from 'src/app/shared/service/tags.service';\r\n\r\nimport {\r\n  MatDialog,\r\n  MatDialogRef,\r\n  MAT_DIALOG_DATA,\r\n} from '@angular/material/dialog';\r\nimport { toJSDate } from '@ng-bootstrap/ng-bootstrap/datepicker/ngb-calendar';\r\n\r\n@Component({\r\n  selector: 'app-edit-users',\r\n  templateUrl: './edit-users.component.html',\r\n  styleUrls: ['./edit-users.component.scss'],\r\n})\r\nexport class EditUsersComponent implements OnInit {\r\n  userProfileFG: FormGroup;\r\n  rows: Array<CompanyInterface>;\r\n\r\n  //All User Data\r\n  user: UserInterface;\r\n\r\n  //All User Data\r\n  userCompanies: Array<CompanyInterface>;\r\n\r\n  userTags: any;\r\n\r\n  constructor(\r\n    private userManagementService: UserManagementService,\r\n    private authService: AuthService,\r\n    private route: ActivatedRoute,\r\n    private sS: SnackbarService,\r\n    private modalService: NgbModal,\r\n    private companyService: CompanyService,\r\n    private tagService: TagsService,\r\n    private snackBarService: SnackbarService,\r\n    public dialog: MatDialog\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.userProfileFG = new FormGroup({\r\n      fullname: new FormControl('', Validators.required),\r\n      email: new FormControl('', [Validators.required, Validators.email]),\r\n      role: new FormControl('', Validators.required),\r\n    });\r\n\r\n    if (this.route.snapshot.params.id) {\r\n      this.getUserData(this.route.snapshot.params.id);\r\n      // await this.getUserCompanies(this.user.companies);\r\n    } else {\r\n      this.user = this.authService.currentUserSubject.value as any;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * getUserData(id)\r\n   * @param id: User _key value\r\n   */\r\n  async getUserData(id: string) {\r\n    //Pulls the specific USER from the database.\r\n    this.user = await this.userManagementService.getUser(id).toPromise();\r\n    //If user has companies on their account\r\n    if (this.user.companies.length) {\r\n      this.userCompanies = await this.companyService\r\n        .getUserCompanies(this.user.companies)\r\n        .toPromise();\r\n    }\r\n\r\n    if (this.user.tagsId) {\r\n      this.userTags = await this.tagService\r\n        .getUserTags(this.user.tagsId)\r\n        .toPromise();\r\n    }\r\n\r\n    //Patches value into FormGroup\r\n    this.userProfileFG.patchValue(this.user);\r\n  }\r\n\r\n  updateUserProfile($event: any): void {\r\n    if (this.userProfileFG.valid) {\r\n      this.user = { ...this.user, ...this.userProfileFG.value };\r\n      this.userManagementService.updateUser(this.user).subscribe((x) => {\r\n        this.sS.info('user profile updated');\r\n      });\r\n    }\r\n  }\r\n\r\n  openPasswordResetDialog() {\r\n    const modalRef = this.modalService.open(UserPasswordResetComponent, {\r\n      size: 'md',\r\n    });\r\n    modalRef.componentInstance.data = {\r\n      id: this.user._key,\r\n    };\r\n    modalRef.result.then((c) => { });\r\n  }\r\n\r\n  openAddTagDialog() {\r\n    let tagdialog = this.dialog\r\n      .open(AddTagComponent, {\r\n        height: 'auto',\r\n        width: '600px',\r\n        data: this.user,\r\n      })\r\n      .afterClosed()\r\n      .subscribe((response) => {\r\n        //If user hits save\r\n        if (response) {\r\n          this.user = response.user;\r\n          //Updates current user with new company selection.\r\n          this.userManagementService.updateUser(this.user).subscribe((x) => {\r\n            //\r\n            this.getUserData(this.user._key);\r\n            this.snackBarService.info(\r\n              `Updated  ${this.user.fullname}'s tags.`\r\n            );\r\n          });\r\n        }\r\n      });\r\n  }\r\n\r\n  //Add/Edit Companies to a user profile\r\n  openAddCompanyDialog() {\r\n    console.log(this.user);\r\n    let dialogRef = this.dialog\r\n      .open(AddCompanyComponent, {\r\n        height: 'auto',\r\n        width: '600px',\r\n        data: this.user,\r\n      })\r\n      .afterClosed()\r\n      .subscribe((response) => {\r\n        //If user hits save\r\n        if (response) {\r\n          console.log(response);\r\n          //New variable readability -- all user data\r\n          this.user = response.user;\r\n\r\n          //Updates current user with new company selection.\r\n          this.userManagementService.updateUser(this.user).subscribe((x) => {\r\n            //\r\n            this.getUserData(this.user._key);\r\n            this.snackBarService.info(\r\n              `Updated  ${this.user.fullname}'s companies.`\r\n            );\r\n          });\r\n        }\r\n      });\r\n  }\r\n}\r\n","import { Component, Inject, Input, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { HelperService } from 'src/app/shared/service/helper.service';\r\nimport { SnackbarService } from 'src/app/shared/service/snackbar.service';\r\nimport { UserManagementService } from '../../user-management.service';\r\n\r\n@Component({\r\n  selector: 'app-user-password-reset',\r\n  templateUrl: './user-password-reset.component.html',\r\n  styleUrls: ['./user-password-reset.component.scss']\r\n})\r\nexport class UserPasswordResetComponent implements OnInit {\r\n  passwordFG: FormGroup;\r\n  @Input() data: any;\r\n\r\n  constructor(\r\n    public activeModal: NgbActiveModal,\r\n    private userManagementService: UserManagementService,\r\n    private fb: FormBuilder,\r\n    private sS: SnackbarService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.passwordFG = this.fb.group({\r\n      password: new FormControl('', Validators.required),\r\n      passwordConfirm: new FormControl('', Validators.required)\r\n    }, { validator: HelperService.passwordConfirming })\r\n  }\r\n\r\n  handleSubmit(): void {\r\n    this.passwordFG.markAllAsTouched();\r\n    if (this.passwordFG.valid) {\r\n      var password = this.passwordFG.value.password;\r\n      var id = this.data.id;\r\n      this.userManagementService.resetPassword(id, password).subscribe(x => {\r\n        this.sS.info('password has been reset');\r\n        this.activeModal.close();\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"modal-header\">\r\n    <h4 class=\"modal-title\">Update Profile</h4>\r\n    <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"activeModal.dismiss('Cross click')\">\r\n        <span aria-hidden=\"true\">&times;</span>\r\n    </button>\r\n</div>\r\n<div class=\"modal-body\">\r\n    <form class=\"example-container\" [formGroup]=\"passwordFG\">\r\n        <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n                <mat-form-field>\r\n                    <input type=\"password\" matInput formControlName=\"password\" placeholder=\"Password\" />\r\n                    <mat-error *ngIf=\"passwordFG.get('password').errors?.required\">Password is required</mat-error>\r\n                </mat-form-field>\r\n            </div>\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n                <mat-form-field>\r\n                    <input type=\"password\" matInput formControlName=\"passwordConfirm\" placeholder=\"Confirm Password\" />\r\n                    <mat-error *ngIf=\"passwordFG.get('passwordConfirm').errors?.required\">Confirm password is required\r\n                    </mat-error>\r\n                    <mat-error *ngIf=\"passwordFG.errors?.invalid\">Password is not match</mat-error>\r\n                </mat-form-field>\r\n            </div>\r\n        </div>\r\n    </form>\r\n</div>\r\n<div class=\"modal-footer\">\r\n    <button type=\"button\" class=\"btn btn-secondary\" (click)=\"activeModal.close()\">Close</button>\r\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"handleSubmit()\">Reset Password</button>\r\n</div>","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormControl, FormGroup, FormBuilder, Validators, FormGroupDirective } from '@angular/forms';\r\nimport { UserManagementService } from '../user-management.service';\r\nimport { UserInterface } from 'src/app/shared/models/user.interface';\r\nimport { SnackbarService } from 'src/app/shared/service/snackbar.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { AuthService } from '../../auth/_services/auth.service';\r\nimport { ConfirmPasswordValidator } from 'src/app/modules/auth/registration/confirm-password.validator';\r\nimport { UsersService } from 'src/app/shared/service/users.service';\r\nimport { NotificationService } from 'src/app/shared/service/notification.service';\r\n\r\n@Component({\r\n  selector: 'app-new-admin',\r\n  templateUrl: './new-admin.component.html',\r\n  styleUrls: ['./new-admin.component.scss']\r\n})\r\nexport class NewAdminComponent implements OnInit {\r\n  @ViewChild(FormGroupDirective) formGroupDirective: FormGroupDirective;\r\n  userProfileFG: FormGroup;\r\n  //All User Data\r\n  user: UserInterface;\r\n  companySelected: any;\r\n  hidden = false;\r\n  constructor(\r\n    private userManagementService: UserManagementService,\r\n    private authService: AuthService,\r\n    private route: ActivatedRoute,\r\n    private sS: SnackbarService,\r\n    private fb: FormBuilder,\r\n    private userService: UsersService,\r\n    private notification: NotificationService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.companySelected = this.getSelectedCompanyFromLocalStorage();\r\n    //access page part\r\n    if (!this.companySelected) {\r\n      this.hidden = true;\r\n      this.notification.showError(\"Please select your Company!\", \"\")\r\n    } else {\r\n      this.hidden = false;\r\n    }\r\n    this.userProfileFG = this.fb.group(\r\n      {\r\n        fullname: new FormControl('', Validators.required),\r\n        email: new FormControl('', [Validators.required, Validators.email]),\r\n        password: new FormControl('', Validators.required),\r\n        cPassword: new FormControl('', Validators.required),\r\n        role: new FormControl(''),\r\n        companies: new FormControl(''),\r\n      },\r\n      {\r\n        validator: ConfirmPasswordValidator.MatchPassword,\r\n      }\r\n    );\r\n  }\r\n  newUserProfile($event: any): void {\r\n    this.userProfileFG.patchValue({\r\n      role: 2,\r\n      companies: [this.companySelected]\r\n    })\r\n    this.user = { ...this.user, ...this.userProfileFG.value }\r\n    if (this.userProfileFG.valid) {\r\n      if (this.companySelected) {\r\n        this.user = { ...this.user, ...this.userProfileFG.value };\r\n        this.userManagementService.addNewUser(this.user).subscribe((x) => {\r\n          if (x['status']) {\r\n            var userName = x['data']\r\n            this.sS.info(`New Admin ${userName} profile created`);\r\n            this.userProfileFG.reset();\r\n            this.formGroupDirective.resetForm();\r\n          } else {\r\n            this.sS.info(`${x['data']}`);\r\n          }\r\n        });\r\n      } else {\r\n        this.sS.error('No Company, You can not create User!.');\r\n      }\r\n\r\n    }\r\n  }\r\n  //Gets the Selected Company from Local Storage\r\n  getSelectedCompanyFromLocalStorage() {\r\n    return this.userService.getSelectedCompanyFromLocalStorage();\r\n  }\r\n}\r\n","<div class=\"row\" *ngIf=\"!hidden\">\r\n  <!-- STARTING UPDATE PROFILE-->\r\n  <div class=\"col-xl-6\">\r\n    <div class=\"card card-custom example example-compact gutter-b\">\r\n      <div class=\"card-header\">\r\n        <div class=\"card-title\">\r\n          <h3 class=\"card-label\">New Admin Profile</h3>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <form class=\"example-container\" [formGroup]=\"userProfileFG\" #formGroupDirective=\"ngForm\"\r\n          (submit)=\"newUserProfile($event)\">\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n              <mat-form-field>\r\n                <input matInput formControlName=\"fullname\" placeholder=\"Full Name\" />\r\n                <mat-error *ngIf=\"userProfileFG.get('fullname').errors?.required\">Name is required</mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n              <mat-form-field>\r\n                <input matInput formControlName=\"email\" placeholder=\"Email\" />\r\n                <mat-error *ngIf=\"userProfileFG.get('email').errors?.email\">Email is not valid</mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n              <mat-form-field>\r\n                <input matInput formControlName=\"password\" placeholder=\"Password\" type=\"password\" autocomplete=\"off\" />\r\n                <mat-error *ngIf=\"userProfileFG.get('password').errors?.required\">Password is required</mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n              <mat-form-field>\r\n                <input matInput formControlName=\"cPassword\" placeholder=\"Confirm Passsword\" type=\"password\"\r\n                  autocomplete=\"off\" />\r\n                <mat-error *ngIf=\"userProfileFG.get('cPassword').errors?.required\">Confirm Password is required\r\n                </mat-error>\r\n                <mat-error\r\n                  *ngIf=\"userProfileFG.controls['cPassword'].errors && userProfileFG.controls['cPassword'].errors.ConfirmPassword\">\r\n                  'Passsword' and 'Confirm Password' didn't match.</mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div class=\"row pt-2\">\r\n            <div class=\"col-md-12\">\r\n              <button mat-raised-button color=\"primary\" type=\"submit\">\r\n                Create Profile\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div *ngIf=\"hidden\" class=\"error error-3 d-flex flex-row-fluid bgi-size-cover bgi-position-center\" style=\"background-image: url('./assets/media/error/bg3.jpg'); height: 100%;zoom: 1;\r\n  display: block;\r\n  min-height: 80vh;\r\n  font-size: 14px;\r\n  line-height: 1.4;\r\n  color: #0e1724;\">\r\n  <!--begin::Content-->\r\n  <div class=\"px-10 px-md-30 py-10 py-md-0 d-flex flex-column justify-content-md-center\">\r\n    <p class=\"display-4 font-weight-boldest text-white mb-12\">\r\n      How did you get here\r\n    </p>\r\n    <p class=\"font-size-h1 font-weight-boldest text-dark-75\">\r\n      Sorry you can't access the page you're looking for.\r\n    </p>\r\n    <p class=\"font-size-h4 line-height-md\">\r\n      There may be a misspelling in the URL entered,<br />or the page you are\r\n      looking for may no longer exist.\r\n    </p>\r\n  </div>\r\n  <!--end::Content-->\r\n</div>\r\n<!-- end:: Error -->","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormControl, FormGroup, FormBuilder, Validators, FormGroupDirective } from '@angular/forms';\r\nimport { UserManagementService } from '../user-management.service';\r\nimport { UserInterface } from 'src/app/shared/models/user.interface';\r\nimport { SnackbarService } from 'src/app/shared/service/snackbar.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { AuthService } from '../../auth/_services/auth.service';\r\nimport { ConfirmPasswordValidator } from 'src/app/modules/auth/registration/confirm-password.validator';\r\nimport { UsersService } from 'src/app/shared/service/users.service';\r\nimport { NotificationService } from 'src/app/shared/service/notification.service';\r\n\r\n@Component({\r\n  selector: 'app-new-advertiser',\r\n  templateUrl: './new-advertiser.component.html',\r\n  styleUrls: ['./new-advertiser.component.scss']\r\n})\r\nexport class NewAdvertiserComponent implements OnInit {\r\n  @ViewChild(FormGroupDirective) formGroupDirective: FormGroupDirective;\r\n  userProfileFG: FormGroup;\r\n  //All User Data\r\n  user: UserInterface;\r\n  companySelected: any;\r\n  hidden = false;\r\n\r\n  constructor(\r\n    private userManagementService: UserManagementService,\r\n    private authService: AuthService,\r\n    private route: ActivatedRoute,\r\n    private sS: SnackbarService,\r\n    private fb: FormBuilder,\r\n    private userService: UsersService,\r\n    private notification: NotificationService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.companySelected = this.getSelectedCompanyFromLocalStorage();\r\n    //access page part\r\n    if (!this.companySelected) {\r\n      this.hidden = true;\r\n      this.notification.showError(\"Please select your Company!\", \"\")\r\n    } else {\r\n      this.hidden = false;\r\n    }\r\n    this.userProfileFG = this.fb.group(\r\n      {\r\n        fullname: new FormControl('', Validators.required),\r\n        email: new FormControl('', [Validators.required, Validators.email]),\r\n        password: new FormControl('', Validators.required),\r\n        cPassword: new FormControl('', Validators.required),\r\n        role: new FormControl(''),\r\n        companies: new FormControl(''),\r\n      },\r\n      {\r\n        validator: ConfirmPasswordValidator.MatchPassword,\r\n      }\r\n    );\r\n  }\r\n  newUserProfile($event: any): void {\r\n    this.userProfileFG.patchValue({\r\n      role: 4,\r\n      companies: [this.companySelected]\r\n    })\r\n    this.user = { ...this.user, ...this.userProfileFG.value }\r\n    if (this.userProfileFG.valid) {\r\n      if (this.companySelected) {\r\n        this.user = { ...this.user, ...this.userProfileFG.value };\r\n        this.userManagementService.addNewUser(this.user).subscribe((x) => {\r\n          if (x['status']) {\r\n            var userName = x['data']\r\n            this.sS.info(`New Advertiser ${userName} profile created`);\r\n            this.userProfileFG.reset();\r\n            this.formGroupDirective.resetForm();\r\n          } else {\r\n            this.sS.info(`${x['data']}`);\r\n          }\r\n        });\r\n      }\r\n      else {\r\n        this.sS.error('No Company, You can not create User!.');\r\n      }\r\n    }\r\n  }\r\n  //Gets the Selected Company from Local Storage\r\n  getSelectedCompanyFromLocalStorage() {\r\n    return this.userService.getSelectedCompanyFromLocalStorage();\r\n  }\r\n\r\n}\r\n","<div class=\"row\" *ngIf=\"!hidden\">\r\n  <!-- STARTING UPDATE PROFILE-->\r\n  <div class=\"col-xl-6\">\r\n    <div class=\"card card-custom example example-compact gutter-b\">\r\n      <div class=\"card-header\">\r\n        <div class=\"card-title\">\r\n          <h3 class=\"card-label\">New Advertiser Profile</h3>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <form class=\"example-container\" [formGroup]=\"userProfileFG\" #formGroupDirective=\"ngForm\"\r\n          (submit)=\"newUserProfile($event)\">\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n              <mat-form-field>\r\n                <input matInput formControlName=\"fullname\" placeholder=\"Full Name\" />\r\n                <mat-error *ngIf=\"userProfileFG.get('fullname').errors?.required\">Name is required</mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n              <mat-form-field>\r\n                <input matInput formControlName=\"email\" placeholder=\"Email\" />\r\n                <mat-error *ngIf=\"userProfileFG.get('email').errors?.email\">Email is not valid</mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n              <mat-form-field>\r\n                <input matInput formControlName=\"password\" placeholder=\"Password\" type=\"password\" autocomplete=\"off\" />\r\n                <mat-error *ngIf=\"userProfileFG.get('password').errors?.required\">Password is required</mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n              <mat-form-field>\r\n                <input matInput formControlName=\"cPassword\" placeholder=\"Confirm Passsword\" type=\"password\"\r\n                  autocomplete=\"off\" />\r\n                <mat-error *ngIf=\"userProfileFG.get('cPassword').errors?.required\">Confirm Password is required\r\n                </mat-error>\r\n                <mat-error\r\n                  *ngIf=\"userProfileFG.controls['cPassword'].errors && userProfileFG.controls['cPassword'].errors.ConfirmPassword\">\r\n                  'Passsword' and 'Confirm Password' didn't match.</mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div class=\"row pt-2\">\r\n            <div class=\"col-md-12\">\r\n              <button mat-raised-button color=\"primary\" type=\"submit\">\r\n                Create Profile\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div *ngIf=\"hidden\" class=\"error error-3 d-flex flex-row-fluid bgi-size-cover bgi-position-center\" style=\"background-image: url('./assets/media/error/bg3.jpg'); height: 100%;zoom: 1;\r\n  display: block;\r\n  min-height: 80vh;\r\n  font-size: 14px;\r\n  line-height: 1.4;\r\n  color: #0e1724;\">\r\n  <!--begin::Content-->\r\n  <div class=\"px-10 px-md-30 py-10 py-md-0 d-flex flex-column justify-content-md-center\">\r\n    <p class=\"display-4 font-weight-boldest text-white mb-12\">\r\n      How did you get here\r\n    </p>\r\n    <p class=\"font-size-h1 font-weight-boldest text-dark-75\">\r\n      Sorry you can't access the page you're looking for.\r\n    </p>\r\n    <p class=\"font-size-h4 line-height-md\">\r\n      There may be a misspelling in the URL entered,<br />or the page you are\r\n      looking for may no longer exist.\r\n    </p>\r\n  </div>\r\n  <!--end::Content-->\r\n</div>\r\n<!-- end:: Error -->","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormControl, FormGroup, FormBuilder, Validators, FormGroupDirective } from '@angular/forms';\r\nimport { UserManagementService } from '../user-management.service';\r\nimport { UserInterface } from 'src/app/shared/models/user.interface';\r\nimport { SnackbarService } from 'src/app/shared/service/snackbar.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { AuthService } from '../../auth/_services/auth.service';\r\nimport { ConfirmPasswordValidator } from 'src/app/modules/auth/registration/confirm-password.validator';\r\nimport { UsersService } from 'src/app/shared/service/users.service';\r\nimport { NotificationService } from 'src/app/shared/service/notification.service';\r\n\r\n@Component({\r\n  selector: 'app-new-superadmin',\r\n  templateUrl: './new-superadmin.component.html',\r\n  styleUrls: ['./new-superadmin.component.scss']\r\n})\r\nexport class NewSuperadminComponent implements OnInit {\r\n  @ViewChild(FormGroupDirective) formGroupDirective: FormGroupDirective;\r\n  userProfileFG: FormGroup;\r\n  //All User Data\r\n  user: UserInterface;\r\n  companySelected: any;\r\n  hidden = false;\r\n\r\n  constructor(\r\n    private userManagementService: UserManagementService,\r\n    private authService: AuthService,\r\n    private route: ActivatedRoute,\r\n    private sS: SnackbarService,\r\n    private fb: FormBuilder,\r\n    private userService: UsersService,\r\n    private notification: NotificationService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.companySelected = this.getSelectedCompanyFromLocalStorage();\r\n    //access page part\r\n    if (!this.companySelected) {\r\n      this.hidden = true;\r\n      this.notification.showError(\"Please select your Company!\", \"\")\r\n    } else {\r\n      this.hidden = false;\r\n    }\r\n    this.userProfileFG = this.fb.group(\r\n      {\r\n        fullname: new FormControl('', Validators.required),\r\n        email: new FormControl('', [Validators.required, Validators.email]),\r\n        password: new FormControl('', Validators.required),\r\n        cPassword: new FormControl('', Validators.required),\r\n        role: new FormControl(''),\r\n        companies: new FormControl(''),\r\n      },\r\n      {\r\n        validator: ConfirmPasswordValidator.MatchPassword,\r\n      }\r\n    );\r\n  }\r\n  newUserProfile($event: any): void {\r\n    this.userProfileFG.patchValue({\r\n      role: 1,\r\n      companies: [this.companySelected]\r\n    })\r\n    this.user = { ...this.user, ...this.userProfileFG.value }\r\n    if (this.userProfileFG.valid) {\r\n      if (this.companySelected) {\r\n        this.user = { ...this.user, ...this.userProfileFG.value };\r\n        this.userManagementService.addNewUser(this.user).subscribe((x) => {\r\n          if (x['status']) {\r\n            var userName = x['data']\r\n            this.sS.info(`New Super Admin ${userName} profile created`);\r\n            this.userProfileFG.reset();\r\n            this.formGroupDirective.resetForm();\r\n          } else {\r\n            this.sS.info(`${x['data']}`);\r\n          }\r\n\r\n        });\r\n      } else {\r\n        this.sS.error('No Company, You can not create User!.');\r\n      }\r\n\r\n    }\r\n  }\r\n  //Gets the Selected Company from Local Storage\r\n  getSelectedCompanyFromLocalStorage() {\r\n    return this.userService.getSelectedCompanyFromLocalStorage();\r\n  }\r\n\r\n}\r\n","<div class=\"row\" *ngIf=\"!hidden\">\r\n  <!-- STARTING UPDATE PROFILE-->\r\n  <div class=\"col-xl-6\">\r\n    <div class=\"card card-custom example example-compact gutter-b\">\r\n      <div class=\"card-header\">\r\n        <div class=\"card-title\">\r\n          <h3 class=\"card-label\">Super Admin Profile</h3>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <form class=\"example-container\" [formGroup]=\"userProfileFG\" #formGroupDirective=\"ngForm\"\r\n          (submit)=\"newUserProfile($event)\">\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n              <mat-form-field>\r\n                <input matInput formControlName=\"fullname\" placeholder=\"Full Name\" />\r\n                <mat-error *ngIf=\"userProfileFG.get('fullname').errors?.required\">Name is required</mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n              <mat-form-field>\r\n                <input matInput formControlName=\"email\" placeholder=\"Email\" />\r\n                <mat-error *ngIf=\"userProfileFG.get('email').errors?.email\">Email is not valid</mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n              <mat-form-field>\r\n                <input matInput formControlName=\"password\" placeholder=\"Password\" type=\"password\" autocomplete=\"off\" />\r\n                <mat-error *ngIf=\"userProfileFG.get('password').errors?.required\">Password is required</mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n              <mat-form-field>\r\n                <input matInput formControlName=\"cPassword\" placeholder=\"Confirm Passsword\" type=\"password\"\r\n                  autocomplete=\"off\" />\r\n                <mat-error *ngIf=\"userProfileFG.get('cPassword').errors?.required\">Confirm Password is required\r\n                </mat-error>\r\n                <mat-error\r\n                  *ngIf=\"userProfileFG.controls['cPassword'].errors && userProfileFG.controls['cPassword'].errors.ConfirmPassword\">\r\n                  'Passsword' and 'Confirm Password' didn't match.</mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div class=\"row pt-2\">\r\n            <div class=\"col-md-12\">\r\n              <button mat-raised-button color=\"primary\" type=\"submit\">\r\n                Create Profile\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div *ngIf=\"hidden\" class=\"error error-3 d-flex flex-row-fluid bgi-size-cover bgi-position-center\" style=\"background-image: url('./assets/media/error/bg3.jpg'); height: 100%;zoom: 1;\r\n  display: block;\r\n  min-height: 80vh;\r\n  font-size: 14px;\r\n  line-height: 1.4;\r\n  color: #0e1724;\">\r\n  <!--begin::Content-->\r\n  <div class=\"px-10 px-md-30 py-10 py-md-0 d-flex flex-column justify-content-md-center\">\r\n    <p class=\"display-4 font-weight-boldest text-white mb-12\">\r\n      How did you get here\r\n    </p>\r\n    <p class=\"font-size-h1 font-weight-boldest text-dark-75\">\r\n      Sorry you can't access the page you're looking for.\r\n    </p>\r\n    <p class=\"font-size-h4 line-height-md\">\r\n      There may be a misspelling in the URL entered,<br />or the page you are\r\n      looking for may no longer exist.\r\n    </p>\r\n  </div>\r\n  <!--end::Content-->\r\n</div>\r\n<!-- end:: Error -->","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormControl, FormGroup, FormBuilder, Validators, FormGroupDirective } from '@angular/forms';\r\nimport { UserManagementService } from '../user-management.service';\r\nimport { UserInterface } from 'src/app/shared/models/user.interface';\r\nimport { SnackbarService } from 'src/app/shared/service/snackbar.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { AuthService } from '../../auth/_services/auth.service';\r\nimport { ConfirmPasswordValidator } from 'src/app/modules/auth/registration/confirm-password.validator';\r\nimport { UsersService } from 'src/app/shared/service/users.service';\r\nimport { NotificationService } from 'src/app/shared/service/notification.service';\r\n\r\n@Component({\r\n  selector: 'app-new-user',\r\n  templateUrl: './new-user.component.html',\r\n  styleUrls: ['./new-user.component.scss']\r\n})\r\nexport class NewUserComponent implements OnInit {\r\n  @ViewChild(FormGroupDirective) formGroupDirective: FormGroupDirective;\r\n  userProfileFG: FormGroup;\r\n  //All User Data\r\n  user: UserInterface;\r\n  companySelected: any;\r\n  hidden = false;\r\n\r\n  constructor(\r\n    private userManagementService: UserManagementService,\r\n    private authService: AuthService,\r\n    private route: ActivatedRoute,\r\n    private sS: SnackbarService,\r\n    private fb: FormBuilder,\r\n    private userService: UsersService,\r\n    private notification: NotificationService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.companySelected = this.getSelectedCompanyFromLocalStorage();\r\n    //access page part\r\n    if (!this.companySelected) {\r\n      this.hidden = true;\r\n      this.notification.showError(\"Please select your Company!\", \"\")\r\n    } else {\r\n      this.hidden = false;\r\n    }\r\n    this.userProfileFG = this.fb.group(\r\n      {\r\n        fullname: new FormControl('', Validators.required),\r\n        email: new FormControl('', [Validators.required, Validators.email]),\r\n        password: new FormControl('', Validators.required),\r\n        cPassword: new FormControl('', Validators.required),\r\n        role: new FormControl(''),\r\n        companies: new FormControl(''),\r\n      },\r\n      {\r\n        validator: ConfirmPasswordValidator.MatchPassword,\r\n      }\r\n    );\r\n  }\r\n  newUserProfile($event: any): void {\r\n    this.userProfileFG.patchValue({\r\n      role: 3,\r\n      companies: [this.companySelected]\r\n    })\r\n    this.user = { ...this.user, ...this.userProfileFG.value }\r\n    if (this.userProfileFG.valid) {\r\n      if (this.companySelected) {\r\n        this.user = { ...this.user, ...this.userProfileFG.value };\r\n        this.userManagementService.addNewUser(this.user).subscribe((x) => {\r\n          if (x['status']) {\r\n            var userName = x['data']\r\n            this.sS.info(`New Publisher ${userName} profile created`);\r\n            this.userProfileFG.reset();\r\n            this.formGroupDirective.resetForm();\r\n          } else {\r\n            this.sS.info(`${x['data']}`);\r\n          }\r\n        });\r\n      } else {\r\n        this.sS.error('No Company, You can not create User!.');\r\n      }\r\n\r\n    }\r\n  }\r\n  //Gets the Selected Company from Local Storage\r\n  getSelectedCompanyFromLocalStorage() {\r\n    return this.userService.getSelectedCompanyFromLocalStorage();\r\n  }\r\n}\r\n","<div class=\"row\" *ngIf=\"!hidden\">\r\n  <!-- STARTING UPDATE PROFILE-->\r\n  <div class=\"col-xl-6\">\r\n    <div class=\"card card-custom example example-compact gutter-b\">\r\n      <div class=\"card-header\">\r\n        <div class=\"card-title\">\r\n          <h3 class=\"card-label\">New Publisher Profile</h3>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <form class=\"example-container\" [formGroup]=\"userProfileFG\" #formGroupDirective=\"ngForm\"\r\n          (submit)=\"newUserProfile($event)\">\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n              <mat-form-field>\r\n                <input matInput formControlName=\"fullname\" placeholder=\"Full Name\" />\r\n                <mat-error *ngIf=\"userProfileFG.get('fullname').errors?.required\">Name is required</mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n              <mat-form-field>\r\n                <input matInput formControlName=\"email\" placeholder=\"Email\" />\r\n                <mat-error *ngIf=\"userProfileFG.get('email').errors?.email\">Email is not valid</mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n              <mat-form-field>\r\n                <input matInput formControlName=\"password\" placeholder=\"Password\" type=\"password\" autocomplete=\"off\" />\r\n                <mat-error *ngIf=\"userProfileFG.get('password').errors?.required\">Password is required</mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n              <mat-form-field>\r\n                <input matInput formControlName=\"cPassword\" placeholder=\"Confirm Passsword\" type=\"password\"\r\n                  autocomplete=\"off\" />\r\n                <mat-error *ngIf=\"userProfileFG.get('cPassword').errors?.required\">Confirm Password is required\r\n                </mat-error>\r\n                <mat-error\r\n                  *ngIf=\"userProfileFG.controls['cPassword'].errors && userProfileFG.controls['cPassword'].errors.ConfirmPassword\">\r\n                  'Passsword' and 'Confirm Password' didn't match.</mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n          </div>\r\n          <div class=\"row pt-2\">\r\n            <div class=\"col-md-12\">\r\n              <button mat-raised-button color=\"primary\" type=\"submit\">\r\n                Create Profile\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div *ngIf=\"hidden\" class=\"error error-3 d-flex flex-row-fluid bgi-size-cover bgi-position-center\" style=\"background-image: url('./assets/media/error/bg3.jpg'); height: 100%;zoom: 1;\r\n  display: block;\r\n  min-height: 80vh;\r\n  font-size: 14px;\r\n  line-height: 1.4;\r\n  color: #0e1724;\">\r\n  <!--begin::Content-->\r\n  <div class=\"px-10 px-md-30 py-10 py-md-0 d-flex flex-column justify-content-md-center\">\r\n    <p class=\"display-4 font-weight-boldest text-white mb-12\">\r\n      How did you get here\r\n    </p>\r\n    <p class=\"font-size-h1 font-weight-boldest text-dark-75\">\r\n      Sorry you can't access the page you're looking for.\r\n    </p>\r\n    <p class=\"font-size-h4 line-height-md\">\r\n      There may be a misspelling in the URL entered,<br />or the page you are\r\n      looking for may no longer exist.\r\n    </p>\r\n  </div>\r\n  <!--end::Content-->\r\n</div>\r\n<!-- end:: Error -->","import { Component, OnInit, Input } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { SnackbarService } from 'src/app/shared/service/snackbar.service';\r\nimport { MatCheckboxChange } from '@angular/material/checkbox';\r\nimport { PermissionInterface } from 'src/app/shared/models/permission.interface';\r\nimport { UserManagementService } from '../../user-management.service';\r\n\r\n@Component({\r\n  selector: 'app-permission',\r\n  templateUrl: './permission.component.html',\r\n  styleUrls: ['./permission.component.scss']\r\n})\r\nexport class PermissionComponent implements OnInit {\r\n  @Input() data: any;\r\n  permission: PermissionInterface\r\n  permissionFG: FormGroup;\r\n  allChecked = false;\r\n  isIndeterminate = false;\r\n  notifications = false;\r\n  protectedMedia = false;\r\n  googleMaterial = false;\r\n  dashboard = false;\r\n  eCommerce = false;\r\n  liveTraffic = false;\r\n  ngBootstrap =  false;\r\n  layoutBuilder = false;\r\n  userManage = false;\r\n  companyManage = false;\r\n  tagManage = false;\r\n  reportManage = false;\r\n  apiDocumentationManage = false;\r\n  publisherReportingManage = false;\r\n  i = 0;\r\n  constructor(\r\n    public activeModal: NgbActiveModal,\r\n    private fb: FormBuilder,\r\n    private snackService: SnackbarService,\r\n    private userManagementService: UserManagementService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    //Get the current company to edit\r\n    if (this.data['id']) {\r\n      this.userManagementService.getOnePermission(this.data['id']).subscribe(x => {\r\n        this.permission = x;\r\n        this.permissionFG.patchValue(x);\r\n        if (x['companyManage'] == true && x['eCommerce'] == true && x['dashboard'] == true && x['googleMaterial'] == true && x['layoutBuilder'] == true && x['liveTraffic'] == true && x['ngBootstrap'] == true && x['notifications'] == true && x['protectedMedia'] == true && x['reportManage'] == true && x['tagManage'] == true && x['userManage'] == true && x['publisherReportingManage'] == true && x['apiDocumentationManage'] == true) {\r\n          this.allChecked = true;\r\n          this.isIndeterminate = false;\r\n        } else {\r\n          this.allChecked = false;\r\n          this.isIndeterminate = false;\r\n        }\r\n      });\r\n    } else {}\r\n    this.permissionFG = this.fb.group({\r\n      dashboard: new FormControl('', Validators.required),\r\n      notifications: new FormControl('', Validators.required),\r\n      layoutBuilder: new FormControl('', Validators.required),\r\n      protectedMedia: new FormControl('', Validators.required),\r\n      googleMaterial: new FormControl('', Validators.required),\r\n      eCommerce: new FormControl('', Validators.required),\r\n      liveTraffic: new FormControl('', Validators.required),\r\n      ngBootstrap: new FormControl('', Validators.required),\r\n      companyManage: new FormControl('', Validators.required),\r\n      userManage: new FormControl('', Validators.required),\r\n      reportManage: new FormControl('', Validators.required),\r\n      tagManage: new FormControl('', Validators.required),\r\n      publisherReportingManage: new FormControl('', Validators.required),\r\n      apiDocumentationManage: new FormControl('', Validators.required),\r\n    })\r\n  }\r\n  onIndeterminateChange(val: boolean) {\r\n    console.log('isIndeterminate: ' + val);\r\n  }\r\n  onChange(ob: MatCheckboxChange) {\r\n    console.log(\"checked: \" + ob.checked);\r\n  }\r\n  onChkChange(ob: MatCheckboxChange) {\r\n    if(ob.checked) {\r\n      this.userManage = true;\r\n      this.companyManage = true;\r\n      this.tagManage = true;\r\n      this.reportManage = true;\r\n      this.publisherReportingManage = true;\r\n      this.notifications = true;\r\n      this.protectedMedia = true;\r\n      this.googleMaterial = true;\r\n      this.dashboard = true;\r\n      this.eCommerce = true;\r\n      this.liveTraffic = true;\r\n      this.ngBootstrap =  true;\r\n      this.layoutBuilder = true;\r\n      this.apiDocumentationManage = true;\r\n      this.i = 13;\r\n    } else {\r\n      this.userManage = false;\r\n      this.companyManage = false;\r\n      this.tagManage = false;\r\n      this.reportManage = false; \r\n      this.notifications = false;\r\n      this.protectedMedia = false;\r\n      this.googleMaterial = false;\r\n      this.dashboard = false;\r\n      this.eCommerce = false;\r\n      this.liveTraffic = false;\r\n      this.ngBootstrap =  false;\r\n      this.layoutBuilder = false;    \r\n      this.publisherReportingManage = false;\r\n      this.apiDocumentationManage = false;\r\n    }\r\n }\r\n onChildChkChange(ob: MatCheckboxChange) {\r\n    if(ob.checked) {\r\n      this.i++;\r\n    } else {\r\n      this.i--;\r\n    }\r\n    if(this.i==13) {\r\n      this.allChecked = true;\r\n      this.isIndeterminate = false;\r\n    } else if (this.i >= 1 || this.i <= 12) {\r\n      this.isIndeterminate = true;\r\n      this.allChecked = false;\r\n    } else {\r\n      this.isIndeterminate = false;\r\n      this.allChecked = false;\r\n    }\r\n  }\r\n  \r\n  handleSubmit() {\r\n    this.permissionFG.markAllAsTouched();\r\n    if (this.permissionFG.valid) {     \r\n      this.permission = {...this.permission, ...this.permissionFG.value};\r\n      this.userManagementService.updateOnePermission(this.permission).subscribe(x => {\r\n        this.snackService.info('Successfully updated permission.');\r\n        this.activeModal.close(x);\r\n      }, (err) => {\r\n        this.snackService.info(`Error updating permission: ${err.statusText}`);\r\n      });\r\n    }\r\n  }\r\n}\r\n","<div class=\"modal-header\">\r\n    <h4 class=\"modal-title\">Permission</h4>\r\n    <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"activeModal.dismiss('Cross click')\">\r\n        <span aria-hidden=\"true\">&times;</span>\r\n    </button>\r\n</div>\r\n<div class=\"modal-body\">\r\n    <div class=\"row justify-content-end d-flex\">\r\n        <div class=\"select-all\">\r\n            <mat-checkbox [ngStyle]=\"{'color': '#232428'}\" class=\"example-margin\" [indeterminate]=\"isIndeterminate\" [checked]=\"allChecked\" (indeterminateChange)=\"onIndeterminateChange($event)\" (change)=\"onChkChange($event)\">Select All</mat-checkbox>\r\n        </div>\r\n    </div>\r\n    <form class=\"example-container\" [formGroup]=\"permissionFG\">\r\n        <div class=\"row\">\r\n            <div class=\"col-md-6\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-md-12\">\r\n                        <span class=\"example-list-section\">\r\n                            <mat-checkbox color=\"primary\" formControlName=\"dashboard\" class=\"example-margin\" [(ngModel)]=\"dashboard\" (change)=\"onChildChkChange($event)\">Dashboard</mat-checkbox>\r\n                        </span>\r\n                    </div>\r\n                    <div class=\"col-md-12\">\r\n                        <span class=\"example-list-section\">\r\n                            <mat-checkbox color=\"primary\" formControlName=\"layoutBuilder\" class=\"example-margin\" [(ngModel)]=\"layoutBuilder\" (change)=\"onChildChkChange($event)\">Layout Builder</mat-checkbox>\r\n                        </span>\r\n                    </div>\r\n                    <div class=\"col-md-12\">\r\n                        <span class=\"example-list-section\">\r\n                            <mat-checkbox color=\"primary\" formControlName=\"googleMaterial\" class=\"example-margin\" [(ngModel)]=\"googleMaterial\" (change)=\"onChildChkChange($event)\">Google Material</mat-checkbox>\r\n                        </span>\r\n                    </div>\r\n                    <div class=\"col-md-12\">\r\n                        <span class=\"example-list-section\">\r\n                            <mat-checkbox color=\"primary\" formControlName=\"ngBootstrap\" class=\"example-margin\" [(ngModel)]=\"ngBootstrap\" (change)=\"onChildChkChange($event)\">Ng-Bootstrap</mat-checkbox>\r\n                        </span>\r\n                    </div>\r\n                    \r\n                    <div class=\"col-md-12\">\r\n                        <span class=\"example-list-section\">\r\n                            <mat-checkbox color=\"primary\" formControlName=\"companyManage\" class=\"example-margin\" [(ngModel)]=\"companyManage\" (change)=\"onChildChkChange($event)\">Company Management</mat-checkbox>\r\n                        </span>\r\n                    </div>\r\n                    <div class=\"col-md-12\">\r\n                        <span class=\"example-list-section\">\r\n                            <mat-checkbox color=\"primary\" formControlName=\"tagManage\" class=\"example-margin\" [(ngModel)]=\"tagManage\" (change)=\"onChildChkChange($event)\">Tag Management</mat-checkbox>\r\n                        </span>\r\n                        \r\n                    </div>\r\n                    <div class=\"col-md-12\">\r\n                        <span class=\"example-list-section\">\r\n                            <mat-checkbox color=\"primary\" formControlName=\"publisherReportingManage\" class=\"example-margin\" [(ngModel)]=\"publisherReportingManage\" (change)=\"onChildChkChange($event)\">Publisher Reporting</mat-checkbox>\r\n                        </span>\r\n                        \r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n            <div class=\"col-md-6\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-md-12\">\r\n                        <span class=\"example-list-section\">\r\n                            <mat-checkbox color=\"primary\" formControlName=\"eCommerce\" class=\"example-margin\" [(ngModel)]=\"eCommerce\" (change)=\"onChildChkChange($event)\">eCommerce</mat-checkbox>\r\n                        </span>\r\n                    </div>\r\n                    <div class=\"col-md-12\">\r\n                        <span class=\"example-list-section\">\r\n                            <mat-checkbox color=\"primary\" formControlName=\"liveTraffic\" class=\"example-margin\" [(ngModel)]=\"liveTraffic\" (change)=\"onChildChkChange($event)\">Live Traffic</mat-checkbox>\r\n                        </span>\r\n                    </div>\r\n                    <div class=\"col-md-12\">\r\n                        <span class=\"example-list-section\">\r\n                            <mat-checkbox color=\"primary\" formControlName=\"protectedMedia\" class=\"example-margin\" [(ngModel)]=\"protectedMedia\" (change)=\"onChildChkChange($event)\">Protected Media</mat-checkbox>\r\n                        </span>\r\n                        \r\n                    </div>\r\n                    <div class=\"col-md-12\">\r\n                        <span class=\"example-list-section\">\r\n                            <mat-checkbox color=\"primary\" formControlName=\"notifications\" class=\"example-margin\" [(ngModel)]=\"notifications\" (change)=\"onChildChkChange($event)\">Notifications</mat-checkbox>\r\n                        </span>\r\n                        \r\n                    </div>\r\n                    <div class=\"col-md-12\">\r\n                        <span class=\"example-list-section\">\r\n                            <mat-checkbox color=\"primary\" formControlName=\"userManage\" class=\"example-margin\" [(ngModel)]=\"userManage\" (change)=\"onChildChkChange($event)\">User Management</mat-checkbox>\r\n                        </span>\r\n                        \r\n                    </div>\r\n                    <div class=\"col-md-12\">\r\n                        <span class=\"example-list-section\">\r\n                            <mat-checkbox color=\"primary\" formControlName=\"reportManage\" class=\"example-margin\" [(ngModel)]=\"reportManage\" (change)=\"onChildChkChange($event)\">Reporting</mat-checkbox>\r\n                        </span>\r\n                        \r\n                    </div>\r\n                    <div class=\"col-md-12\">\r\n                        <span class=\"example-list-section\">\r\n                            <mat-checkbox color=\"primary\" formControlName=\"apiDocumentationManage\" class=\"example-margin\" [(ngModel)]=\"apiDocumentationManage\" (change)=\"onChildChkChange($event)\">API Documentation</mat-checkbox>\r\n                        </span>\r\n                        \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n    </form>\r\n</div>\r\n<div class=\"modal-footer\">\r\n    <button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"activeModal.close()\">Close</button>\r\n    <button type=\"button\" class=\"btn btn-sm btn-primary\"  (click)=\"handleSubmit()\">Update</button>\r\n</div>\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { PermissionComponent } from './permission/permission.component';\r\nimport { SnackbarService } from 'src/app/shared/service/snackbar.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\nexport interface PeriodicElement {\r\n  name: string;\r\n  position: number;\r\n}\r\n\r\nconst ELEMENT_DATA: PeriodicElement[] = [\r\n  { position: 1, name: \"Super Admin\" },\r\n  { position: 2, name: \"Admin\" },\r\n  { position: 3, name: \"Publisher\" },\r\n  { position: 4, name: \"Advertiser\" },\r\n];\r\n\r\n@Component({\r\n  selector: \"app-roles\",\r\n  templateUrl: \"./roles.component.html\",\r\n  styleUrls: [\"./roles.component.scss\"],\r\n})\r\nexport class RolesComponent implements OnInit {\r\n  displayedColumns: string[] = [\"position\", \"name\", \"action\"];\r\n  dataSource = ELEMENT_DATA;\r\n  constructor(\r\n    private modalService: NgbModal,\r\n    private route: ActivatedRoute,\r\n    private sS: SnackbarService,\r\n  ) { }\r\n\r\n  ngOnInit(): void { }\r\n\r\n  openManagePermissionDialog(roleKey) {\r\n    const modalRef = this.modalService.open(PermissionComponent, {\r\n      size: 'md',\r\n    });\r\n    modalRef.componentInstance.data = {\r\n      id: roleKey\r\n    };\r\n    modalRef.result.then((c) => { });\r\n  }\r\n}\r\n","<div class=\"row\">\r\n  <div class=\"col-xl-12\">\r\n    <div class=\"card card-custom example example-compact gutter-b\">\r\n      <div class=\"card-header\">\r\n        <div class=\"card-title\">\r\n          <h3 class=\"card-label\">User Role</h3>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\r\n\r\n          <!--- Note that these columns can be defined in any order.\r\n                The actual rendered columns are set as a property on the row definition\" -->\r\n\r\n          <!-- Position Column -->\r\n          <ng-container matColumnDef=\"position\">\r\n            <th mat-header-cell *matHeaderCellDef> No. </th>\r\n            <td mat-cell *matCellDef=\"let element\"> {{element.position}} </td>\r\n          </ng-container>\r\n\r\n          <!-- Name Column -->\r\n          <ng-container matColumnDef=\"name\">\r\n            <th mat-header-cell *matHeaderCellDef> Role </th>\r\n            <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\r\n          </ng-container>\r\n\r\n          <!-- Action Column -->\r\n          <ng-container matColumnDef=\"action\">\r\n            <th mat-header-cell *matHeaderCellDef> Action </th>\r\n            <td mat-cell *matCellDef=\"let element\">\r\n              <a title=\"Edit Role\" class=\"btn btn-icon btn-light btn-hover-primary btn-sm mx-3\"\r\n                (click)=\"openManagePermissionDialog(element.position)\">\r\n                <span [inlineSVG]=\"'./assets/media/svg/icons/Communication/Write.svg'\" cacheSVG=\"true\"\r\n                  class=\"svg-icon svg-icon-md svg-icon-primary\">\r\n                </span>\r\n              </a>\r\n            </td>\r\n          </ng-container>\r\n\r\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>","import { Router, ActivatedRoute } from '@angular/router';\r\nimport { Component, OnInit, ChangeDetectorRef } from '@angular/core';\r\nimport { UsersService } from '../../../shared/service/users.service'\r\nimport { Subscription } from 'rxjs';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { UserInterface } from './../../../shared/models/user.interface';\r\nimport { NotificationService } from 'src/app/shared/service/notification.service';\r\n\r\n@Component({\r\n  selector: 'app-superadmins',\r\n  templateUrl: './superadmins.component.html',\r\n  styleUrls: ['./superadmins.component.scss']\r\n})\r\nexport class SuperadminsComponent implements OnInit {\r\n  displayedColumns = [\"fullname\", \"email\", \"companyname\", \"stat\", \"apiKey\", \"action\"];\r\n  superadmins = new MatTableDataSource<UserInterface>();\r\n  companyUser = false;\r\n  //Local Storage Company\r\n  localStorageCompany: any;\r\n  hidden = false;\r\n  originalData: any[];\r\n  private subscritions: Subscription[] = [];\r\n  constructor(\r\n    private userService: UsersService,\r\n    private cdr: ChangeDetectorRef,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private notification: NotificationService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.localStorageCompany = this.getSelectedCompanyFromLocalStorage();\r\n    //access page part\r\n    if (!this.localStorageCompany) {\r\n      this.hidden = true;\r\n      this.notification.showError(\"Please select your Company!\", \"\")\r\n    } else {\r\n      this.hidden = false;\r\n    }\r\n    this.subscritions.push(\r\n      this.userService.getSuperAdminAll().subscribe(data => {\r\n        this.originalData = data;\r\n        if (this.localStorageCompany) {\r\n          this.superadmins.data = data.filter(userData => userData.companies.includes(this.localStorageCompany));\r\n        } else {\r\n          this.superadmins.data = data;\r\n        }\r\n        this.cdr.detectChanges();\r\n      })\r\n    );\r\n  }\r\n  handleEditClick(userId: string): void {\r\n    this.router.navigateByUrl('/user-management/edit/' + userId);\r\n  }\r\n  //Gets the Selected Company from Local Storage\r\n  getSelectedCompanyFromLocalStorage() {\r\n    return this.userService.getSelectedCompanyFromLocalStorage();\r\n  }\r\n  handleAddProfile() {\r\n    this.router.navigateByUrl('/user-management/new-super-admin');\r\n  }\r\n  onChangeSuperAdmin(event) {\r\n    this.companyUser = event.checked;\r\n    if (this.companyUser) {\r\n      this.superadmins.data = this.originalData;\r\n    } else {\r\n      if (this.localStorageCompany) {\r\n        this.superadmins.data = this.originalData.filter(userData => userData.companies.includes(this.localStorageCompany));\r\n      } else {\r\n        this.superadmins.data = this.originalData;\r\n      }\r\n    }\r\n\r\n  }\r\n}\r\n","<div class=\"row\" *ngIf=\"!hidden\">\r\n    <div class=\"col-xl-12\">\r\n        <div class=\"card card-custom example example-compact gutter-b\">\r\n            <div class=\"card-header\">\r\n                <div class=\"card-title\">\r\n                    <h3 class=\"card-label\">Super Admins</h3>\r\n                </div>\r\n            </div>\r\n            <div class=\"card-body\">\r\n                <div class=\"pb-3\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-xl-6\">\r\n                            <button type=\"button\" class=\"btn btn-sm btn-primary\" (click)=\"handleAddProfile()\">\r\n                                Add Super Admin\r\n                            </button>\r\n                        </div>\r\n                        <div class=\"col-xl-6 all-super-user align-self-center d-flex\">\r\n                            <mat-checkbox color=\"primary\" [(ngModel)]=\"companyUser\"\r\n                                (change)=\"onChangeSuperAdmin($event)\">Display All Super Admins</mat-checkbox>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div class=\"example-container mat-elevation-z8\">\r\n                    <mat-table #table [dataSource]=\"superadmins\">\r\n                        <ng-container matColumnDef=\"fullname\">\r\n                            <mat-header-cell *matHeaderCellDef> Full Name </mat-header-cell>\r\n                            <mat-cell *matCellDef=\"let element\"> {{element.fullname}} </mat-cell>\r\n                        </ng-container>\r\n                        <ng-container matColumnDef=\"email\">\r\n                            <mat-header-cell *matHeaderCellDef> Email </mat-header-cell>\r\n                            <mat-cell *matCellDef=\"let element\"> {{element.email}} </mat-cell>\r\n                        </ng-container>\r\n                        <ng-container matColumnDef=\"companyname\">\r\n                            <mat-header-cell *matHeaderCellDef> Companies </mat-header-cell>\r\n                            <mat-cell *matCellDef=\"let element\" [ngClass]=\"'font-weight-bold'\"> {{element.companyname}}\r\n                            </mat-cell>\r\n                        </ng-container>\r\n                        <ng-container matColumnDef=\"stat\">\r\n                            <mat-header-cell *matHeaderCellDef> Stat# </mat-header-cell>\r\n                            <mat-cell *matCellDef=\"let element\"> {{element.tags.length}} </mat-cell>\r\n                        </ng-container>\r\n                        <ng-container matColumnDef=\"apiKey\">\r\n                            <mat-header-cell *matHeaderCellDef> ApiKey </mat-header-cell>\r\n                            <mat-cell *matCellDef=\"let element\"> {{element.apiKey}} </mat-cell>\r\n                        </ng-container>\r\n                        <ng-container matColumnDef=\"action\">\r\n                            <mat-header-cell *matHeaderCellDef> Action </mat-header-cell>\r\n                            <mat-cell *matCellDef=\"let element\">\r\n                                <a title=\"Edit Super Admin\" class=\"btn btn-icon btn-light btn-hover-primary btn-sm mx-3\"\r\n                                    (click)=\"handleEditClick(element._key)\">\r\n                                    <span [inlineSVG]=\"'./assets/media/svg/icons/Communication/Write.svg'\"\r\n                                        cacheSVG=\"true\" class=\"svg-icon svg-icon-md svg-icon-primary\">\r\n                                    </span>\r\n                                </a>\r\n                            </mat-cell>\r\n                        </ng-container>\r\n\r\n                        <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n                        <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n\r\n                    </mat-table>\r\n                    <div *ngIf=\"superadmins.data.length === 0\">\r\n                        <p style=\"text-align: center;padding: 10px;\">No records found</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div *ngIf=\"hidden\" class=\"error error-3 d-flex flex-row-fluid bgi-size-cover bgi-position-center\" style=\"background-image: url('./assets/media/error/bg3.jpg'); height: 100%;zoom: 1;\r\n  display: block;\r\n  min-height: 80vh;\r\n  font-size: 14px;\r\n  line-height: 1.4;\r\n  color: #0e1724;\">\r\n    <!--begin::Content-->\r\n    <div class=\"px-10 px-md-30 py-10 py-md-0 d-flex flex-column justify-content-md-center\">\r\n        <p class=\"display-4 font-weight-boldest text-white mb-12\">\r\n            How did you get here\r\n        </p>\r\n        <p class=\"font-size-h1 font-weight-boldest text-dark-75\">\r\n            Sorry you can't access the page you're looking for.\r\n        </p>\r\n        <p class=\"font-size-h4 line-height-md\">\r\n            There may be a misspelling in the URL entered,<br />or the page you are\r\n            looking for may no longer exist.\r\n        </p>\r\n    </div>\r\n    <!--end::Content-->\r\n</div>\r\n<!-- end:: Error -->","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { UserManagementComponent } from './user-management.component';\r\nimport { SuperadminsComponent } from './superadmins/superadmins.component';\r\nimport { AdminsComponent } from './admins/admins.component';\r\nimport { AdvertisersComponent } from './advertisers/advertisers.component';\r\nimport { UsersComponent } from './users/users.component';\r\nimport { RolesComponent } from './roles/roles.component';\r\nimport { EditUsersComponent } from './edit-users/edit-users.component';\r\nimport { NewUserComponent } from './new-user/new-user.component';\r\nimport { NewSuperadminComponent } from './new-superadmin/new-superadmin.component';\r\nimport { NewAdminComponent } from './new-admin/new-admin.component';\r\nimport { NewAdvertiserComponent } from './new-advertiser/new-advertiser.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: UserManagementComponent,\r\n    children: [\r\n      {\r\n        path: 'super-admin-users',\r\n        component: SuperadminsComponent,\r\n      },\r\n      {\r\n        path: 'admin-users',\r\n        component: AdminsComponent,\r\n      },\r\n      {\r\n        path: 'advertiser-users',\r\n        component: AdvertisersComponent,\r\n      },\r\n      {\r\n        path: 'publisher-users',\r\n        component: UsersComponent,\r\n      },\r\n      {\r\n        path: 'roles',\r\n        component: RolesComponent,\r\n      },\r\n      {\r\n        path: 'new-super-admin',\r\n        component: NewSuperadminComponent,\r\n      },\r\n      {\r\n        path: 'new-admin',\r\n        component: NewAdminComponent,\r\n      },\r\n      {\r\n        path: 'new-advertiser',\r\n        component: NewAdvertiserComponent,\r\n      },\r\n      {\r\n        path: 'new-publisher',\r\n        component: NewUserComponent,\r\n      },\r\n      {\r\n        path: 'edit-user',\r\n        component: EditUsersComponent,\r\n      },\r\n      {\r\n        path: 'edit/:id',\r\n        component: EditUsersComponent,\r\n        pathMatch: 'full'\r\n      },\r\n      { path: '', redirectTo: 'publisher-users', pathMatch: 'full' },\r\n      { path: '**', redirectTo: 'publisher-users', pathMatch: 'full' },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class UserManagementRoutingModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-user-management',\r\n  templateUrl: './user-management.component.html',\r\n})\r\nexport class UserManagementComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n","<router-outlet></router-outlet>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { UsersComponent } from './users/users.component';\r\nimport { RolesComponent } from './roles/roles.component';\r\nimport { UserManagementComponent } from './user-management.component';\r\nimport { UserManagementRoutingModule } from './user-management-routing.module';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { NgbAlertConfig, NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { EditUsersComponent } from './edit-users/edit-users.component';\r\nimport { ValidateEqualModule } from 'ng-validate-equal';\r\nimport { UserPasswordResetComponent } from './edit-users/user-password-reset/user-password-reset.component';\r\nimport { SnackbarService } from 'src/app/shared/service/snackbar.service';\r\nimport { AddTagComponent } from './edit-users/add-tag/add-tag.component';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { AddCompanyComponent } from './edit-users/add-company/add-company.component';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { PermissionComponent } from './roles/permission/permission.component';\r\nimport { SuperadminsComponent } from './superadmins/superadmins.component';\r\nimport { AdminsComponent } from './admins/admins.component';\r\nimport { AdvertisersComponent } from './advertisers/advertisers.component';\r\nimport { NewUserComponent } from './new-user/new-user.component';\r\nimport { NewSuperadminComponent } from './new-superadmin/new-superadmin.component';\r\nimport { NewAdminComponent } from './new-admin/new-admin.component';\r\nimport { NewAdvertiserComponent } from './new-advertiser/new-advertiser.component';\r\nimport { InlineSVGModule } from 'ng-inline-svg';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    UsersComponent,\r\n    RolesComponent,\r\n    UserManagementComponent,\r\n    EditUsersComponent,\r\n    UserPasswordResetComponent,\r\n    AddTagComponent,\r\n    AddCompanyComponent,\r\n    PermissionComponent,\r\n    SuperadminsComponent,\r\n    AdminsComponent,\r\n    AdvertisersComponent,\r\n    NewUserComponent,\r\n    NewSuperadminComponent,\r\n    NewAdminComponent,\r\n    NewAdvertiserComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatTableModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    MatInputModule,\r\n    MatFormFieldModule,\r\n    MatButtonModule,\r\n    MatSnackBarModule,\r\n    MatSelectModule,\r\n    NgbModule,\r\n    MatIconModule,\r\n    MatCheckboxModule,\r\n    UserManagementRoutingModule,\r\n    ValidateEqualModule,\r\n    NgxDatatableModule,\r\n    MatListModule,\r\n    MatDialogModule,\r\n    InlineSVGModule.forRoot()\r\n  ],\r\n  providers: [SnackbarService],\r\n  entryComponents: [\r\n    UserPasswordResetComponent,\r\n    AddTagComponent,\r\n    AddCompanyComponent,\r\n    EditUsersComponent,\r\n  ],\r\n})\r\nexport class UserManagementModule {}\r\n","import { UserInterface } from './../../shared/models/user.interface';\r\nimport { PermissionInterface } from './../../shared/models/permission.interface';\r\nimport { AuthUserInterface } from 'src/app/shared/models/auth-user.interface';\r\nimport { TagsService } from './../../shared/service/tags.service';\r\nimport { TagInterface } from './../../shared/models/tag.interface';\r\nimport { UsersService } from 'src/app/shared/service/users.service';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserManagementService {\r\n\r\n  constructor(\r\n    private usersService: UsersService,\r\n    private tagsService: TagsService\r\n  ) { }\r\n\r\n  resetPassword(userId: number, password: string): Observable<void> {\r\n    return this.usersService.resetPassword(userId, password);\r\n  }\r\n\r\n  getAllTags(): Observable<TagInterface[]> {\r\n    return this.tagsService.getAll();\r\n  }\r\n\r\n  addTag(tag: TagInterface): Observable<TagInterface> {\r\n    return this.tagsService.add(tag);\r\n  }\r\n\r\n  addNewUser(user: UserInterface): Observable<UserInterface> {\r\n    return this.usersService.addUser(user);\r\n  }\r\n\r\n  updateUser(user: UserInterface): Observable<UserInterface> {\r\n    return this.usersService.updateUser(user);\r\n  }\r\n\r\n  getUser(userId: string): Observable<UserInterface> {\r\n    return this.usersService.getUser(userId);\r\n  }\r\n\r\n  updateOnePermission(permission: PermissionInterface): Observable<PermissionInterface> {\r\n    return this.usersService.updateOnePermission(permission);\r\n  }\r\n  getOnePermission(permission: PermissionInterface): Observable<PermissionInterface> {\r\n    return this.usersService.getOnePermission(permission);\r\n  }\r\n}\r\n","import { UserInterface } from './../../../shared/models/user.interface';\r\nimport { TagInterface } from './../../../shared/models/tag.interface';\r\nimport { AuthUserInterface } from 'src/app/shared/models/auth-user.interface';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Component, OnInit, ChangeDetectorRef } from '@angular/core';\r\nimport { UsersService } from '../../../shared/service/users.service'\r\nimport { Subscription } from 'rxjs';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { NotificationService } from 'src/app/shared/service/notification.service';\r\n\r\n@Component({\r\n  selector: 'app-users',\r\n  templateUrl: './users.component.html',\r\n  styleUrls: ['./users.component.scss']\r\n})\r\nexport class UsersComponent implements OnInit {\r\n  displayedColumns = [\"fullname\", \"email\", \"companyname\", \"stat\", \"apiKey\", \"action\"];\r\n  users = new MatTableDataSource<UserInterface>();\r\n\r\n  private subscritions: Subscription[] = [];\r\n\r\n  //Local Storage Company\r\n  localStorageCompany: any;\r\n  hidden = false;\r\n  companyUser = false;\r\n  originalData: any[];\r\n\r\n  constructor(\r\n    private usersServie: UsersService,\r\n    private cdr: ChangeDetectorRef,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private userService: UsersService,\r\n    private notification: NotificationService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.localStorageCompany = this.getSelectedCompanyFromLocalStorage();\r\n    //access page part\r\n    if (!this.localStorageCompany) {\r\n      this.hidden = true;\r\n      this.notification.showError(\"Please select your Company!\", \"\")\r\n    } else {\r\n      this.hidden = false;\r\n    }\r\n    this.subscritions.push(\r\n      this.usersServie.getPublisherAll().subscribe(data => {\r\n        // console.log(data);\r\n        this.originalData = data;\r\n        if (this.localStorageCompany) {\r\n          this.users.data = data.filter(userData => userData.companies.includes(this.localStorageCompany));\r\n        } else {\r\n          this.users.data = data.filter(userData => userData.companies.length == 0);\r\n        }\r\n        this.cdr.detectChanges();\r\n      })\r\n    );\r\n  }\r\n\r\n  handleEditClick(userId: string): void {\r\n    this.router.navigateByUrl('/user-management/edit/' + userId);\r\n  }\r\n  //Gets the Selected Company from Local Storage\r\n  getSelectedCompanyFromLocalStorage() {\r\n    return this.userService.getSelectedCompanyFromLocalStorage();\r\n  }\r\n  handleAddProfile() {\r\n    this.router.navigateByUrl('/user-management/new-publisher');\r\n  }\r\n  deletePublisher(id: any) {\r\n    if (window.confirm('Do you want to go ahead?')) {\r\n      this.usersServie.deleteUser(id).subscribe((res) => {\r\n        this.usersServie.getPublisherAll().subscribe(data => {\r\n          // console.log(data);\r\n          if (this.companyUser) {\r\n            this.users.data = data;\r\n          } else {\r\n            if (this.localStorageCompany) {\r\n              this.users.data = data.filter(userData => userData.companies.includes(this.localStorageCompany));\r\n            } else {\r\n              this.users.data = data.filter(userData => userData.companies.length == 0);\r\n            }\r\n          }\r\n\r\n          this.cdr.detectChanges();\r\n        })\r\n        this.notification.showWarning('Deleted a User', \"\");\r\n      })\r\n    }\r\n  }\r\n  onChangePublisher(event) {\r\n    this.companyUser = event.checked;\r\n    if (this.companyUser) {\r\n      this.users.data = this.originalData;\r\n    } else {\r\n      if (this.localStorageCompany) {\r\n        this.users.data = this.originalData.filter(userData => userData.companies.includes(this.localStorageCompany));\r\n      } else {\r\n        this.users.data = this.originalData;\r\n      }\r\n    }\r\n\r\n  }\r\n}\r\n","<div class=\"row\" *ngIf=\"!hidden\">\r\n  <div class=\"col-xl-12\">\r\n    <div class=\"card card-custom example example-compact gutter-b\">\r\n      <div class=\"card-header\">\r\n        <div class=\"card-title\">\r\n          <h3 class=\"card-label\">Publisher Users</h3>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-body\">\r\n        <div class=\"pb-3\">\r\n          <div class=\"row\">\r\n            <div class=\"col-xl-6\">\r\n              <button type=\"button\" class=\"btn btn-sm btn-primary\" (click)=\"handleAddProfile()\">\r\n                Add Publisher\r\n              </button>\r\n            </div>\r\n            <div class=\"col-xl-6 all-publisher-user align-self-center d-flex\">\r\n              <mat-checkbox color=\"primary\" [(ngModel)]=\"companyUser\" (change)=\"onChangePublisher($event)\">Display All\r\n                Publishers</mat-checkbox>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"example-container mat-elevation-z8\">\r\n          <mat-table #table [dataSource]=\"users\">\r\n            <ng-container matColumnDef=\"fullname\">\r\n              <mat-header-cell *matHeaderCellDef> Full Name </mat-header-cell>\r\n              <mat-cell *matCellDef=\"let element\"> {{element.fullname}} </mat-cell>\r\n            </ng-container>\r\n            <ng-container matColumnDef=\"email\">\r\n              <mat-header-cell *matHeaderCellDef> Email </mat-header-cell>\r\n              <mat-cell *matCellDef=\"let element\"> {{element.email}} </mat-cell>\r\n            </ng-container>\r\n            <ng-container matColumnDef=\"companyname\">\r\n              <mat-header-cell *matHeaderCellDef> Companies </mat-header-cell>\r\n              <mat-cell *matCellDef=\"let element\" [ngClass]=\"'font-weight-bold'\"> {{element.companyname}} </mat-cell>\r\n            </ng-container>\r\n            <ng-container matColumnDef=\"stat\">\r\n              <mat-header-cell *matHeaderCellDef> Stat# </mat-header-cell>\r\n              <mat-cell *matCellDef=\"let element\"> {{element.tags.length}} </mat-cell>\r\n            </ng-container>\r\n            <ng-container matColumnDef=\"apiKey\">\r\n              <mat-header-cell *matHeaderCellDef> ApiKey </mat-header-cell>\r\n              <mat-cell *matCellDef=\"let element\"> {{element.apiKey}} </mat-cell>\r\n            </ng-container>\r\n            <ng-container matColumnDef=\"action\">\r\n              <mat-header-cell *matHeaderCellDef> Action </mat-header-cell>\r\n              <mat-cell *matCellDef=\"let element\">\r\n\r\n                <a title=\"Edit Pubisher\" class=\"btn btn-icon btn-light btn-hover-primary btn-sm mx-3\"\r\n                  (click)=\"handleEditClick(element._key)\">\r\n                  <span [inlineSVG]=\"'./assets/media/svg/icons/Communication/Write.svg'\" cacheSVG=\"true\"\r\n                    class=\"svg-icon svg-icon-md svg-icon-primary\">\r\n                  </span>\r\n                </a>\r\n\r\n                <a title=\"Delete Pubisher\" class=\"btn btn-icon btn-light btn-hover-danger btn-sm\"\r\n                  (click)=\"deletePublisher(element._key)\">\r\n                  <span [inlineSVG]=\"'./assets/media/svg/icons/General/Trash.svg'\" cacheSVG=\"false\"\r\n                    class=\"svg-icon svg-icon-md svg-icon-danger\">\r\n                  </span>\r\n                </a>\r\n              </mat-cell>\r\n            </ng-container>\r\n\r\n            <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n            <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n          </mat-table>\r\n          <div *ngIf=\"users.data.length === 0\">\r\n            <p style=\"text-align: center;padding: 10px;\">No records found</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- <table class=\"table table-striped\">\r\n  <thead>\r\n    <tr>\r\n      <th scope=\"col\">Name</th>\r\n      <th scope=\"col\">Email</th>\r\n      <th scope=\"col\">Stats #</th>\r\n      <th scope=\"col\"></th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr *ngFor=\"let user of users; index as i\">\r\n      <td>{{ user.fullname }}</td>\r\n      <td>{{ user.email }}</td>\r\n      <td>{{ user.tags.length }}</td>\r\n      <td>\r\n        <button type=\"button\" \r\n          class=\"btn btn-primary\"\r\n          (click)=\"handleEditClick(user._key)\" >\r\n          Edit\r\n        </button>\r\n      </td>\r\n    </tr>\r\n  </tbody>\r\n</table> -->\r\n<div *ngIf=\"hidden\" class=\"error error-3 d-flex flex-row-fluid bgi-size-cover bgi-position-center\" style=\"background-image: url('./assets/media/error/bg3.jpg'); height: 100%;zoom: 1;\r\n  display: block;\r\n  min-height: 80vh;\r\n  font-size: 14px;\r\n  line-height: 1.4;\r\n  color: #0e1724;\">\r\n  <!--begin::Content-->\r\n  <div class=\"px-10 px-md-30 py-10 py-md-0 d-flex flex-column justify-content-md-center\">\r\n    <p class=\"display-4 font-weight-boldest text-white mb-12\">\r\n      How did you get here\r\n    </p>\r\n    <p class=\"font-size-h1 font-weight-boldest text-dark-75\">\r\n      Sorry you can't access the page you're looking for.\r\n    </p>\r\n    <p class=\"font-size-h4 line-height-md\">\r\n      There may be a misspelling in the URL entered,<br />or the page you are\r\n      looking for may no longer exist.\r\n    </p>\r\n  </div>\r\n  <!--end::Content-->\r\n</div>\r\n<!-- end:: Error -->","import { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { AbstractControl } from '@angular/forms';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HelperService {\r\n\r\n  constructor(\r\n  ) { }\r\n\r\n  static passwordConfirming(c: AbstractControl): { invalid: boolean } {\r\n    if (c.get('password').value !== c.get('passwordConfirm').value) {\r\n      return { invalid: true };\r\n    }\r\n  }\r\n\r\n}\r\n"]}