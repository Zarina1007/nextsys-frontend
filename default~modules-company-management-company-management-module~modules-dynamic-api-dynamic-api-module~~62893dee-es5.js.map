{"version":3,"sources":["webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/icon.js"],"names":["_c0","getMatIconNameNotFoundError","iconName","Error","getMatIconNoHttpProviderError","getMatIconFailedToSanitizeUrlError","url","getMatIconFailedToSanitizeLiteralError","literal","SvgIconConfig","svgText","options","MatIconRegistry","_httpClient","_sanitizer","document","_errorHandler","_svgIconConfigs","Map","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","_document","addSvgIconInNamespace","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","cleanLiteral","sanitize","HTML","addSvgIconSetInNamespace","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","alias","className","set","get","safeUrl","RESOURCE_URL","cachedIcon","cloneSvg","_loadSvgIconFromConfig","pipe","svg","name","key","iconKey","config","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","clear","_svgElementFromConfig","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","filter","iconSetConfig","map","_loadSvgIconSetFromConfig","err","errorMessage","message","handleError","foundIcon","i","length","indexOf","_extractSvgIconFromSet","_fetchIcon","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","nodeName","toLowerCase","_setSvgAttributes","_toSvgElement","_svgElementFromString","appendChild","str","div","createElement","innerHTML","element","attributes","value","setAttribute","childNodes","nodeType","ELEMENT_NODE","viewBox","iconConfig","_a","withCredentials","inProgressFetch","req","responseType","configNamespace","push","svgElement","ɵfac","MatIconRegistry_Factory","t","ɵprov","factory","token","providedIn","ctorParameters","type","decorators","undefined","args","ICON_REGISTRY_PROVIDER_FACTORY","parentRegistry","httpClient","sanitizer","errorHandler","ICON_REGISTRY_PROVIDER","provide","deps","useFactory","MatIconBase","_elementRef","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","_location","location","getPathname","pathname","search","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","join","funcIriPattern","MatIcon","elementRef","_iconRegistry","ariaHidden","_inline","_currentIconFetch","EMPTY","nativeElement","parts","split","changes","svgIconChanges","_svgNamespace","_svgName","unsubscribe","svgIcon","_splitIconName","getNamedSvgIcon","subscribe","_setSvgElement","previousValue","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","cachedElements","_elementsWithExternalReferences","size","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","textContent","path","_cacheChildrenWithExternalReferences","layoutElement","childCount","child","removeChild","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","classList","remove","add","fontIcon","_previousFontIconClass","trim","elements","forEach","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","inline","_fontSet","_cleanupFontValue","_fontIcon","MatIcon_Factory","ɵcmp","selectors","hostAttrs","hostVars","hostBindings","MatIcon_HostBindings","rf","ctx","color","inputs","exportAs","features","ngContentSelectors","decls","vars","template","MatIcon_Template","styles","encapsulation","changeDetection","String","propDecorators","selector","host","None","OnPush","MatIconModule","ɵmod","ɵinj","MatIconModule_Factory","imports","ngJitMode","declarations","exports"],"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","file":"default~modules-company-management-company-management-module~modules-dynamic-api-dynamic-api-module~~62893dee-es5.js","sourcesContent":["import { SecurityContext, ɵɵdefineInjectable, ɵɵinject, ErrorHandler, Injectable, Optional, Inject, SkipSelf, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { of, throwError, forkJoin, Subscription } from 'rxjs';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@angular/platform-browser';\n\nconst _c0 = [\"*\"];\nfunction getMatIconNameNotFoundError(iconName) {\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nfunction getMatIconNoHttpProviderError() {\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n        'Please include the HttpClientModule from @angular/common/http in your ' +\n        'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n    constructor(url, svgText, options) {\n        this.url = url;\n        this.svgText = svgText;\n        this.options = options;\n    }\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nclass MatIconRegistry {\n    constructor(_httpClient, _sanitizer, document, _errorHandler) {\n        this._httpClient = _httpClient;\n        this._sanitizer = _sanitizer;\n        this._errorHandler = _errorHandler;\n        /**\n         * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n         */\n        this._svgIconConfigs = new Map();\n        /**\n         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n         * Multiple icon sets can be registered under the same namespace.\n         */\n        this._iconSetConfigs = new Map();\n        /** Cache for icons loaded by direct URLs. */\n        this._cachedIconsByUrl = new Map();\n        /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n        this._inProgressUrlFetches = new Map();\n        /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n        this._fontCssClassesByAlias = new Map();\n        /**\n         * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n         * The default 'material-icons' value assumes that the material icon font has been loaded as\n         * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n         */\n        this._defaultFontSetClass = 'material-icons';\n        this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIcon(iconName, url, options) {\n        return this.addSvgIconInNamespace('', iconName, url, options);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteral(iconName, literal, options) {\n        return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIconInNamespace(namespace, iconName, url, options) {\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        // TODO: add an ngDevMode check\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig('', cleanLiteral, options));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param url\n     */\n    addSvgIconSet(url, options) {\n        return this.addSvgIconSetInNamespace('', url, options);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteral(literal, options) {\n        return this.addSvgIconSetLiteralInNamespace('', literal, options);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param url\n     */\n    addSvgIconSetInNamespace(namespace, url, options) {\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', cleanLiteral, options));\n    }\n    /**\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * @param alias Alias for the font.\n     * @param className Class name override to be used instead of the alias.\n     */\n    registerFontClassAlias(alias, className = alias) {\n        this._fontCssClassesByAlias.set(alias, className);\n        return this;\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     */\n    classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     *\n     * @param className\n     */\n    setDefaultFontSetClass(className) {\n        this._defaultFontSetClass = className;\n        return this;\n    }\n    /**\n     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param safeUrl URL from which to fetch the SVG icon.\n     */\n    getSvgIconFromUrl(safeUrl) {\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        const cachedIcon = this._cachedIconsByUrl.get(url);\n        if (cachedIcon) {\n            return of(cloneSvg(cachedIcon));\n        }\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe(tap(svg => this._cachedIconsByUrl.set(url, svg)), map(svg => cloneSvg(svg)));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param name Name of the icon to be retrieved.\n     * @param namespace Namespace in which to look for the icon.\n     */\n    getNamedSvgIcon(name, namespace = '') {\n        // Return (copy of) cached icon if possible.\n        const key = iconKey(namespace, name);\n        const config = this._svgIconConfigs.get(key);\n        if (config) {\n            return this._getSvgFromConfig(config);\n        }\n        // See if we have any icon sets registered for the namespace.\n        const iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return throwError(getMatIconNameNotFoundError(key));\n    }\n    ngOnDestroy() {\n        this._svgIconConfigs.clear();\n        this._iconSetConfigs.clear();\n        this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     */\n    _getSvgFromConfig(config) {\n        if (config.svgText) {\n            // We already have the SVG element for this icon, return a copy.\n            return of(cloneSvg(this._svgElementFromConfig(config)));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this._loadSvgIconFromConfig(config).pipe(map(svg => cloneSvg(svg)));\n        }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     */\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return of(namedIcon);\n        }\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n        const iconSetFetchRequests = iconSetConfigs\n            .filter(iconSetConfig => !iconSetConfig.svgText)\n            .map(iconSetConfig => {\n            return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError((err) => {\n                const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n                // Swallow errors fetching individual URLs so the\n                // combined Observable won't necessarily fail.\n                const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n                return of(null);\n            }));\n        });\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return forkJoin(iconSetFetchRequests).pipe(map(() => {\n            const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            // TODO: add an ngDevMode check\n            if (!foundIcon) {\n                throw getMatIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        }));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n            const config = iconSetConfigs[i];\n            // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of\n            // the parsing by doing a quick check using `indexOf` to see if there's any chance for the\n            // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least\n            // some of the parsing.\n            if (config.svgText && config.svgText.indexOf(iconName) > -1) {\n                const svg = this._svgElementFromConfig(config);\n                const foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     */\n    _loadSvgIconFromConfig(config) {\n        return this._fetchIcon(config).pipe(tap(svgText => config.svgText = svgText), map(() => this._svgElementFromConfig(config)));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the\n     * SvgIconConfig and attaches it to the config.\n     */\n    _loadSvgIconSetFromConfig(config) {\n        if (config.svgText) {\n            return of(null);\n        }\n        return this._fetchIcon(config).pipe(tap(svgText => config.svgText = svgText));\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractSvgIconFromSet(iconSet, iconName, options) {\n        // Use the `id=\"iconName\"` syntax in order to escape special\n        // characters in the ID (versus using the #iconName syntax).\n        const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n        if (!iconSource) {\n            return null;\n        }\n        // Clone the element and remove the ID to prevent multiple elements from being added\n        // to the page with the same ID.\n        const iconElement = iconSource.cloneNode(true);\n        iconElement.removeAttribute('id');\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n            return this._setSvgAttributes(iconElement, options);\n        }\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n            return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n        }\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n        const svg = this._svgElementFromString('<svg></svg>');\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg, options);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     */\n    _svgElementFromString(str) {\n        const div = this._document.createElement('DIV');\n        div.innerHTML = str;\n        const svg = div.querySelector('svg');\n        // TODO: add an ngDevMode check\n        if (!svg) {\n            throw Error('<svg> tag not found');\n        }\n        return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     */\n    _toSvgElement(element) {\n        const svg = this._svgElementFromString('<svg></svg>');\n        const attributes = element.attributes;\n        // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n        for (let i = 0; i < attributes.length; i++) {\n            const { name, value } = attributes[i];\n            if (name !== 'id') {\n                svg.setAttribute(name, value);\n            }\n        }\n        for (let i = 0; i < element.childNodes.length; i++) {\n            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n                svg.appendChild(element.childNodes[i].cloneNode(true));\n            }\n        }\n        return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     */\n    _setSvgAttributes(svg, options) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        if (options && options.viewBox) {\n            svg.setAttribute('viewBox', options.viewBox);\n        }\n        return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given icon. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     */\n    _fetchIcon(iconConfig) {\n        var _a;\n        const { url: safeUrl, options } = iconConfig;\n        const withCredentials = (_a = options === null || options === void 0 ? void 0 : options.withCredentials) !== null && _a !== void 0 ? _a : false;\n        if (!this._httpClient) {\n            throw getMatIconNoHttpProviderError();\n        }\n        // TODO: add an ngDevMode check\n        if (safeUrl == null) {\n            throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n        }\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        // TODO: add an ngDevMode check\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n        const inProgressFetch = this._inProgressUrlFetches.get(url);\n        if (inProgressFetch) {\n            return inProgressFetch;\n        }\n        const req = this._httpClient.get(url, { responseType: 'text', withCredentials }).pipe(finalize(() => this._inProgressUrlFetches.delete(url)), share());\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param iconName Name under which to register the config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconConfig(namespace, iconName, config) {\n        this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n        return this;\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconSetConfig(namespace, config) {\n        const configNamespace = this._iconSetConfigs.get(namespace);\n        if (configNamespace) {\n            configNamespace.push(config);\n        }\n        else {\n            this._iconSetConfigs.set(namespace, [config]);\n        }\n        return this;\n    }\n    /** Parses a config's text into an SVG element. */\n    _svgElementFromConfig(config) {\n        if (!config.svgElement) {\n            const svg = this._svgElementFromString(config.svgText);\n            this._setSvgAttributes(svg, config.options);\n            config.svgElement = svg;\n        }\n        return config.svgElement;\n    }\n}\nMatIconRegistry.ɵfac = function MatIconRegistry_Factory(t) { return new (t || MatIconRegistry)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient, 8), ɵngcc0.ɵɵinject(ɵngcc2.DomSanitizer), ɵngcc0.ɵɵinject(DOCUMENT, 8), ɵngcc0.ɵɵinject(ɵngcc0.ErrorHandler)); };\nMatIconRegistry.ɵprov = ɵɵdefineInjectable({ factory: function MatIconRegistry_Factory() { return new MatIconRegistry(ɵɵinject(HttpClient, 8), ɵɵinject(DomSanitizer), ɵɵinject(DOCUMENT, 8), ɵɵinject(ErrorHandler)); }, token: MatIconRegistry, providedIn: \"root\" });\nMatIconRegistry.ctorParameters = () => [\n    { type: HttpClient, decorators: [{ type: Optional }] },\n    { type: DomSanitizer },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ErrorHandler }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatIconRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.HttpClient, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc2.DomSanitizer }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.ErrorHandler }]; }, null); })();\n/** @docs-private */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/** @docs-private */\nconst ICON_REGISTRY_PROVIDER = {\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MatIconRegistry,\n    deps: [\n        [new Optional(), new SkipSelf(), MatIconRegistry],\n        [new Optional(), HttpClient],\n        DomSanitizer,\n        ErrorHandler,\n        [new Optional(), DOCUMENT],\n    ],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg) {\n    return svg.cloneNode(true);\n}\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nclass MatIconBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatIconMixinBase = mixinColor(MatIconBase);\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY\n});\n/** @docs-private */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    const _document = inject(DOCUMENT);\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => _location ? (_location.pathname + _location.search) : ''\n    };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke'\n];\nconst ɵ0 = attr => `[${attr}]`;\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(ɵ0).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon extends _MatIconMixinBase {\n    constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler) {\n        super(elementRef);\n        this._iconRegistry = _iconRegistry;\n        this._location = _location;\n        this._errorHandler = _errorHandler;\n        this._inline = false;\n        /** Subscription to the current in-progress SVG icon request. */\n        this._currentIconFetch = Subscription.EMPTY;\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     */\n    get inline() {\n        return this._inline;\n    }\n    set inline(inline) {\n        this._inline = coerceBooleanProperty(inline);\n    }\n    /** Font set that the icon is a part of. */\n    get fontSet() { return this._fontSet; }\n    set fontSet(value) {\n        this._fontSet = this._cleanupFontValue(value);\n    }\n    /** Name of an icon within a font set. */\n    get fontIcon() { return this._fontIcon; }\n    set fontIcon(value) {\n        this._fontIcon = this._cleanupFontValue(value);\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1: return ['', parts[0]]; // Use default namespace.\n            case 2: return parts;\n            default: throw Error(`Invalid icon name: \"${iconName}\"`); // TODO: add an ngDevMode check\n        }\n    }\n    ngOnChanges(changes) {\n        // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n        const svgIconChanges = changes['svgIcon'];\n        this._svgNamespace = null;\n        this._svgName = null;\n        if (svgIconChanges) {\n            this._currentIconFetch.unsubscribe();\n            if (this.svgIcon) {\n                const [namespace, iconName] = this._splitIconName(this.svgIcon);\n                if (namespace) {\n                    this._svgNamespace = namespace;\n                }\n                if (iconName) {\n                    this._svgName = iconName;\n                }\n                this._currentIconFetch = this._iconRegistry.getNamedSvgIcon(iconName, namespace)\n                    .pipe(take(1))\n                    .subscribe(svg => this._setSvgElement(svg), (err) => {\n                    const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n                    this._errorHandler.handleError(new Error(errorMessage));\n                });\n            }\n            else if (svgIconChanges.previousValue) {\n                this._clearSvgElement();\n            }\n        }\n        if (this._usingFontIcon()) {\n            this._updateFontIconClasses();\n        }\n    }\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        if (this._usingFontIcon()) {\n            this._updateFontIconClasses();\n        }\n    }\n    ngAfterViewChecked() {\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && cachedElements.size) {\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._currentIconFetch.unsubscribe();\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n        // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n        // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n        const styleTags = svg.querySelectorAll('style');\n        for (let i = 0; i < styleTags.length; i++) {\n            styleTags[i].textContent += ' ';\n        }\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        const path = this._location.getPathname();\n        this._previousPath = path;\n        this._cacheChildrenWithExternalReferences(svg);\n        this._prependPathToReferences(path);\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    _clearSvgElement() {\n        const layoutElement = this._elementRef.nativeElement;\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                layoutElement.removeChild(child);\n            }\n        }\n    }\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        const elem = this._elementRef.nativeElement;\n        const fontSetClass = this.fontSet ?\n            this._iconRegistry.classNameForFontAlias(this.fontSet) :\n            this._iconRegistry.getDefaultFontSetClass();\n        if (fontSetClass != this._previousFontSetClass) {\n            if (this._previousFontSetClass) {\n                elem.classList.remove(this._previousFontSetClass);\n            }\n            if (fontSetClass) {\n                elem.classList.add(fontSetClass);\n            }\n            this._previousFontSetClass = fontSetClass;\n        }\n        if (this.fontIcon != this._previousFontIconClass) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n    _prependPathToReferences(path) {\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((attrs, element) => {\n                attrs.forEach(attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                });\n            });\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        const elements = this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map();\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach(attr => {\n                const elementWithReference = elementsWithFuncIri[i];\n                const value = elementWithReference.getAttribute(attr);\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    }\n                    attributes.push({ name: attr, value: match[1] });\n                }\n            });\n        }\n    }\n}\nMatIcon.ɵfac = function MatIcon_Factory(t) { return new (t || MatIcon)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatIconRegistry), ɵngcc0.ɵɵinjectAttribute('aria-hidden'), ɵngcc0.ɵɵdirectiveInject(MAT_ICON_LOCATION), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ErrorHandler)); };\nMatIcon.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatIcon, selectors: [[\"mat-icon\"]], hostAttrs: [\"role\", \"img\", 1, \"mat-icon\", \"notranslate\"], hostVars: 7, hostBindings: function MatIcon_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"data-mat-icon-type\", ctx._usingFontIcon() ? \"font\" : \"svg\")(\"data-mat-icon-name\", ctx._svgName || ctx.fontIcon)(\"data-mat-icon-namespace\", ctx._svgNamespace || ctx.fontSet);\n        ɵngcc0.ɵɵclassProp(\"mat-icon-inline\", ctx.inline)(\"mat-icon-no-color\", ctx.color !== \"primary\" && ctx.color !== \"accent\" && ctx.color !== \"warn\");\n    } }, inputs: { color: \"color\", inline: \"inline\", fontSet: \"fontSet\", fontIcon: \"fontIcon\", svgIcon: \"svgIcon\" }, exportAs: [\"matIcon\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function MatIcon_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatIcon.ctorParameters = () => [\n    { type: ElementRef },\n    { type: MatIconRegistry },\n    { type: String, decorators: [{ type: Attribute, args: ['aria-hidden',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_ICON_LOCATION,] }] },\n    { type: ErrorHandler }\n];\nMatIcon.propDecorators = {\n    inline: [{ type: Input }],\n    svgIcon: [{ type: Input }],\n    fontSet: [{ type: Input }],\n    fontIcon: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatIcon, [{\n        type: Component,\n        args: [{\n                template: '<ng-content></ng-content>',\n                selector: 'mat-icon',\n                exportAs: 'matIcon',\n                inputs: ['color'],\n                host: {\n                    'role': 'img',\n                    'class': 'mat-icon notranslate',\n                    '[attr.data-mat-icon-type]': '_usingFontIcon() ? \"font\" : \"svg\"',\n                    '[attr.data-mat-icon-name]': '_svgName || fontIcon',\n                    '[attr.data-mat-icon-namespace]': '_svgNamespace || fontSet',\n                    '[class.mat-icon-inline]': 'inline',\n                    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"'\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: MatIconRegistry }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['aria-hidden']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_ICON_LOCATION]\n            }] }, { type: ɵngcc0.ErrorHandler }]; }, { inline: [{\n            type: Input\n        }], fontSet: [{\n            type: Input\n        }], fontIcon: [{\n            type: Input\n        }], svgIcon: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatIconModule {\n}\nMatIconModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatIconModule });\nMatIconModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatIconModule_Factory(t) { return new (t || MatIconModule)(); }, imports: [[MatCommonModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatIconModule, { declarations: function () { return [MatIcon]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatIcon, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatIconModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: [MatIcon, MatCommonModule],\n                declarations: [MatIcon]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError, ɵ0 };\n\n//# sourceMappingURL=icon.js.map"]}