{"version":3,"sources":["webpack:///node_modules/@angular/cdk/fesm2015/layout.js","webpack:///node_modules/@angular/material/fesm2015/icon.js","webpack:///node_modules/@angular/material/fesm2015/snack-bar.js"],"names":["LayoutModule","ɵmod","type","ɵinj","factory","LayoutModule_Factory","t","args","mediaQueriesForWebkitCompatibility","Set","mediaQueryStyleNode","MediaMatcher","_platform","_matchMedia","isBrowser","window","matchMedia","bind","noopMatchMedia","query","WEBKIT","createEmptyStyleRule","ɵfac","MediaMatcher_Factory","ɵprov","token","providedIn","ctorParameters","has","document","createElement","setAttribute","head","appendChild","sheet","insertRule","add","e","console","error","matches","media","addListener","removeListener","BreakpointObserver","_mediaMatcher","_zone","_queries","Map","_destroySubject","next","complete","value","queries","splitQueries","some","mediaQuery","_registerQuery","mql","observables","map","observable","stateObservable","pipe","breakpointStates","response","breakpoints","forEach","get","queryObservable","observer","handler","run","output","set","BreakpointObserver_Factory","split","reduce","a1","a2","concat","trim","Breakpoints","XSmall","Small","Medium","Large","XLarge","Handset","Tablet","Web","HandsetPortrait","TabletPortrait","WebPortrait","HandsetLandscape","TabletLandscape","WebLandscape","_c0","getMatIconNameNotFoundError","iconName","Error","getMatIconNoHttpProviderError","getMatIconFailedToSanitizeUrlError","url","getMatIconFailedToSanitizeLiteralError","literal","SvgIconConfig","svgText","options","MatIconRegistry","_httpClient","_sanitizer","_errorHandler","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","_document","addSvgIconInNamespace","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","cleanLiteral","sanitize","HTML","addSvgIconSetInNamespace","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","alias","className","safeUrl","RESOURCE_URL","cachedIcon","cloneSvg","_loadSvgIconFromConfig","svg","name","key","iconKey","config","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","clear","_svgElementFromConfig","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","filter","iconSetConfig","_loadSvgIconSetFromConfig","err","errorMessage","message","handleError","foundIcon","i","length","indexOf","_extractSvgIconFromSet","_fetchIcon","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","nodeName","toLowerCase","_setSvgAttributes","_toSvgElement","_svgElementFromString","str","div","innerHTML","element","attributes","childNodes","nodeType","ELEMENT_NODE","viewBox","iconConfig","_a","withCredentials","inProgressFetch","req","responseType","configNamespace","push","svgElement","MatIconRegistry_Factory","decorators","undefined","ICON_REGISTRY_PROVIDER_FACTORY","parentRegistry","httpClient","sanitizer","errorHandler","ICON_REGISTRY_PROVIDER","provide","deps","useFactory","MatIconBase","_elementRef","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","_location","location","getPathname","pathname","search","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","join","funcIriPattern","MatIcon","elementRef","_iconRegistry","ariaHidden","_inline","_currentIconFetch","EMPTY","nativeElement","parts","changes","svgIconChanges","_svgNamespace","_svgName","unsubscribe","svgIcon","_splitIconName","getNamedSvgIcon","subscribe","_setSvgElement","previousValue","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","cachedElements","_elementsWithExternalReferences","size","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","textContent","path","_cacheChildrenWithExternalReferences","layoutElement","childCount","child","removeChild","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","classList","remove","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","inline","_fontSet","_cleanupFontValue","_fontIcon","MatIcon_Factory","ɵcmp","selectors","hostAttrs","hostVars","hostBindings","MatIcon_HostBindings","rf","ctx","color","inputs","exportAs","features","ngContentSelectors","decls","vars","template","MatIcon_Template","styles","encapsulation","changeDetection","String","propDecorators","selector","host","None","OnPush","MatIconModule","MatIconModule_Factory","imports","ngJitMode","declarations","exports","SimpleSnackBar_div_2_Template","_r2","SimpleSnackBar_div_2_Template_button_click_1_listener","ctx_r1","action","ctx_r0","data","MatSnackBarContainer_ng_template_0_Template","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","duration","horizontalPosition","verticalPosition","MAX_TIMEOUT","Math","pow","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","setTimeout","min","dispose","dismissedByAction","_onEnter","SimpleSnackBar","snackBarRef","SimpleSnackBar_Factory","consts","SimpleSnackBar_Template","hasAction","directives","matSnackBarAnimations","snackBarState","transform","opacity","MatSnackBarContainer","_ngZone","_changeDetectorRef","snackBarConfig","_destroyed","_animationState","attachDomPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","_role","attachComponentPortal","attachTemplatePortal","event","fromState","toState","_completeExit","onEnter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","Array","isArray","cssClass","hasAttached","ngDevMode","MatSnackBarContainer_Factory","viewQuery","MatSnackBarContainer_Query","_t","first","MatSnackBarContainer_HostBindings","MatSnackBarContainer_animation_state_done_HostBindingHandler","$event","onAnimationEnd","MatSnackBarContainer_Template","animation","Default","animations","MatSnackBarModule","MatSnackBarModule_Factory","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","simpleSnackBarComponent","snackBarContainerComponent","handsetCssClass","component","_attach","_config","Object","assign","openFromComponent","_openedSnackBarRef","overlayRef","userInjector","viewContainerRef","injector","create","parent","providers","useValue","containerPortal","containerRef","attach","instance","content","userConfig","_createOverlay","container","_attachSnackBarContainer","$implicit","_createInjector","contentRef","observe","detachments","state","overlayElement","_animateSnackBar","afterDismissed","enter","afterOpened","_dismissAfter","announce","overlayConfig","direction","positionStrategy","position","global","isRtl","isLeft","isRight","left","right","centerHorizontally","top","bottom","MatSnackBar_Factory"],"mappings":"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","file":"default~modules-company-management-company-management-module~modules-material-material-module~module~06e81428-es5.js","sourcesContent":["import { NgModule, ɵɵdefineInjectable, ɵɵinject, Injectable, NgZone } from '@angular/core';\nimport { coerceArray } from '@angular/cdk/coercion';\nimport { Subject, combineLatest, concat, Observable } from 'rxjs';\nimport { take, skip, debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport { Platform } from '@angular/cdk/platform';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nclass LayoutModule {\n}\nLayoutModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: LayoutModule });\nLayoutModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function LayoutModule_Factory(t) { return new (t || LayoutModule)(); } });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LayoutModule, [{\n        type: NgModule,\n        args: [{}]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Global registry for all dynamically-created, injected media queries. */\nconst mediaQueriesForWebkitCompatibility = new Set();\n/** Style tag that holds all of the dynamically-created media queries. */\nlet mediaQueryStyleNode;\n/** A utility for calling matchMedia queries. */\nclass MediaMatcher {\n    constructor(_platform) {\n        this._platform = _platform;\n        this._matchMedia = this._platform.isBrowser && window.matchMedia ?\n            // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n            // call it from a different scope.\n            window.matchMedia.bind(window) :\n            noopMatchMedia;\n    }\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     */\n    matchMedia(query) {\n        if (this._platform.WEBKIT) {\n            createEmptyStyleRule(query);\n        }\n        return this._matchMedia(query);\n    }\n}\nMediaMatcher.ɵfac = function MediaMatcher_Factory(t) { return new (t || MediaMatcher)(ɵngcc0.ɵɵinject(ɵngcc1.Platform)); };\nMediaMatcher.ɵprov = ɵɵdefineInjectable({ factory: function MediaMatcher_Factory() { return new MediaMatcher(ɵɵinject(Platform)); }, token: MediaMatcher, providedIn: \"root\" });\nMediaMatcher.ctorParameters = () => [\n    { type: Platform }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MediaMatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }]; }, null); })();\n/**\n * For Webkit engines that only trigger the MediaQueryListListener when\n * there is at least one CSS selector for the respective media query.\n */\nfunction createEmptyStyleRule(query) {\n    if (mediaQueriesForWebkitCompatibility.has(query)) {\n        return;\n    }\n    try {\n        if (!mediaQueryStyleNode) {\n            mediaQueryStyleNode = document.createElement('style');\n            mediaQueryStyleNode.setAttribute('type', 'text/css');\n            document.head.appendChild(mediaQueryStyleNode);\n        }\n        if (mediaQueryStyleNode.sheet) {\n            mediaQueryStyleNode.sheet\n                .insertRule(`@media ${query} {.fx-query-test{ }}`, 0);\n            mediaQueriesForWebkitCompatibility.add(query);\n        }\n    }\n    catch (e) {\n        console.error(e);\n    }\n}\n/** No-op matchMedia replacement for non-browser platforms. */\nfunction noopMatchMedia(query) {\n    // Use `as any` here to avoid adding additional necessary properties for\n    // the noop matcher.\n    return {\n        matches: query === 'all' || query === '',\n        media: query,\n        addListener: () => { },\n        removeListener: () => { }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Utility for checking the matching state of @media queries. */\nclass BreakpointObserver {\n    constructor(_mediaMatcher, _zone) {\n        this._mediaMatcher = _mediaMatcher;\n        this._zone = _zone;\n        /**  A map of all media queries currently being listened for. */\n        this._queries = new Map();\n        /** A subject for all other observables to takeUntil based on. */\n        this._destroySubject = new Subject();\n    }\n    /** Completes the active subject, signalling to all other observables to complete. */\n    ngOnDestroy() {\n        this._destroySubject.next();\n        this._destroySubject.complete();\n    }\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param value One or more media queries to check.\n     * @returns Whether any of the media queries match.\n     */\n    isMatched(value) {\n        const queries = splitQueries(coerceArray(value));\n        return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n    }\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param value One or more media queries to check.\n     * @returns A stream of matches for the given queries.\n     */\n    observe(value) {\n        const queries = splitQueries(coerceArray(value));\n        const observables = queries.map(query => this._registerQuery(query).observable);\n        let stateObservable = combineLatest(observables);\n        // Emit the first state immediately, and then debounce the subsequent emissions.\n        stateObservable = concat(stateObservable.pipe(take(1)), stateObservable.pipe(skip(1), debounceTime(0)));\n        return stateObservable.pipe(map(breakpointStates => {\n            const response = {\n                matches: false,\n                breakpoints: {},\n            };\n            breakpointStates.forEach(({ matches, query }) => {\n                response.matches = response.matches || matches;\n                response.breakpoints[query] = matches;\n            });\n            return response;\n        }));\n    }\n    /** Registers a specific query to be listened for. */\n    _registerQuery(query) {\n        // Only set up a new MediaQueryList if it is not already being listened for.\n        if (this._queries.has(query)) {\n            return this._queries.get(query);\n        }\n        const mql = this._mediaMatcher.matchMedia(query);\n        // Create callback for match changes and add it is as a listener.\n        const queryObservable = new Observable((observer) => {\n            // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n            // back into the zone because matchMedia is only included in Zone.js by loading the\n            // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n            // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n            // patches it.\n            const handler = (e) => this._zone.run(() => observer.next(e));\n            mql.addListener(handler);\n            return () => {\n                mql.removeListener(handler);\n            };\n        }).pipe(startWith(mql), map(({ matches }) => ({ query, matches })), takeUntil(this._destroySubject));\n        // Add the MediaQueryList to the set of queries.\n        const output = { observable: queryObservable, mql };\n        this._queries.set(query, output);\n        return output;\n    }\n}\nBreakpointObserver.ɵfac = function BreakpointObserver_Factory(t) { return new (t || BreakpointObserver)(ɵngcc0.ɵɵinject(MediaMatcher), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nBreakpointObserver.ɵprov = ɵɵdefineInjectable({ factory: function BreakpointObserver_Factory() { return new BreakpointObserver(ɵɵinject(MediaMatcher), ɵɵinject(NgZone)); }, token: BreakpointObserver, providedIn: \"root\" });\nBreakpointObserver.ctorParameters = () => [\n    { type: MediaMatcher },\n    { type: NgZone }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BreakpointObserver, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: MediaMatcher }, { type: ɵngcc0.NgZone }]; }, null); })();\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries) {\n    return queries.map(query => query.split(','))\n        .reduce((a1, a2) => a1.concat(a2))\n        .map(query => query.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\nconst Breakpoints = {\n    XSmall: '(max-width: 599.99px)',\n    Small: '(min-width: 600px) and (max-width: 959.99px)',\n    Medium: '(min-width: 960px) and (max-width: 1279.99px)',\n    Large: '(min-width: 1280px) and (max-width: 1919.99px)',\n    XLarge: '(min-width: 1920px)',\n    Handset: '(max-width: 599.99px) and (orientation: portrait), ' +\n        '(max-width: 959.99px) and (orientation: landscape)',\n    Tablet: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait), ' +\n        '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',\n    Web: '(min-width: 840px) and (orientation: portrait), ' +\n        '(min-width: 1280px) and (orientation: landscape)',\n    HandsetPortrait: '(max-width: 599.99px) and (orientation: portrait)',\n    TabletPortrait: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait)',\n    WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n    HandsetLandscape: '(max-width: 959.99px) and (orientation: landscape)',\n    TabletLandscape: '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',\n    WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BreakpointObserver, Breakpoints, LayoutModule, MediaMatcher };\n\n//# sourceMappingURL=layout.js.map","import { SecurityContext, ɵɵdefineInjectable, ɵɵinject, ErrorHandler, Injectable, Optional, Inject, SkipSelf, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { of, throwError, forkJoin, Subscription } from 'rxjs';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@angular/platform-browser';\n\nconst _c0 = [\"*\"];\nfunction getMatIconNameNotFoundError(iconName) {\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nfunction getMatIconNoHttpProviderError() {\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n        'Please include the HttpClientModule from @angular/common/http in your ' +\n        'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n    constructor(url, svgText, options) {\n        this.url = url;\n        this.svgText = svgText;\n        this.options = options;\n    }\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nclass MatIconRegistry {\n    constructor(_httpClient, _sanitizer, document, _errorHandler) {\n        this._httpClient = _httpClient;\n        this._sanitizer = _sanitizer;\n        this._errorHandler = _errorHandler;\n        /**\n         * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n         */\n        this._svgIconConfigs = new Map();\n        /**\n         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n         * Multiple icon sets can be registered under the same namespace.\n         */\n        this._iconSetConfigs = new Map();\n        /** Cache for icons loaded by direct URLs. */\n        this._cachedIconsByUrl = new Map();\n        /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n        this._inProgressUrlFetches = new Map();\n        /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n        this._fontCssClassesByAlias = new Map();\n        /**\n         * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n         * The default 'material-icons' value assumes that the material icon font has been loaded as\n         * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n         */\n        this._defaultFontSetClass = 'material-icons';\n        this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIcon(iconName, url, options) {\n        return this.addSvgIconInNamespace('', iconName, url, options);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteral(iconName, literal, options) {\n        return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIconInNamespace(namespace, iconName, url, options) {\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        // TODO: add an ngDevMode check\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig('', cleanLiteral, options));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param url\n     */\n    addSvgIconSet(url, options) {\n        return this.addSvgIconSetInNamespace('', url, options);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteral(literal, options) {\n        return this.addSvgIconSetLiteralInNamespace('', literal, options);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param url\n     */\n    addSvgIconSetInNamespace(namespace, url, options) {\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', cleanLiteral, options));\n    }\n    /**\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * @param alias Alias for the font.\n     * @param className Class name override to be used instead of the alias.\n     */\n    registerFontClassAlias(alias, className = alias) {\n        this._fontCssClassesByAlias.set(alias, className);\n        return this;\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     */\n    classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     *\n     * @param className\n     */\n    setDefaultFontSetClass(className) {\n        this._defaultFontSetClass = className;\n        return this;\n    }\n    /**\n     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param safeUrl URL from which to fetch the SVG icon.\n     */\n    getSvgIconFromUrl(safeUrl) {\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        const cachedIcon = this._cachedIconsByUrl.get(url);\n        if (cachedIcon) {\n            return of(cloneSvg(cachedIcon));\n        }\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe(tap(svg => this._cachedIconsByUrl.set(url, svg)), map(svg => cloneSvg(svg)));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param name Name of the icon to be retrieved.\n     * @param namespace Namespace in which to look for the icon.\n     */\n    getNamedSvgIcon(name, namespace = '') {\n        // Return (copy of) cached icon if possible.\n        const key = iconKey(namespace, name);\n        const config = this._svgIconConfigs.get(key);\n        if (config) {\n            return this._getSvgFromConfig(config);\n        }\n        // See if we have any icon sets registered for the namespace.\n        const iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return throwError(getMatIconNameNotFoundError(key));\n    }\n    ngOnDestroy() {\n        this._svgIconConfigs.clear();\n        this._iconSetConfigs.clear();\n        this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     */\n    _getSvgFromConfig(config) {\n        if (config.svgText) {\n            // We already have the SVG element for this icon, return a copy.\n            return of(cloneSvg(this._svgElementFromConfig(config)));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this._loadSvgIconFromConfig(config).pipe(map(svg => cloneSvg(svg)));\n        }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     */\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return of(namedIcon);\n        }\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n        const iconSetFetchRequests = iconSetConfigs\n            .filter(iconSetConfig => !iconSetConfig.svgText)\n            .map(iconSetConfig => {\n            return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError((err) => {\n                const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n                // Swallow errors fetching individual URLs so the\n                // combined Observable won't necessarily fail.\n                const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n                return of(null);\n            }));\n        });\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return forkJoin(iconSetFetchRequests).pipe(map(() => {\n            const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            // TODO: add an ngDevMode check\n            if (!foundIcon) {\n                throw getMatIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        }));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n            const config = iconSetConfigs[i];\n            // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of\n            // the parsing by doing a quick check using `indexOf` to see if there's any chance for the\n            // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least\n            // some of the parsing.\n            if (config.svgText && config.svgText.indexOf(iconName) > -1) {\n                const svg = this._svgElementFromConfig(config);\n                const foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     */\n    _loadSvgIconFromConfig(config) {\n        return this._fetchIcon(config).pipe(tap(svgText => config.svgText = svgText), map(() => this._svgElementFromConfig(config)));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the\n     * SvgIconConfig and attaches it to the config.\n     */\n    _loadSvgIconSetFromConfig(config) {\n        if (config.svgText) {\n            return of(null);\n        }\n        return this._fetchIcon(config).pipe(tap(svgText => config.svgText = svgText));\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractSvgIconFromSet(iconSet, iconName, options) {\n        // Use the `id=\"iconName\"` syntax in order to escape special\n        // characters in the ID (versus using the #iconName syntax).\n        const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n        if (!iconSource) {\n            return null;\n        }\n        // Clone the element and remove the ID to prevent multiple elements from being added\n        // to the page with the same ID.\n        const iconElement = iconSource.cloneNode(true);\n        iconElement.removeAttribute('id');\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n            return this._setSvgAttributes(iconElement, options);\n        }\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n            return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n        }\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n        const svg = this._svgElementFromString('<svg></svg>');\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg, options);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     */\n    _svgElementFromString(str) {\n        const div = this._document.createElement('DIV');\n        div.innerHTML = str;\n        const svg = div.querySelector('svg');\n        // TODO: add an ngDevMode check\n        if (!svg) {\n            throw Error('<svg> tag not found');\n        }\n        return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     */\n    _toSvgElement(element) {\n        const svg = this._svgElementFromString('<svg></svg>');\n        const attributes = element.attributes;\n        // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n        for (let i = 0; i < attributes.length; i++) {\n            const { name, value } = attributes[i];\n            if (name !== 'id') {\n                svg.setAttribute(name, value);\n            }\n        }\n        for (let i = 0; i < element.childNodes.length; i++) {\n            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n                svg.appendChild(element.childNodes[i].cloneNode(true));\n            }\n        }\n        return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     */\n    _setSvgAttributes(svg, options) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        if (options && options.viewBox) {\n            svg.setAttribute('viewBox', options.viewBox);\n        }\n        return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given icon. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     */\n    _fetchIcon(iconConfig) {\n        var _a;\n        const { url: safeUrl, options } = iconConfig;\n        const withCredentials = (_a = options === null || options === void 0 ? void 0 : options.withCredentials) !== null && _a !== void 0 ? _a : false;\n        if (!this._httpClient) {\n            throw getMatIconNoHttpProviderError();\n        }\n        // TODO: add an ngDevMode check\n        if (safeUrl == null) {\n            throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n        }\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        // TODO: add an ngDevMode check\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n        const inProgressFetch = this._inProgressUrlFetches.get(url);\n        if (inProgressFetch) {\n            return inProgressFetch;\n        }\n        const req = this._httpClient.get(url, { responseType: 'text', withCredentials }).pipe(finalize(() => this._inProgressUrlFetches.delete(url)), share());\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param iconName Name under which to register the config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconConfig(namespace, iconName, config) {\n        this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n        return this;\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconSetConfig(namespace, config) {\n        const configNamespace = this._iconSetConfigs.get(namespace);\n        if (configNamespace) {\n            configNamespace.push(config);\n        }\n        else {\n            this._iconSetConfigs.set(namespace, [config]);\n        }\n        return this;\n    }\n    /** Parses a config's text into an SVG element. */\n    _svgElementFromConfig(config) {\n        if (!config.svgElement) {\n            const svg = this._svgElementFromString(config.svgText);\n            this._setSvgAttributes(svg, config.options);\n            config.svgElement = svg;\n        }\n        return config.svgElement;\n    }\n}\nMatIconRegistry.ɵfac = function MatIconRegistry_Factory(t) { return new (t || MatIconRegistry)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient, 8), ɵngcc0.ɵɵinject(ɵngcc2.DomSanitizer), ɵngcc0.ɵɵinject(DOCUMENT, 8), ɵngcc0.ɵɵinject(ɵngcc0.ErrorHandler)); };\nMatIconRegistry.ɵprov = ɵɵdefineInjectable({ factory: function MatIconRegistry_Factory() { return new MatIconRegistry(ɵɵinject(HttpClient, 8), ɵɵinject(DomSanitizer), ɵɵinject(DOCUMENT, 8), ɵɵinject(ErrorHandler)); }, token: MatIconRegistry, providedIn: \"root\" });\nMatIconRegistry.ctorParameters = () => [\n    { type: HttpClient, decorators: [{ type: Optional }] },\n    { type: DomSanitizer },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ErrorHandler }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatIconRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.HttpClient, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc2.DomSanitizer }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.ErrorHandler }]; }, null); })();\n/** @docs-private */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/** @docs-private */\nconst ICON_REGISTRY_PROVIDER = {\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MatIconRegistry,\n    deps: [\n        [new Optional(), new SkipSelf(), MatIconRegistry],\n        [new Optional(), HttpClient],\n        DomSanitizer,\n        ErrorHandler,\n        [new Optional(), DOCUMENT],\n    ],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg) {\n    return svg.cloneNode(true);\n}\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nclass MatIconBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatIconMixinBase = mixinColor(MatIconBase);\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY\n});\n/** @docs-private */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    const _document = inject(DOCUMENT);\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => _location ? (_location.pathname + _location.search) : ''\n    };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke'\n];\nconst ɵ0 = attr => `[${attr}]`;\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(ɵ0).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon extends _MatIconMixinBase {\n    constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler) {\n        super(elementRef);\n        this._iconRegistry = _iconRegistry;\n        this._location = _location;\n        this._errorHandler = _errorHandler;\n        this._inline = false;\n        /** Subscription to the current in-progress SVG icon request. */\n        this._currentIconFetch = Subscription.EMPTY;\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     */\n    get inline() {\n        return this._inline;\n    }\n    set inline(inline) {\n        this._inline = coerceBooleanProperty(inline);\n    }\n    /** Font set that the icon is a part of. */\n    get fontSet() { return this._fontSet; }\n    set fontSet(value) {\n        this._fontSet = this._cleanupFontValue(value);\n    }\n    /** Name of an icon within a font set. */\n    get fontIcon() { return this._fontIcon; }\n    set fontIcon(value) {\n        this._fontIcon = this._cleanupFontValue(value);\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1: return ['', parts[0]]; // Use default namespace.\n            case 2: return parts;\n            default: throw Error(`Invalid icon name: \"${iconName}\"`); // TODO: add an ngDevMode check\n        }\n    }\n    ngOnChanges(changes) {\n        // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n        const svgIconChanges = changes['svgIcon'];\n        this._svgNamespace = null;\n        this._svgName = null;\n        if (svgIconChanges) {\n            this._currentIconFetch.unsubscribe();\n            if (this.svgIcon) {\n                const [namespace, iconName] = this._splitIconName(this.svgIcon);\n                if (namespace) {\n                    this._svgNamespace = namespace;\n                }\n                if (iconName) {\n                    this._svgName = iconName;\n                }\n                this._currentIconFetch = this._iconRegistry.getNamedSvgIcon(iconName, namespace)\n                    .pipe(take(1))\n                    .subscribe(svg => this._setSvgElement(svg), (err) => {\n                    const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n                    this._errorHandler.handleError(new Error(errorMessage));\n                });\n            }\n            else if (svgIconChanges.previousValue) {\n                this._clearSvgElement();\n            }\n        }\n        if (this._usingFontIcon()) {\n            this._updateFontIconClasses();\n        }\n    }\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        if (this._usingFontIcon()) {\n            this._updateFontIconClasses();\n        }\n    }\n    ngAfterViewChecked() {\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && cachedElements.size) {\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._currentIconFetch.unsubscribe();\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n        // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n        // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n        const styleTags = svg.querySelectorAll('style');\n        for (let i = 0; i < styleTags.length; i++) {\n            styleTags[i].textContent += ' ';\n        }\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        const path = this._location.getPathname();\n        this._previousPath = path;\n        this._cacheChildrenWithExternalReferences(svg);\n        this._prependPathToReferences(path);\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    _clearSvgElement() {\n        const layoutElement = this._elementRef.nativeElement;\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                layoutElement.removeChild(child);\n            }\n        }\n    }\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        const elem = this._elementRef.nativeElement;\n        const fontSetClass = this.fontSet ?\n            this._iconRegistry.classNameForFontAlias(this.fontSet) :\n            this._iconRegistry.getDefaultFontSetClass();\n        if (fontSetClass != this._previousFontSetClass) {\n            if (this._previousFontSetClass) {\n                elem.classList.remove(this._previousFontSetClass);\n            }\n            if (fontSetClass) {\n                elem.classList.add(fontSetClass);\n            }\n            this._previousFontSetClass = fontSetClass;\n        }\n        if (this.fontIcon != this._previousFontIconClass) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n    _prependPathToReferences(path) {\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((attrs, element) => {\n                attrs.forEach(attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                });\n            });\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        const elements = this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map();\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach(attr => {\n                const elementWithReference = elementsWithFuncIri[i];\n                const value = elementWithReference.getAttribute(attr);\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    }\n                    attributes.push({ name: attr, value: match[1] });\n                }\n            });\n        }\n    }\n}\nMatIcon.ɵfac = function MatIcon_Factory(t) { return new (t || MatIcon)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatIconRegistry), ɵngcc0.ɵɵinjectAttribute('aria-hidden'), ɵngcc0.ɵɵdirectiveInject(MAT_ICON_LOCATION), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ErrorHandler)); };\nMatIcon.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatIcon, selectors: [[\"mat-icon\"]], hostAttrs: [\"role\", \"img\", 1, \"mat-icon\", \"notranslate\"], hostVars: 7, hostBindings: function MatIcon_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"data-mat-icon-type\", ctx._usingFontIcon() ? \"font\" : \"svg\")(\"data-mat-icon-name\", ctx._svgName || ctx.fontIcon)(\"data-mat-icon-namespace\", ctx._svgNamespace || ctx.fontSet);\n        ɵngcc0.ɵɵclassProp(\"mat-icon-inline\", ctx.inline)(\"mat-icon-no-color\", ctx.color !== \"primary\" && ctx.color !== \"accent\" && ctx.color !== \"warn\");\n    } }, inputs: { color: \"color\", inline: \"inline\", fontSet: \"fontSet\", fontIcon: \"fontIcon\", svgIcon: \"svgIcon\" }, exportAs: [\"matIcon\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function MatIcon_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatIcon.ctorParameters = () => [\n    { type: ElementRef },\n    { type: MatIconRegistry },\n    { type: String, decorators: [{ type: Attribute, args: ['aria-hidden',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_ICON_LOCATION,] }] },\n    { type: ErrorHandler }\n];\nMatIcon.propDecorators = {\n    inline: [{ type: Input }],\n    svgIcon: [{ type: Input }],\n    fontSet: [{ type: Input }],\n    fontIcon: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatIcon, [{\n        type: Component,\n        args: [{\n                template: '<ng-content></ng-content>',\n                selector: 'mat-icon',\n                exportAs: 'matIcon',\n                inputs: ['color'],\n                host: {\n                    'role': 'img',\n                    'class': 'mat-icon notranslate',\n                    '[attr.data-mat-icon-type]': '_usingFontIcon() ? \"font\" : \"svg\"',\n                    '[attr.data-mat-icon-name]': '_svgName || fontIcon',\n                    '[attr.data-mat-icon-namespace]': '_svgNamespace || fontSet',\n                    '[class.mat-icon-inline]': 'inline',\n                    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"'\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: MatIconRegistry }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['aria-hidden']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_ICON_LOCATION]\n            }] }, { type: ɵngcc0.ErrorHandler }]; }, { inline: [{\n            type: Input\n        }], fontSet: [{\n            type: Input\n        }], fontIcon: [{\n            type: Input\n        }], svgIcon: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatIconModule {\n}\nMatIconModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatIconModule });\nMatIconModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatIconModule_Factory(t) { return new (t || MatIconModule)(); }, imports: [[MatCommonModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatIconModule, { declarations: function () { return [MatIcon]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatIcon, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatIconModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: [MatIcon, MatCommonModule],\n                declarations: [MatIcon]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError, ɵ0 };\n\n//# sourceMappingURL=icon.js.map","import { OverlayModule, OverlayConfig, Overlay } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, NgZone, ElementRef, ChangeDetectorRef, ViewChild, NgModule, Injector, TemplateRef, ɵɵdefineInjectable, ɵɵinject, INJECTOR, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/button';\nimport * as ɵngcc3 from '@angular/cdk/portal';\nimport * as ɵngcc4 from '@angular/cdk/overlay';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/cdk/layout';\n\nfunction SimpleSnackBar_div_2_Template(rf, ctx) { if (rf & 1) {\n    const _r2 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵelementStart(1, \"button\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function SimpleSnackBar_div_2_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1.action(); });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.data.action);\n} }\nfunction MatSnackBarContainer_ng_template_0_Template(rf, ctx) { }\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** The horizontal position to place the snack bar. */\n        this.horizontalPosition = 'center';\n        /** The vertical position to place the snack bar. */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the snack bar has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the snack bar action was called. */\n        this._onAction = new Subject();\n        /** Whether the snack bar was dismissed using the action button. */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe(() => this.dismiss());\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /** Dismisses the snack bar. */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n        }\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /** Cleans up the DOM after closing. */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction() {\n        return this._onAction;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.ɵfac = function SimpleSnackBar_Factory(t) { return new (t || SimpleSnackBar)(ɵngcc0.ɵɵdirectiveInject(MatSnackBarRef), ɵngcc0.ɵɵdirectiveInject(MAT_SNACK_BAR_DATA)); };\nSimpleSnackBar.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SimpleSnackBar, selectors: [[\"simple-snack-bar\"]], hostAttrs: [1, \"mat-simple-snackbar\"], decls: 3, vars: 2, consts: [[\"class\", \"mat-simple-snackbar-action\", 4, \"ngIf\"], [1, \"mat-simple-snackbar-action\"], [\"mat-button\", \"\", 3, \"click\"]], template: function SimpleSnackBar_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"span\");\n        ɵngcc0.ɵɵtext(1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(2, SimpleSnackBar_div_2_Template, 3, 1, \"div\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate(ctx.data.message);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasAction);\n    } }, directives: [ɵngcc1.NgIf, ɵngcc2.MatButton], styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"], encapsulation: 2, changeDetection: 0 });\nSimpleSnackBar.ctorParameters = () => [\n    { type: MatSnackBarRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DATA,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SimpleSnackBar, [{\n        type: Component,\n        args: [{\n                selector: 'simple-snack-bar',\n                template: \"<span>{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'class': 'mat-simple-snackbar'\n                },\n                styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"]\n            }]\n    }], function () { return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SNACK_BAR_DATA]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0\n        }))),\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, \n    /** The snack bar configuration. */\n    snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.snackBarConfig = snackBarConfig;\n        /** Whether the component has been destroyed. */\n        this._destroyed = false;\n        /** Subject for notifying that the snack bar has exited from view. */\n        this._onExit = new Subject();\n        /** Subject for notifying that the snack bar has finished entering the view. */\n        this._onEnter = new Subject();\n        /** The state of the snack bar animations. */\n        this._animationState = 'void';\n        /**\n         * Attaches a DOM portal to the snack bar container.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            this._assertNotAttached();\n            this._applySnackBarClasses();\n            return this._portalOutlet.attachDomPortal(portal);\n        };\n        // Based on the ARIA spec, `alert` and `status` roles have an\n        // implicit `assertive` and `polite` politeness respectively.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._role = 'alert';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._role = null;\n        }\n        else {\n            this._role = 'status';\n        }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n        // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n        // `MatSnackBar.open`).\n        this._animationState = 'hidden';\n        // Mark this element with an 'exit' attribute to indicate that the snackbar has\n        // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n        // test harness.\n        this._elementRef.nativeElement.setAttribute('mat-exit', '');\n        return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n            this._onExit.next();\n            this._onExit.complete();\n        });\n    }\n    /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n    _applySnackBarClasses() {\n        const element = this._elementRef.nativeElement;\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n}\nMatSnackBarContainer.ɵfac = function MatSnackBarContainer_Factory(t) { return new (t || MatSnackBarContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MatSnackBarConfig)); };\nMatSnackBarContainer.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSnackBarContainer, selectors: [[\"snack-bar-container\"]], viewQuery: function MatSnackBarContainer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(CdkPortalOutlet, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, hostAttrs: [1, \"mat-snack-bar-container\"], hostVars: 2, hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@state.done\", function MatSnackBarContainer_animation_state_done_HostBindingHandler($event) { return ctx.onAnimationEnd($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"role\", ctx._role);\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@state\", ctx._animationState);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkPortalOutlet\", \"\"]], template: function MatSnackBarContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatSnackBarContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    } }, directives: [ɵngcc3.CdkPortalOutlet], styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"], encapsulation: 2, data: { animation: [matSnackBarAnimations.snackBarState] } });\nMatSnackBarContainer.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: MatSnackBarConfig }\n];\nMatSnackBarContainer.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSnackBarContainer, [{\n        type: Component,\n        args: [{\n                selector: 'snack-bar-container',\n                template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n                // In Ivy embedded views will be change detected from their declaration place, rather than\n                // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n                // because it might cause snack bars that were opened from a template not to be out of date.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                animations: [matSnackBarAnimations.snackBarState],\n                host: {\n                    '[attr.role]': '_role',\n                    'class': 'mat-snack-bar-container',\n                    '[@state]': '_animationState',\n                    '(@state.done)': 'onAnimationEnd($event)'\n                },\n                styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: MatSnackBarConfig }]; }, { _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet, { static: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSnackBarModule });\nMatSnackBarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatSnackBarModule_Factory(t) { return new (t || MatSnackBarModule)(); }, imports: [[\n            OverlayModule,\n            PortalModule,\n            CommonModule,\n            MatButtonModule,\n            MatCommonModule,\n        ], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSnackBarModule, { declarations: function () { return [MatSnackBarContainer, SimpleSnackBar]; }, imports: function () { return [OverlayModule,\n        PortalModule,\n        CommonModule,\n        MatButtonModule,\n        MatCommonModule]; }, exports: function () { return [MatSnackBarContainer, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSnackBarModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    CommonModule,\n                    MatButtonModule,\n                    MatCommonModule,\n                ],\n                exports: [MatSnackBarContainer, MatCommonModule],\n                declarations: [MatSnackBarContainer, SimpleSnackBar],\n                entryComponents: [MatSnackBarContainer, SimpleSnackBar]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar {\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n        /** The component that should be rendered as the snack bar's simple component. */\n        this.simpleSnackBarComponent = SimpleSnackBar;\n        /** The container component that attaches the provided template or component. */\n        this.snackBarContainerComponent = MatSnackBarContainer;\n        /** The CSS class to applie for handset mode. */\n        this.handsetCssClass = 'mat-snack-bar-handset';\n    }\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n        return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n        const _config = Object.assign(Object.assign({}, this._defaultConfig), config);\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        // Since the snack bar has `role=\"alert\"`, we don't\n        // want to announce the same message twice.\n        if (_config.announcementMessage === message) {\n            _config.announcementMessage = undefined;\n        }\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatSnackBarConfig, useValue: config }]\n        });\n        const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n        const config = Object.assign(Object.assign(Object.assign({}, new MatSnackBarConfig()), this._defaultConfig), userConfig);\n        const overlayRef = this._createOverlay(config);\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            const portal = new TemplatePortal(content, null, {\n                $implicit: config.data,\n                snackBarRef\n            });\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            const injector = this._createInjector(config, snackBarRef);\n            const portal = new ComponentPortal(content, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe(state => {\n            const classList = overlayRef.overlayElement.classList;\n            state.matches ? classList.add(this.handsetCssClass) : classList.remove(this.handsetCssClass);\n        });\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n        }\n        if (config.announcementMessage) {\n            this._live.announce(config.announcementMessage, config.politeness);\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        const isRtl = config.direction === 'rtl';\n        const isLeft = (config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl));\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return Injector.create({\n            parent: userInjector || this._injector,\n            providers: [\n                { provide: MatSnackBarRef, useValue: snackBarRef },\n                { provide: MAT_SNACK_BAR_DATA, useValue: config.data }\n            ]\n        });\n    }\n}\nMatSnackBar.ɵfac = function MatSnackBar_Factory(t) { return new (t || MatSnackBar)(ɵngcc0.ɵɵinject(ɵngcc4.Overlay), ɵngcc0.ɵɵinject(ɵngcc5.LiveAnnouncer), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc6.BreakpointObserver), ɵngcc0.ɵɵinject(MatSnackBar, 12), ɵngcc0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); };\nMatSnackBar.ɵprov = ɵɵdefineInjectable({ factory: function MatSnackBar_Factory() { return new MatSnackBar(ɵɵinject(Overlay), ɵɵinject(LiveAnnouncer), ɵɵinject(INJECTOR), ɵɵinject(BreakpointObserver), ɵɵinject(MatSnackBar, 12), ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: MatSnackBar, providedIn: MatSnackBarModule });\nMatSnackBar.ctorParameters = () => [\n    { type: Overlay },\n    { type: LiveAnnouncer },\n    { type: Injector },\n    { type: BreakpointObserver },\n    { type: MatSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: MatSnackBarConfig, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSnackBar, [{\n        type: Injectable,\n        args: [{ providedIn: MatSnackBarModule }]\n    }], function () { return [{ type: ɵngcc4.Overlay }, { type: ɵngcc5.LiveAnnouncer }, { type: ɵngcc0.Injector }, { type: ɵngcc6.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: MatSnackBarConfig, decorators: [{\n                type: Inject,\n                args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\n\n//# sourceMappingURL=snack-bar.js.map"]}