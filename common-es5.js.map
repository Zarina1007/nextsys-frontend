{"version":3,"sources":["webpack:///src/app/modules/auth/registration/confirm-password.validator.ts","webpack:///src/app/modules/i18n/translation.module.ts","webpack:///src/app/modules/tag-management/tag-management.service.ts","webpack:///src/app/shared/service/notification.service.ts","webpack:///src/app/shared/service/snackbar.service.ts","webpack:///src/app/shared/service/tags.service.ts"],"names":["ConfirmPasswordValidator","control","password","get","value","confirmPassword","setErrors","ConfirmPassword","TranslationModule","imports","exports","TagManagementService","tagsService","getChrome","getFirefox","tag","add","getAllTags","companyKey","getCompanyTags","tagKey","deleteTag","getOneTag","updateOneTag","template","addTemplate","getAllTemplates","templateKey","deleteTemplate","getOneTemplate","providedIn","NotificationService","toastr","message","title","success","error","info","warning","SnackbarService","_snackBar","open","duration","horizontalPosition","verticalPosition","panelClass","API_TAGS_URL","apiUrl","API_TEMPLATES_URL","TagsService","http","post","_key","tags","params","append","JSON","stringify"],"mappings":"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","file":"common-es5.js","sourcesContent":["import { AbstractControl } from '@angular/forms';\r\n\r\nexport class ConfirmPasswordValidator {\r\n  /**\r\n   * Check matching password with confirm password\r\n   * @param control AbstractControl\r\n   */\r\n  static MatchPassword(control: AbstractControl) {\r\n    const password = control.get('password').value;\r\n\r\n    const confirmPassword = control.get('cPassword').value;\r\n\r\n    if (password !== confirmPassword) {\r\n      control.get('cPassword').setErrors({ ConfirmPassword: true });\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, TranslateModule],\r\n  exports: [CommonModule, TranslateModule],\r\n})\r\nexport class TranslationModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { TagsService } from './../../shared/service/tags.service';\r\nimport { TagInterface } from './../../shared/models/tag.interface';\r\nimport { TemplateInterface } from './../../shared/models/template.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TagManagementService {\r\n\r\n  constructor(\r\n    private tagsService: TagsService,\r\n  ) { }\r\n\r\n  // Get all Chrome objects\r\n  getChromeBrowserVersion() {\r\n    return this.tagsService.getChrome();\r\n  }\r\n  // Get all Chrome objects\r\n  getFirefoxBrowserVersion() {\r\n    return this.tagsService.getFirefox();\r\n  }\r\n  addTag(tag: TagInterface): Observable<TagInterface> {\r\n    return this.tagsService.add(tag);\r\n  }\r\n  getAllTags(): Observable<TagInterface[]> {\r\n    return this.tagsService.getAllTags();\r\n  }\r\n  getCompanyTags(companyKey: any) {\r\n    return this.tagsService.getCompanyTags(companyKey);\r\n  }\r\n  \r\n  deleteTag(tagKey: any) {\r\n    return this.tagsService.deleteTag(tagKey);\r\n  }\r\n\r\n  getOneTag(tag: TagInterface): Observable<TagInterface> {\r\n    return this.tagsService.getOneTag(tag);\r\n  }\r\n  updateOneTag(tag: TagInterface): Observable<TagInterface> {\r\n    return this.tagsService.updateOneTag(tag);\r\n  }\r\n  addTemplate(template: TemplateInterface): Observable<TemplateInterface> {\r\n    return this.tagsService.addTemplate(template);\r\n  }\r\n  getAllTemplates(): Observable<TagInterface[]> {\r\n    return this.tagsService.getAllTemplates();\r\n  }\r\n  deleteTemplate(templateKey: any) {\r\n    return this.tagsService.deleteTemplate(templateKey);\r\n  }\r\n  getOneTemplate(template: TemplateInterface): Observable<TemplateInterface> {\r\n    return this.tagsService.getOneTemplate(template);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { ToastrService } from 'ngx-toastr';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n\n  constructor(\n    private toastr: ToastrService\n  ) { }\n\n  showSuccess(message, title){\n    this.toastr.success(message, title)\n  }\n\n  showError(message, title){\n      this.toastr.error(message, title)\n  }\n\n  showInfo(message, title){\n      this.toastr.info(message, title)\n  }\n\n  showWarning(message, title){\n      this.toastr.warning(message, title)\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SnackbarService {\r\n\r\n  constructor(private _snackBar: MatSnackBar) { }\r\n\r\n  info(message): void {\r\n    this._snackBar.open(message, null, {\r\n      duration: 2000,\r\n      horizontalPosition: 'right',\r\n      verticalPosition: 'bottom',\r\n    });\r\n  }\r\n  notAccess(message): void {\r\n    this._snackBar.open(message, null, {\r\n      duration: 2000,\r\n      horizontalPosition: 'right',\r\n      verticalPosition: 'top',\r\n      panelClass: 'not-allowed-access'\r\n    });\r\n  }\r\n  error(message): void {\r\n    this._snackBar.open(message, null, {\r\n      duration: 2000,\r\n      horizontalPosition: 'right',\r\n      verticalPosition: 'top',\r\n      panelClass: 'not-allowed-access'\r\n    });\r\n  }\r\n\r\n}\r\n","import { Observable } from 'rxjs';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { TagInterface } from '../models/tag.interface';\r\nimport { TemplateInterface } from '../models/template.interface';\r\n\r\nconst API_TAGS_URL = `${environment.apiUrl}/tags`;\r\nconst API_TEMPLATES_URL = `${environment.apiUrl}/templates`;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TagsService {\r\n\r\n  constructor(\r\n    private http: HttpClient\r\n  ) { }\r\n\r\n  getAll(): Observable<TagInterface[]> {\r\n    return this.http.get<TagInterface[]>(API_TAGS_URL);\r\n  }\r\n\r\n  add(tag:TagInterface): Observable<TagInterface> {\r\n    return this.http.post<TagInterface>(API_TAGS_URL,tag);\r\n  }\r\n  \r\n  getChrome() {\r\n    return this.http.get<any>(API_TAGS_URL + \"/chrome/browser\");\r\n  }\r\n  getFirefox(){\r\n    return this.http.get<any>(API_TAGS_URL + \"/firefox/browser\");\r\n  }\r\n  getAllTags(): Observable<TagInterface[]> {\r\n    return this.http.get<TagInterface[]>(API_TAGS_URL + '/');\r\n  }\r\n  deleteTag(tagKey:any) {\r\n    return this.http.delete(API_TAGS_URL + `/${tagKey}`);\r\n  }\r\n  getCompanyTags(companyKey:any) {\r\n    return this.http.get(API_TAGS_URL + `/get_tag_company/${companyKey}`);\r\n  }\r\n  getOneTag(tag: TagInterface): Observable<TagInterface> {\r\n    return this.http.get<TagInterface>(\r\n      API_TAGS_URL + `/get_tag/${tag}`\r\n    );\r\n  }\r\n  updateOneTag(tag: TagInterface): Observable<TagInterface> {\r\n    return this.http.post<TagInterface>(\r\n      API_TAGS_URL + `/update/${tag._key}`,\r\n      tag\r\n    );\r\n  }\r\n  addTemplate(template:TemplateInterface): Observable<TemplateInterface> {\r\n    return this.http.post<TemplateInterface>(API_TEMPLATES_URL, template);\r\n  }\r\n  getAllTemplates(): Observable<TemplateInterface[]> {\r\n    return this.http.get<TemplateInterface[]>(API_TEMPLATES_URL);\r\n  }\r\n  deleteTemplate(templateKey:any) {\r\n    return this.http.delete(API_TEMPLATES_URL + `/${templateKey}`);\r\n  }\r\n  getOneTemplate(template: TemplateInterface): Observable<TemplateInterface> {\r\n    return this.http.get<TemplateInterface>(\r\n      API_TEMPLATES_URL + `/get_template/${template}`\r\n    );\r\n  }\r\n\r\n  getUserTags(tags: string[]): Observable<TagInterface[]> {\r\n    let params = new HttpParams();\r\n    params = params.append('tags', JSON.stringify(tags));\r\n    return this.http.get<TagInterface[]>(\r\n      API_TAGS_URL + `/get_many_tags`,\r\n      { params: params }\r\n    );\r\n  }\r\n}\r\n"]}