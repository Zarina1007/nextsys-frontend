{"version":3,"sources":["webpack:///src/app/modules/i18n/translation.module.ts","webpack:///src/app/shared/service/snackbar.service.ts","webpack:///src/app/shared/service/tags.service.ts"],"names":["TranslationModule","imports","exports","SnackbarService","_snackBar","message","open","duration","horizontalPosition","verticalPosition","providedIn","API_TAGS_URL","apiUrl","TagsService","http","get","tag","post","tagKey","_key"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAQaA,iB;;;;;cAAAA;;;;2BAAAA,iB;AAAiB,S;AAAA,kBAHnB,CAAC,4DAAD,EAAe,mEAAf,CAGmB,EAFlB,4DAEkB,EAFJ,mEAEI;;;;4HAAjBA,iB,EAAiB;AAAA,oBAHlB,4DAGkB,EAHJ,mEAGI;AAHW,oBAC7B,4DAD6B,EACf,mEADe;AAGX,S;AAFW,O;;;;;wEAE5BA,iB,EAAiB;gBAJ7B,sDAI6B;iBAJpB;AACRC,mBAAO,EAAE,CAAC,4DAAD,EAAe,mEAAf,CADD;AAERC,mBAAO,EAAE,CAAC,4DAAD,EAAe,mEAAf;AAFD,W;AAIoB,U;;;;;;;;;;;;;;;;;;ACN9B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAOaC,e;AAEX,iCAAoBC,SAApB,EAA4C;AAAA;;AAAxB,eAAAA,SAAA,GAAAA,SAAA;AAA2B;;;;+BAE1CC,O,EAAO;AACV,iBAAKD,SAAL,CAAeE,IAAf,CAAoBD,OAApB,EAA6B,IAA7B,EAAmC;AACjCE,sBAAQ,EAAE,IADuB;AAEjCC,gCAAkB,EAAE,OAFa;AAGjCC,8BAAgB,EAAE;AAHe,aAAnC;AAKD;;;;;;;yBAVUN,e,EAAe,+H;AAAA,O;;;eAAfA,e;AAAe,iBAAfA,eAAe,K;AAAA,oBAFd;;;;;wEAEDA,e,EAAe;gBAH3B,wDAG2B;iBAHhB;AACVO,sBAAU,EAAE;AADF,W;AAGgB,U;;;;;;;;;;;;;;;;;;;;;;ACP5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAIA,UAAMC,YAAY,aAAM,yEAAYC,MAAlB,UAAlB;;UAMaC,W;AAEX,6BACUC,IADV,EAC0B;AAAA;;AAAhB,eAAAA,IAAA,GAAAA,IAAA;AACL;;;;mCAEC;AACJ,mBAAO,KAAKA,IAAL,CAAUC,GAAV,CAA8BJ,YAA9B,CAAP;AACD;;;8BAEGK,G,EAAgB;AAClB,mBAAO,KAAKF,IAAL,CAAUG,IAAV,CAA6BN,YAA7B,EAA0CK,GAA1C,CAAP;AACD;;;sCACW;AACV,mBAAO,KAAKF,IAAL,CAAUC,GAAV,CAAmBJ,YAAY,GAAG,iBAAlC,CAAP;AACD;;;uCACS;AACR,mBAAO,KAAKG,IAAL,CAAUC,GAAV,CAAmBJ,YAAY,GAAG,kBAAlC,CAAP;AACD;;;uCACS;AACR,mBAAO,KAAKG,IAAL,CAAUC,GAAV,CAA8BJ,YAAY,GAAG,GAA7C,CAAP;AACD;;;oCACSO,M,EAAY;AACpB,mBAAO,KAAKJ,IAAL,WAAiBH,YAAY,cAAOO,MAAP,CAA7B,CAAP;AACD;;;oCACSF,G,EAAiB;AACzB,mBAAO,KAAKF,IAAL,CAAUC,GAAV,CACLJ,YAAY,sBAAeK,GAAf,CADP,CAAP;AAGD;;;uCACYA,G,EAAiB;AAC5B,mBAAO,KAAKF,IAAL,CAAUG,IAAV,CACLN,YAAY,qBAAcK,GAAG,CAACG,IAAlB,CADP,EAELH,GAFK,CAAP;AAID;;;;;;;yBAnCUH,W,EAAW,uH;AAAA,O;;;eAAXA,W;AAAW,iBAAXA,WAAW,K;AAAA,oBAFV;;;;;wEAEDA,W,EAAW;gBAHvB,wDAGuB;iBAHZ;AACVH,sBAAU,EAAE;AADF,W;AAGY,U","file":"common-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, TranslateModule],\r\n  exports: [CommonModule, TranslateModule],\r\n})\r\nexport class TranslationModule {}\r\n","import { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { AbstractControl } from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SnackbarService {\r\n\r\n  constructor(private _snackBar: MatSnackBar) { }\r\n\r\n  info(message): void {\r\n    this._snackBar.open(message, null, {\r\n      duration: 2000,\r\n      horizontalPosition: 'right',\r\n      verticalPosition: 'bottom',\r\n    });\r\n  }\r\n\r\n}\r\n","import { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { TagInterface } from '../models/tag.interface';\r\n\r\nconst API_TAGS_URL = `${environment.apiUrl}/tags`;\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TagsService {\r\n\r\n  constructor(\r\n    private http: HttpClient\r\n  ) { }\r\n\r\n  getAll(): Observable<TagInterface[]> {\r\n    return this.http.get<TagInterface[]>(API_TAGS_URL);\r\n  }\r\n\r\n  add(tag:TagInterface): Observable<TagInterface> {\r\n    return this.http.post<TagInterface>(API_TAGS_URL,tag);\r\n  }\r\n  getChrome() {\r\n    return this.http.get<any>(API_TAGS_URL + \"/chrome/browser\");\r\n  }\r\n  getFirefox(){\r\n    return this.http.get<any>(API_TAGS_URL + \"/firefox/browser\");\r\n  }\r\n  getAllTags(): Observable<TagInterface[]> {\r\n    return this.http.get<TagInterface[]>(API_TAGS_URL + '/');\r\n  }\r\n  deleteTag(tagKey:any) {\r\n    return this.http.delete(API_TAGS_URL + `/${tagKey}`);\r\n  }\r\n  getOneTag(tag: TagInterface): Observable<TagInterface> {\r\n    return this.http.get<TagInterface>(\r\n      API_TAGS_URL + `/get_tag/${tag}`\r\n    );\r\n  }\r\n  updateOneTag(tag: TagInterface): Observable<TagInterface> {\r\n    return this.http.post<TagInterface>(\r\n      API_TAGS_URL + `/update/${tag._key}`,\r\n      tag\r\n    );\r\n  }\r\n}\r\n"]}