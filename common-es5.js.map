{"version":3,"sources":["webpack:///src/app/modules/auth/registration/confirm-password.validator.ts","webpack:///src/app/modules/i18n/translation.module.ts","webpack:///src/app/shared/service/admin-stats/solexbc.service.ts","webpack:///src/app/shared/service/admin-stats/system1.service.ts","webpack:///src/app/shared/service/notification.service.ts","webpack:///src/app/shared/service/snackbar.service.ts"],"names":["ConfirmPasswordValidator","control","password","get","value","confirmPassword","setErrors","ConfirmPassword","TranslationModule","imports","exports","API_SOLEXBC_URL","apiUrl","SolexBCService","http","company","startDate","endDate","params","providedIn","API_SYSTEM1_URL","System1Service","NotificationService","toastr","message","title","success","error","info","warning","SnackbarService","_snackBar","open","duration","horizontalPosition","verticalPosition","panelClass"],"mappings":"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","file":"common-es5.js","sourcesContent":["import { AbstractControl } from '@angular/forms';\r\n\r\nexport class ConfirmPasswordValidator {\r\n  /**\r\n   * Check matching password with confirm password\r\n   * @param control AbstractControl\r\n   */\r\n  static MatchPassword(control: AbstractControl) {\r\n    const password = control.get('password').value;\r\n\r\n    const confirmPassword = control.get('cPassword').value;\r\n\r\n    if (password !== confirmPassword) {\r\n      control.get('cPassword').setErrors({ ConfirmPassword: true });\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, TranslateModule],\r\n  exports: [CommonModule, TranslateModule],\r\n})\r\nexport class TranslationModule {}\r\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../../../environments/environment';\r\nimport { ChartDataInterface } from '../../models/chartData.interface';\r\n\r\nconst API_SOLEXBC_URL = `${environment.apiUrl}/stats/admin/solexbc`;\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\n\r\nexport class SolexBCService {\r\n    constructor(private http: HttpClient) {}\r\n\r\n    getChartMetrics(company, startDate, endDate): Observable<ChartDataInterface> {\r\n        return this.http.get<any>(API_SOLEXBC_URL + '/chart_metrics', {\r\n          params: { company: company, startDate: startDate, endDate: endDate },\r\n        });\r\n    }\r\n    getAllSolexBCStats(company, startDate, endDate): Observable<any> {\r\n        return this.http.get<any>(API_SOLEXBC_URL + '/all-publishers', {\r\n          params: { company: company, startDate: startDate, endDate: endDate },\r\n        });\r\n    }\r\n\r\n    getSolexBCStats(company, startDate, endDate): Observable<any> {\r\n      return this.http.get<any>(API_SOLEXBC_URL + '/', {\r\n        params: { company: company, startDate: startDate, endDate: endDate },\r\n      });\r\n  }\r\n\r\n    getSummaryMetrics(company) {\r\n        return this.http.get<any>(API_SOLEXBC_URL + '/summary_metrics', {\r\n          params: { company: company },\r\n        });\r\n    }\r\n    getAllDashboardStats(): Observable<any> {\r\n      return this.http.get<any>(API_SOLEXBC_URL + '/all-stat');\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { environment } from '../../../../environments/environment';\r\nimport { Observable } from 'rxjs';\r\n\r\nconst API_SYSTEM1_URL = `${environment.apiUrl}/stats/admin/system1`;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class System1Service {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getAllSystem1Stats(company, startDate, endDate): Observable<any> {\r\n    return this.http.get<any>(API_SYSTEM1_URL + '/', {\r\n      params: { company: company, startDate: startDate, endDate: endDate },\r\n    });\r\n  }\r\n\r\n  getAllDashboardStats(): Observable<any> {\r\n    return this.http.get<any>(API_SYSTEM1_URL + '/all-stat');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NotificationService {\r\n\r\n  constructor(\r\n    private toastr: ToastrService\r\n  ) { }\r\n\r\n  showSuccess(message, title){\r\n    this.toastr.success(message, title)\r\n  }\r\n\r\n  showError(message, title){\r\n      this.toastr.error(message, title)\r\n  }\r\n\r\n  showInfo(message, title){\r\n      this.toastr.info(message, title)\r\n  }\r\n\r\n  showWarning(message, title){\r\n      this.toastr.warning(message, title)\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SnackbarService {\r\n\r\n  constructor(private _snackBar: MatSnackBar) { }\r\n\r\n  info(message): void {\r\n    this._snackBar.open(message, null, {\r\n      duration: 2000,\r\n      horizontalPosition: 'right',\r\n      verticalPosition: 'bottom',\r\n    });\r\n  }\r\n  notAccess(message): void {\r\n    this._snackBar.open(message, null, {\r\n      duration: 2000,\r\n      horizontalPosition: 'right',\r\n      verticalPosition: 'top',\r\n      panelClass: 'not-allowed-access'\r\n    });\r\n  }\r\n  error(message): void {\r\n    this._snackBar.open(message, null, {\r\n      duration: 2000,\r\n      horizontalPosition: 'right',\r\n      verticalPosition: 'top',\r\n      panelClass: 'not-allowed-access'\r\n    });\r\n  }\r\n\r\n}\r\n"]}